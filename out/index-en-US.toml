[input]
minimum_indexed_substring_length = 2
title_boost = "Ridiculous"
stemming = "English"

[[input.files]]
title = "Manifold Finance"
url = "/"
contents = "{\n// wrapped with {} to mark it as javascript so mdx will not put it under a p tag\n}\n{Manifold Finance}\n\nThis documentation covers strategies implemented by Manifold Finance.\nFor example, YCabal  is designed for leveraging Miner Extracted Value and market dynamics\nto benefit end users by reducing transactional cost through batching transactional orderflow.\nThis provides anefficient supplemental fee income for traders, without an opportunity cost, simply\nby using the underly service.\nTopics\nYCabal - MEV Strategy implementation details and integration\nManifold Governance - Proposals, Voting, and Governance overview\nFOLD Protocol - FOLD Token staking and strategy information\nMaidenlane - Documentation\nSupport and Helpdesk\nlink to support\nlink to helpdesk\nCommunity\nFeel free to join the discussions on our forums!\nCopyright 2021 - All Rights Reserved. CommodityStream, Inc.\n"
filetype = "PlainText"
[[input.files]]
title = "mev-client"
url = "/docs/mev-client"
contents = "GreyPool\nstratumss:// \nTransaction Pool Feeds\nThis fork of Geth includes two new types of subscriptions, available through the\neth_subscribe method on Websockets.\nRejected Transactions\nUsing Websockets, you can subscribe to a feed of rejected transactions with:\nThis will immediately return a payload of the form:\nAnd as messages are rejected by the transaction pool, it will send additional\nmessages of the form:\nOne message will be emitted on this feed for every transaction rejected by the\ntransaction pool, excluding those rejected because they were already known by\nthe transaction pool.\nIt is important that consuming applications process messages quickly enough to\nkeep up with the process. Geth will buffer up to 20,000 messages, but if that\nthreshold is reached the subscription will be discarded by the server.\nThe reject reason corresponds to the error messages returned by Geth within the\ntxpool. At the time of this writing, these include:\ninvalid sender\nnonce too low\ntransaction underpriced\nreplacement transaction underpriced\ninsufficient funds for gas * price + value\nintrinsic gas too low\nexceeds block gas limit\nnegative value\noversized data\nHowever it is possible that in the future Geth may add new error types that\ncould be included by this response without modification to the rejection feed\nitself.\nDropped Transactions\nUsing Websockets, you can subscribe to a feed of dropped transaction hashes with:\nThis will immediately return a payload of the form:\nAnd as messages are dropped from the transaction pool, it will send additional\nmessages of the form:\nOne message will be emitted on this feed for every transaction dropped from the\ntransaction pool.\nIt is important that consuming applications process messages quickly enough to\nkeep up with the process. Geth will buffer up to 20,000 messages, but if that\nthreshold is reached the subscription will be discarded by the server.\nThe following reasons may be included as reasons transactions were rejected:\nunderpriced-txs: Indicates the transaction's gas price is below the node's threshold.\nlow-nonce-txs: Indicates that the account nonce for the sender of this transaction has exceeded the nonce on this transction. That may happen when this transaction is included in a block, or when a replacement transaction is included in a block.\nunpayable-txs: Indicates that the sender lacks sufficient funds to pay the intrinsic gas for this transaction\naccount-cap-txs: Indicates that this account has sent enough transactions to exceed the per-account limit on the node.\nreplaced-txs: Indicates that the transaction was dropped because a replacement transaction with the same nonce and higher gas has replaced it.\nunexecutable-txs: Indicates that a transaction is no longer considered executable. This typically applies to queued transaction, when a dependent pending transaction was removed for a reason such as unpayable-txs.\ntruncating-txs: The transaction was dropped because the number of transactions in the mempool exceeds the allowable limit.\nold-txs: The transaction was dropped because it has been in the mempool longer than the allowable period of time without inclusion in a block.\nupdated-gas-price: The node's minimum gas price was updated, and transactions below that price were dropped.\nMEV Clients\nFlashbots\n"
filetype = "PlainText"
[[input.files]]
title = "getting-started"
url = "/docs/getting-started"
contents = "Technical Overview\nUser Example\nProposed end-user transaction example for interacting with the YCabal\nNOTE: Since the JSON-RPC spec allows responses to be returned in a\ndifferent order than sent, we need a mechanism for choosing a\ncanonical id from a list that doesn't depend on the order. This\nchooses the \"minimum\" id by an arbitrary ordering: the smallest string\nif possible, otherwise the smallest number, otherwise null.\nNow if the Cabal broadcasts this transaction with an arbitrage order,\nthe transaction contains 2 orders:\nNote: the transaction below is a mock-up for the proposed data\nfields\nThe arbitrage profit generated by the second order is sent to the\nmsg.sender of the first order.\nThe first order will still lose 5%(assumption) in slippage.\nArbitrage profits will rarely be more than the slippage loss.\nIf someone front runs the transaction sent by the Cabal:\nThey pay for the gas while post confirmation of transaction the fees\nfor order1 goes to the relayer in the signed order.\nThey lose 5% in slippage as our real user does.\nEngine\nYCabal uses a batch auction-based matching engine to execute orders.\nBatch auctions were chosen to reduce the impact of frontrunning on the\nexchange.\nAll orders for the given market are collected.\nOrders beyond their time-in-force are canceled.\nOrders are placed into separate lists by market side, and aggregate\nsupply and demand curves are calculated.\nThe matching engine discovers the price at which the aggregate supply\nand demand curves cross, which yields the clearing price. If there is\na horizontal cross - i.e., two prices for which aggregate supply and\ndemand are equal - then the clearing price is the midpoint between\nthe two prices.\nIf both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then\nthe side with higher volume is rationed pro-rata based on how much its volume exceeds the other side.\nFor example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%.\nOrders are sorted based on their price, and order ID. Order IDs are\ngenerated at post time and is the only part of the matching engine that\nis time-dependent. However, the oldest order IDs are matched first so\nthere is no incentive to post an order ahead of someone elseâ€™s.\n"
filetype = "PlainText"
[[input.files]]
title = "Basic Usage"
url = "/examples/basic"
contents = ""
filetype = "PlainText"
[output]
filename = "/Users/sbacha/swr-site/public/index-en-US.st"
excerpts_per_result = 1
