[input]
minimum_indexed_substring_length = 2
title_boost = "Ridiculous"
stemming = "English"

[[input.files]]
title = "getting-started"
url = "/docs/getting-started"
contents = "RPC Overview & API Documentation\nGetting Started\nGetting started with Backbone takes just a few minutes once you’ve signed up.\nWhen you sign up you'll receive your Backbone v3 key to use within your app. With it we can provide you with customized\ninsights and analytics, route your data where it needs to go, and give you access to the most powerful infrastructure\nfor Ethereum. Learn more about getting started, and if\nyou have any issues check our other resources below for help.\nEthereum API\nSeamlessly access Ethereum via the Backbone load-balanced nodes and smart architecture the same way you would via your\nown nodes. We have built services and APIs around JSON RPC, REST and\nWebSockets that you can use with your favorite libraries and frameworks, on four Ethereum networks.\nRead more about our Ethereum API.\nWebSockets API\nUse our WebSockets API to poll on filters, subscriptions, events, etc. Access the\nEthereum Pub/Sub API documentation and\nParity Ethereum Pub/Sub API documentation. Read more about\nour WebSockets API.\nTechnical Overview\nUser Example\nProposed end-user transaction example for interacting with the YCabal\nNOTE: Since the JSON-RPC spec allows responses to be returned in a\ndifferent order than sent, we need a mechanism for choosing a\ncanonical id from a list that doesn't depend on the order. This\nchooses the \"minimum\" id by an arbitrary ordering: the smallest string\nif possible, otherwise the smallest number, otherwise null.\nNow if the Cabal broadcasts this transaction with an arbitrage order,\nthe transaction contains 2 orders:\nNote: the transaction below is a mock-up for the proposed data\nfields\nThe arbitrage profit generated by the second order is sent to the\nmsg.sender of the first order.\nThe first order will still lose 5%(assumption) in slippage.\nArbitrage profits will rarely be more than the slippage loss.\nIf someone front runs the transaction sent by the Cabal:\nThey pay for the gas while post confirmation of transaction the fees\nfor order1 goes to the relayer in the signed order.\nThey lose 5% in slippage as our real user does.\nEngine\nYCabal uses a batch auction-based matching engine to execute orders.\nBatch auctions were chosen to reduce the impact of frontrunning on the\nexchange.\nAll orders for the given market are collected.\nOrders beyond their time-in-force are canceled.\nOrders are placed into separate lists by market side, and aggregate\nsupply and demand curves are calculated.\nThe matching engine discovers the price at which the aggregate supply\nand demand curves cross, which yields the clearing price. If there is\na horizontal cross - i.e., two prices for which aggregate supply and\ndemand are equal - then the clearing price is the midpoint between\nthe two prices.\nIf both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then\nthe side with higher volume is rationed pro-rata based on how much its volume exceeds the other side.\nFor example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%.\nOrders are sorted based on their price, and order ID. Order IDs are\ngenerated at post time and is the only part of the matching engine that\nis time-dependent. However, the oldest order IDs are matched first so\nthere is no incentive to post an order ahead of someone else’s.\n"
filetype = "PlainText"
[[input.files]]
title = "RPC"
url = "/docs/reference/RPC"
contents = "JSON-RPC Reference\nnon-modified rpc calls\n| Method                              | Description                                                                                                                                                    | Considerations                                                                                                                                                                                                                                                             |\n|-----------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| eth_blockNumber                         | Returns the number of the most recent block.                                                                                                                       |                                                                                                                                                                                                                                                                                |\n| eth_call                                | Immediately executes a new message call without creating a transaction on the blockchain.                                                                          | eth_call consumes 0 gas, but has a gas parameter for messages that require it.                                                                                                                                                                                                 |\n| eth_chainId                             | Returns an integer value for the currently configured Chain Id value introduced in EIP-155. Returns None if no Chain Id is available.                              |                                                                                                                                                                                                                                                                                |\n| eth_estimateGas                         | Estimates and returns the gas required for a transaction without adding the transaction to the blockchain.                                                         |                                                                                                                                                                                                                                                                                |\n| eth_gasPrice                            | Returns the current price per gas in Wei.                                                                                                                          |                                                                                                                                                                                                                                                                                |\n| eth_getBalance                          | Returns the balance of an account for the specified account address and integer position of storage.                                                               |                                                                                                                                                                                                                                                                                |\n| eth_getBlockByHash                      | Returns information about the block specified using the block hash.                                                                                                |                                                                                                                                                                                                                                                                                |\n| eth_getBlockByNumber                    | Returns information about the block specified using the block number.                                                                                              |                                                                                                                                                                                                                                                                                |\n| eth_getBlockTransactionCountByHash      | Returns the number of transactions in the block specified using the block hash.                                                                                    |                                                                                                                                                                                                                                                                                |\n| eth_getBlockTransactionCountByNumber    | Returns the number of transactions in the block specified using the block number.                                                                                  |                                                                                                                                                                                                                                                                                |\n| eth_getCode                             | Returns the code at the specified account address.                                                                                                                 |                                                                                                                                                                                                                                                                                |\n| eth_getFilterChanges                    | Polls the specified filter ID, retuning an array of logs that occurred since the last poll.                                                                        | Filters are ephemeral. If Managed Blockchain needs to manage or maintain node instances for availability and performance, and an instance is replaced, filters may be deleted. We recommend that you write your application code to handle the occasional deletion of filters. |\n| eth_getFilterLogs                       | Returns an array of all logs for the specified filter ID.                                                                                                          | Filters are ephemeral. If Managed Blockchain needs to manage or maintain node instances for availability and performance, and an instance is replaced, filters may be deleted. We recommend that you write your application code to handle the occasional deletion of filters. |\n| eth_getLogs                             | Returns an array of all logs for a specified filter object.                                                                                                        | Filters are ephemeral. If Managed Blockchain needs to manage or maintain node instances for availability and performance, and an instance is replaced, filters may be deleted. We recommend that you write your application code to handle the occasional deletion of filters. |\n| eth_getProof                            | Experimental – Returns the account and storage values of the specified account, including the Merkle proof.                                                        |                                                                                                                                                                                                                                                                                |\n| eth_getStorageAt                        | Returns the value of the specified storage position for the specified account address.                                                                             |                                                                                                                                                                                                                                                                                |\n| eth_getTransactionByBlockHashAndIndex   | Returns information about a transaction using the specified block hash and transaction index position.                                                             |                                                                                                                                                                                                                                                                                |\n| eth_getTransactionByBlockNumberAndIndex | Returns information about a transaction using the specified block number and transaction index position.                                                           |                                                                                                                                                                                                                                                                                |\n| eth_getTransactionByHash                | Returns information about the transaction with the specified transaction hash.                                                                                     |                                                                                                                                                                                                                                                                                |\n| eth_getTransactionCount                 | Returns the number of transactions sent from the specified address.                                                                                                |                                                                                                                                                                                                                                                                                |\n| eth_getTransactionReceipt               | Returns the receipt of the transaction using the specified transaction hash.                                                                                       |                                                                                                                                                                                                                                                                                |\n| eth_getUncleByBlockHashAndIndex         | Returns information about the uncle block specified using the block hash and uncle index position.                                                                 |                                                                                                                                                                                                                                                                                |\n| eth_getUncleByBlockNumberAndIndex       | Returns information about the uncle block specified using the block number and uncle index position.                                                               |                                                                                                                                                                                                                                                                                |\n| eth_getUncleCountByBlockHash            | Returns the number of counts in the uncle specified using the uncle hash.                                                                                          |                                                                                                                                                                                                                                                                                |\n| eth_getUncleCountByBlockNumber          | Returns the number of counts in the uncle specified using the uncle number.                                                                                        |                                                                                                                                                                                                                                                                                |\n| eth_getWork                             | Returns the hash of the current block, the seedHash, and the boundary condition (also called the \"target\") to be met.                                              |                                                                                                                                                                                                                                                                                |\n| eth_newBlockFilter                      | Creates a filter in the node to notify when a new block arrives. Use eth_getFilterChanges to check for state changes.                                 |                                                                                                                                                                                                                                                                                |\n| eth_newFilter                           | Creates a filter object with the specified filter options (such as from block, to block, contract address, or topics).                                             |                                                                                                                                                                                                                                                                                |\n| eth_newPendingTransactionFilter         | Creates a filter in the node to notify when new pending transactions arrive. Use eth_getFilterChanges to check for state changes.                     |                                                                                                                                                                                                                                                                                |\n| eth_protocolVersion                     | Returns the current Ethereum protocol version.                                                                                                                     |                                                                                                                                                                                                                                                                                |\n| eth_sendRawTransaction                  | Creates a new message call transaction or a contract creation for signed transactions.                                                                             | Managed Blockchain supports raw transactions only. You must create and sign transactions before sending them. For more information, see How to create raw transactions in Ethereum.                                                                                            |\n| eth_subscribe                           | Experimental for publication subscription – Creates a subscription for specified events and returns a subscription ID.                                             | Available only when using WebSockets. Subscriptions are coupled to each connection. When the connection closes, the subscription is removed.                                                                                                                                   |\n| eth_syncing                             | Returns an object with sync status data or false when not syncing.                                                                                                 |                                                                                                                                                                                                                                                                                |\n| eth_uninstallFilter                     | Uninstalls the filter with the specified filter ID.                                                                                                                |                                                                                                                                                                                                                                                                                |\n| eth_unsubscribe                         | Experimental for publication subscription – Cancels the subscription with the specified subscription ID.                                                           |                                                                                                                                                                                                                                                                                |\n| net_listening                           | Returns true if the client is actively listening for network connections.                                                                                          |                                                                                                                                                                                                                                                                                |\n| net_peerCount                           | Returns the number of peers currently connected to the client.                                                                                                     |                                                                                                                                                                                                                                                                                |\n| net_version                             | Returns the current network ID.                                                                                                                                    |                                                                                                                                                                                                                                                                                |\n| txpool_inspect                          | Lists a textual summary of all transactions currently pending inclusion in the next blocks, and those that are queued (being scheduled for future execution only). |                                                                                                                                                                                                                                                                                |\n| txpool_status                           | Provides a count of all transactions currently pending inclusion in the next blocks, and those that are queued (being scheduled for future execution only).        |                                                                                                                                                                                                                                                                                |\n| web3_clientVersion                      | Returns the current client version.                                                                                                                                |                                                                                                                                                                                                                                                                                |\n| web3_sha3                               | Returns Keccak-256 (not the standardized SHA3-256) of the given data.                                                                                              |                                                                                                                                                                                                                                                                                |\n"
filetype = "PlainText"
[[input.files]]
title = "introduction"
url = "/docs/reference/wss/introduction"
contents = "Introduction\nBackbone's websocket endpoint provides support for Pub/Sub API as well as JSON-RPC filter support. The regular Ethereum\nAPI is also supported and documented in the 'examples' portion of 'Ethereum API'\nAll examples in this reference section uses WSCAT, but will work with any tool that supports websockets.\nSome tools you can use for making these requests\nWSCAT\nAdvanced Rest Client\nEXAMPLE\nThe following is an example showing a connection to the WebSockets endpoint and using subscriptions through web3.js 1.0\nNOTE: web3.js 1.0.0-beta.34 has an open issue with request headers. (https://github.com/ethereum/web3.js/issues/1559)\nUsers will have to revert to version 1.0.0-beta.33 to avoid the issue.\n"
filetype = "PlainText"
[[input.files]]
title = "mev-client"
url = "/docs/mev-client"
contents = "GreyPool\nstratumss:// \nTransaction Pool Feeds\nThis fork of Geth includes two new types of subscriptions, available through the\neth_subscribe method on Websockets.\nRejected Transactions\nUsing Websockets, you can subscribe to a feed of rejected transactions with:\nThis will immediately return a payload of the form:\nAnd as messages are rejected by the transaction pool, it will send additional\nmessages of the form:\nOne message will be emitted on this feed for every transaction rejected by the\ntransaction pool, excluding those rejected because they were already known by\nthe transaction pool.\nIt is important that consuming applications process messages quickly enough to\nkeep up with the process. Geth will buffer up to 20,000 messages, but if that\nthreshold is reached the subscription will be discarded by the server.\nThe reject reason corresponds to the error messages returned by Geth within the\ntxpool. At the time of this writing, these include:\ninvalid sender\nnonce too low\ntransaction underpriced\nreplacement transaction underpriced\ninsufficient funds for gas * price + value\nintrinsic gas too low\nexceeds block gas limit\nnegative value\noversized data\nHowever it is possible that in the future Geth may add new error types that\ncould be included by this response without modification to the rejection feed\nitself.\nDropped Transactions\nUsing Websockets, you can subscribe to a feed of dropped transaction hashes with:\nThis will immediately return a payload of the form:\nAnd as messages are dropped from the transaction pool, it will send additional\nmessages of the form:\nOne message will be emitted on this feed for every transaction dropped from the\ntransaction pool.\nIt is important that consuming applications process messages quickly enough to\nkeep up with the process. Geth will buffer up to 20,000 messages, but if that\nthreshold is reached the subscription will be discarded by the server.\nThe following reasons may be included as reasons transactions were rejected:\nunderpriced-txs: Indicates the transaction's gas price is below the node's threshold.\nlow-nonce-txs: Indicates that the account nonce for the sender of this transaction has exceeded the nonce on this transction. That may happen when this transaction is included in a block, or when a replacement transaction is included in a block.\nunpayable-txs: Indicates that the sender lacks sufficient funds to pay the intrinsic gas for this transaction\naccount-cap-txs: Indicates that this account has sent enough transactions to exceed the per-account limit on the node.\nreplaced-txs: Indicates that the transaction was dropped because a replacement transaction with the same nonce and higher gas has replaced it.\nunexecutable-txs: Indicates that a transaction is no longer considered executable. This typically applies to queued transaction, when a dependent pending transaction was removed for a reason such as unpayable-txs.\ntruncating-txs: The transaction was dropped because the number of transactions in the mempool exceeds the allowable limit.\nold-txs: The transaction was dropped because it has been in the mempool longer than the allowable period of time without inclusion in a block.\nupdated-gas-price: The node's minimum gas price was updated, and transactions below that price were dropped.\nMEV Clients\nFlashbots\n"
filetype = "PlainText"
[[input.files]]
title = "Basic Usage"
url = "/examples/basic"
contents = ""
filetype = "PlainText"
[[input.files]]
title = "Manifold Finance"
url = "/"
contents = "{\n// wrapped with {} to mark it as javascript so mdx will not put it under a p tag\n}\n{Manifold Finance}\n\nThis documentation covers strategies implemented by Manifold Finance.\nFor example, YCabal  is designed for leveraging Miner Extracted Value and market dynamics\nto benefit end users by reducing transactional cost through batching transactional orderflow.\nThis provides anefficient supplemental fee income for traders, without an opportunity cost, simply\nby using the underly service.\nTopics\nYCabal - MEV Strategy implementation details and integration\nManifold Governance - Proposals, Voting, and Governance overview\nFOLD Protocol - FOLD Token staking and strategy information\nMaidenlane - Documentation\nSupport and Helpdesk\nlink to support\nlink to helpdesk\nCommunity\nFeel free to join the discussions on our forums!\nCopyright 2021 - All Rights Reserved. CommodityStream, Inc.\n"
filetype = "PlainText"
[output]
filename = "/Users/sbacha/swr-site/public/index-en-US.st"
excerpts_per_result = 1
