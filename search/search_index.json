{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Omnibus \u00b6 Attention This aggregated documentation is under active development, some page may be incomplete. Please visit our forums or discord for specific questions! This documentation outlines the implementation of both the core and periphery protocols and applications that compromise the Manifold Finance stack . Sections: \u00b6 OpenMEV Manifold Strategies Associated Libraries/Development Staking and FOLD Registry OpenMEV \u00b6 Maximal (formerly Miner) Extractable Value (MEV) is the value that can be extracted from a blockchain by any agent without special permissions. Considering this permissionless nature, any agent with transaction ordering rights will be in a privileged position to perform the extraction. In Proof of Work blockchains, it is miners who determine transaction ordering within a block, hence the former \u201cminer\u201d term. In practice, bot operators seek to extract MEV. OpenMEV provides infrastructure and implementations of 'bot operators' for the purposes of capturing MEV. Total Addressable Market \u00b6 The first important point to make is that MEV is a theoretical quantity that we can only approach asymptotically. Unforeseen extraction methods can and will be devised (every new DeFi hack is an MEV extraction event). Hence, we will here focus instead on the Realized Extractable Value, notated REV, where REV\u2264MEV. In other words, REV is the actual value extracted from the blockchain from MEV Alejo Salles \u2013 Flashbots.net","title":"Index"},{"location":"#omnibus","text":"Attention This aggregated documentation is under active development, some page may be incomplete. Please visit our forums or discord for specific questions! This documentation outlines the implementation of both the core and periphery protocols and applications that compromise the Manifold Finance stack .","title":"Omnibus"},{"location":"#sections","text":"OpenMEV Manifold Strategies Associated Libraries/Development Staking and FOLD Registry","title":"Sections:"},{"location":"#openmev","text":"Maximal (formerly Miner) Extractable Value (MEV) is the value that can be extracted from a blockchain by any agent without special permissions. Considering this permissionless nature, any agent with transaction ordering rights will be in a privileged position to perform the extraction. In Proof of Work blockchains, it is miners who determine transaction ordering within a block, hence the former \u201cminer\u201d term. In practice, bot operators seek to extract MEV. OpenMEV provides infrastructure and implementations of 'bot operators' for the purposes of capturing MEV.","title":"OpenMEV"},{"location":"#total-addressable-market","text":"The first important point to make is that MEV is a theoretical quantity that we can only approach asymptotically. Unforeseen extraction methods can and will be devised (every new DeFi hack is an MEV extraction event). Hence, we will here focus instead on the Realized Extractable Value, notated REV, where REV\u2264MEV. In other words, REV is the actual value extracted from the blockchain from MEV Alejo Salles \u2013 Flashbots.net","title":"Total Addressable Market"},{"location":"api-txprice/","text":"api.txprice.com \u00b6 /api \u00b6 Usage \u00b6 curl -L api.txprice.com Returns a range of confidence intervals for gas prices needed to qualify a transaction for inclusion in the next block. Order of confidence intervals is subject to change. Response \u00b6 { \"system\": \"ethereum\", \"network\": \"main\", \"unit\": \"gwei\", \"maxPrice\": 123, \"currentBlockNumber\": 13005095, \"msSinceLastBlock\": 3793, \"blockPrices\": [ { \"blockNumber\": 13005096, \"baseFeePerGas\": 94.647990462, \"estimatedTransactionCount\": 137, \"estimatedPrices\": [ // json.blockPrices[0].estimatedPrices[0] { \"confidence\": 99, // json.blockPrices[0].estimatedPrices[0].confidence \"price\": 104, // json.blockPrices[0].estimatedPrices[0].price \"maxPriorityFeePerGas\": 9.86, // json.blockPrices[0].estimatedPrices[0].maxFeePerGas \"maxFeePerGas\": 199.16 // json.blockPrices[0].estimatedPrices[0].maxFeePerGas }, { \"confidence\": 95, \"price\": 99, \"maxPriorityFeePerGas\": 5.06, \"maxFeePerGas\": 194.35 }, { \"confidence\": 90, \"price\": 98, \"maxPriorityFeePerGas\": 4.16, \"maxFeePerGas\": 193.45 }, { \"confidence\": 80, \"price\": 97, \"maxPriorityFeePerGas\": 2.97, \"maxFeePerGas\": 192.27 }, { \"confidence\": 70, \"price\": 96, \"maxPriorityFeePerGas\": 1.74, \"maxFeePerGas\": 191.04 } ] } ] }","title":"API TxPrice.com"},{"location":"api-txprice/#apitxpricecom","text":"","title":"api.txprice.com"},{"location":"api-txprice/#api","text":"","title":"/api"},{"location":"api-txprice/#usage","text":"curl -L api.txprice.com Returns a range of confidence intervals for gas prices needed to qualify a transaction for inclusion in the next block. Order of confidence intervals is subject to change.","title":"Usage"},{"location":"api-txprice/#response","text":"{ \"system\": \"ethereum\", \"network\": \"main\", \"unit\": \"gwei\", \"maxPrice\": 123, \"currentBlockNumber\": 13005095, \"msSinceLastBlock\": 3793, \"blockPrices\": [ { \"blockNumber\": 13005096, \"baseFeePerGas\": 94.647990462, \"estimatedTransactionCount\": 137, \"estimatedPrices\": [ // json.blockPrices[0].estimatedPrices[0] { \"confidence\": 99, // json.blockPrices[0].estimatedPrices[0].confidence \"price\": 104, // json.blockPrices[0].estimatedPrices[0].price \"maxPriorityFeePerGas\": 9.86, // json.blockPrices[0].estimatedPrices[0].maxFeePerGas \"maxFeePerGas\": 199.16 // json.blockPrices[0].estimatedPrices[0].maxFeePerGas }, { \"confidence\": 95, \"price\": 99, \"maxPriorityFeePerGas\": 5.06, \"maxFeePerGas\": 194.35 }, { \"confidence\": 90, \"price\": 98, \"maxPriorityFeePerGas\": 4.16, \"maxFeePerGas\": 193.45 }, { \"confidence\": 80, \"price\": 97, \"maxPriorityFeePerGas\": 2.97, \"maxFeePerGas\": 192.27 }, { \"confidence\": 70, \"price\": 96, \"maxPriorityFeePerGas\": 1.74, \"maxFeePerGas\": 191.04 } ] } ] }","title":"Response"},{"location":"changelog/","text":"Changelog \u00b6 - \u00b6 -","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#-","text":"-","title":"-"},{"location":"dev-example/","text":"Technical Overview \u00b6 Specification \u00b6 transaction.proto \u00b6 transaction.proto message FrontierTransaction { string value = 1; // hex encoded big integer string input = 2; // hex bytes int64 nonce = 3; // string gasPrice = 4; // hex encoded big integer int64 gasLimit = 5; optional string v = 6; // hex encoded big integer optional string r = 7; // hex encoded big integer optional string s = 8; // hex encoded big integer optional string to = 9; // optional string chain_id = 10; // hex encoded big integer optional string sender = 11; } message AccessListEntry { string address = 1; repeated string storageKeys = 2; } message EIP2930Transaction { string chain_id = 1; // hex encoded big integer string value = 2; // hex encoded big integer string input = 3; // hex bytes int64 nonce = 4; // string gasPrice = 5; // hex encoded big integer int64 gasLimit = 6; repeated AccessListEntry accessList = 7; optional int32 v = 8; // byte value optional string r = 9; // hex encoded big integer optional string s = 10; // hex encoded big integer optional string to = 11; optional string sender = 12; } message EIP1559Transaction { string chain_id = 1; // hex encoded big integer string value = 2; // hex encoded big integer string input = 3; // hex bytes int64 nonce = 4; // string maxPriorityFeePerGas = 5; // hex encoded big integer string maxFeePerGas = 6; // hex encoded big integer int64 gasLimit = 7; repeated AccessListEntry accessList = 8; optional int32 v = 9; // byte value optional string r = 10; // hex encoded big integer optional string s = 11; // hex encoded big integer optional string to = 12; optional string sender = 13; } enum TransactionType { FRONTIER = 0; EIP2930 = 1; EIP1559 = 2; } message Transaction { TransactionType type = 1; optional string signed = 2; optional int64 deadline_at = 3; optional string transaction_hash = 16; optional int32 transaction_index = 17; optional string block_hash = 18; optional string block_number = 19; optional string gas_price = 20; optional TransactionReceipt receipt = 21; oneof payload { FrontierTransaction transaction_frontier = 22; EIP2930Transaction transaction_eip2930 = 23; EIP1559Transaction transaction_eip1559 = 24; } oneof action { org.openmev.protobuf.action.SwapExactTokensForTokens swap_exact_tokens_for_tokens = 33; org.openmev.protobuf.action.SwapTokensForExactTokens swap_tokens_for_exact_tokens = 34; org.openmev.protobuf.action.SwapExactETHForTokens swap_exact_eth_for_tokens = 35; org.openmev.protobuf.action.SwapTokensForExactETH swap_tokens_for_exact_ETH = 36; org.openmev.protobuf.action.SwapExactTokensForETH swap_exact_tokens_for_ETH = 37; org.openmev.protobuf.action.SwapETHForExactTokens swap_eth_for_exact_tokens = 38; org.openmev.protobuf.action.SwapExactTokensForTokensSupportingFeeOnTransferTokens swap_exact_tokens_for_tokens_supporting_fee_on_transfer_tokens = 39; org.openmev.protobuf.action.SwapExactETHForTokensSupportingFeeOnTransferTokens swap_exact_eth_for_tokens_supporting_fee_on_transfer_tokens = 40; org.openmev.protobuf.action.SwapExactTokensForETHSupportingFeeOnTransferTokens swap_exact_tokens_for_eth_supporting_fee_on_transfer_tokens = 41; } } The arbitrage profit generated by second order is sent to the msg.sender of the first order. The first order will still lose 5%(assumption) in slippage. Arbitrage profits will rarely be more than the slippage loss. If someone front runs the transaction sent by the Cabal: They pay for the gas while post confirmation of transaction the fees for order1 goes to the relayer in the signed order. They lose 5% in slippage as our real user does. Transaction Engine \u00b6 The OpenMEV Engine uses a batch auction-based matching engine to execute orders. Batch auctions were chosen to reduce the impact of frontrunning on the exchange. All orders for the given market are collected. Orders beyond their time-in-force are canceled. Orders are placed into separate lists by market side, and aggregate supply and demand curves are calculated. The matching engine discovers the price at which the aggregate supply and demand curves cross, which yields the clearing price. If there is a horizontal cross - i.e., two prices for which aggregate supply and demand are equal - then the clearing price is the midpoint between the two prices. If both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then the side with higher volume is rationed pro-rata based on how much its volume exceeds the other side. For example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%. Orders are sorted based on their price, and order ID. Order IDs are generated at post time and is the only part of the matching engine that is time-dependent. However, the oldest order IDs are matched first so there is no incentive to post an order ahead of someone else\u2019s. Endpoints v1 \u00b6 POST \u00b6 /v1/quote A user can get a quote based on the current market conditions and potentially the other transactions that are queued. The only reason for this to be on the backend is if we find value in quoting based on the other transactions in the queue. Details of this quote calculation formula need to be researched. POST \u00b6 /v1/transact A user submits their transaction call after signing it. This is an asynchronous request that will insert the swap transaction in a queue. The call returns a TransactionId. The user can then listen for the result of their transaction via the websocket feed which will report all completed and failed transactions. Sequencing \u00b6 On any additions to the queue, the server runs a sequencing algorithm to optimize MEV, then decides if it is time to submit the transactions to a miner for the current block. Garbage collection will have to be run on the queues periodically to remove transactions that are not going to be successful due to timeout or slippage. On successful and failed (garbage collected) transactions, the backend will send WebSocket messages to the frontend to notify users. Gwei Service \u00b6 The Gwei Service is an important part of the overall system. Since Gwei pricing is the most important portion of the overall system efficacy it is decoupled from the application itself and run in a separate stack entirely. We inject the Gwei pricing service by loading at runtime via startGasWorker() . note we use the term GasWorker to draw a distinction between gwei and gas . Whereas gwei is understood as a specific SI unit, gas is more abstract. Gas Pricing Service \u00b6 Note : EIP1559 Gas Pricing Compatible For accurate pricing, we trim off the lowest price with the fastest time and highest price with the slowest times until 80% of the data is represented; these are outliers . See the API Service here: https://api.txprice.com /** * * @summary filters transactions from blocks * @note transaction wait duration and gas price taken into consideration */ blocks . forEach (( block ) => { block . transactions . forEach (( tx ) => { const price = parseFloat ( ethers . utils . formatUnits ( tx . gasPrice , \"gwei\" )); const duration = tx . waitDuration ; /** * * @summary Purge anything that takes over 5 minutes * @param duration * @type {seconds} * @exports TransactionTimeDuration */ if ( duration > ( 60 * 60 )) { return ; } if ( duration < ( 1 * 60 )) { data . fast . push ( price ); } else if ( duration < ( 5 * 60 )) { data . medium . push ( price ); } else { data . slow . push ( price ); } Transaction Details \u00b6 /** * Add the transaction details * @const diff * @param waitDuration * @param dataLength * @param gasLimit * @param value */ const diff = timestamp - seenTime ; txs . push ({ w : diff , // waitDuration, not a delta but difference d : ethers . utils . hexDataLength ( tx . data ), // dataLength l : tx . gasLimit . toString (), // gasLimit p : ethers . utils . formatUnits ( tx . gasPrice , 'gwei' ), // gasPrice v : ethers . utils . formatUnits ( tx . value ), // value }); Canary Scanning \u00b6 Failsafe guard // Canary scanning (check every second) // If we go too long without a ne block or a new transaction, it indicates the // underlying connection to a backend has probably disconnected. setInterval (() => { const delta = getTime () - canaryTimer ; if ( delta > MAX_DISCONNECT ) { console . log ( `Canary: forcing restart...` ); process . exit (); } }, 1000 ). unref (); How to subscribe to gas price changes import { Container } from 'typedi' ; import EventConstants from '@constants/events' ; import EventEmitter from 'events' ; const { GAS_CHANGE } = EventConstants ; const events : EventEmitter = Container . get ( 'eventEmitter' ); events . on ( GAS_CHANGE , ( newGasPrice ) => {});","title":"Specification"},{"location":"dev-example/#technical-overview","text":"","title":"Technical Overview"},{"location":"dev-example/#specification","text":"","title":"Specification"},{"location":"dev-example/#transactionproto","text":"transaction.proto message FrontierTransaction { string value = 1; // hex encoded big integer string input = 2; // hex bytes int64 nonce = 3; // string gasPrice = 4; // hex encoded big integer int64 gasLimit = 5; optional string v = 6; // hex encoded big integer optional string r = 7; // hex encoded big integer optional string s = 8; // hex encoded big integer optional string to = 9; // optional string chain_id = 10; // hex encoded big integer optional string sender = 11; } message AccessListEntry { string address = 1; repeated string storageKeys = 2; } message EIP2930Transaction { string chain_id = 1; // hex encoded big integer string value = 2; // hex encoded big integer string input = 3; // hex bytes int64 nonce = 4; // string gasPrice = 5; // hex encoded big integer int64 gasLimit = 6; repeated AccessListEntry accessList = 7; optional int32 v = 8; // byte value optional string r = 9; // hex encoded big integer optional string s = 10; // hex encoded big integer optional string to = 11; optional string sender = 12; } message EIP1559Transaction { string chain_id = 1; // hex encoded big integer string value = 2; // hex encoded big integer string input = 3; // hex bytes int64 nonce = 4; // string maxPriorityFeePerGas = 5; // hex encoded big integer string maxFeePerGas = 6; // hex encoded big integer int64 gasLimit = 7; repeated AccessListEntry accessList = 8; optional int32 v = 9; // byte value optional string r = 10; // hex encoded big integer optional string s = 11; // hex encoded big integer optional string to = 12; optional string sender = 13; } enum TransactionType { FRONTIER = 0; EIP2930 = 1; EIP1559 = 2; } message Transaction { TransactionType type = 1; optional string signed = 2; optional int64 deadline_at = 3; optional string transaction_hash = 16; optional int32 transaction_index = 17; optional string block_hash = 18; optional string block_number = 19; optional string gas_price = 20; optional TransactionReceipt receipt = 21; oneof payload { FrontierTransaction transaction_frontier = 22; EIP2930Transaction transaction_eip2930 = 23; EIP1559Transaction transaction_eip1559 = 24; } oneof action { org.openmev.protobuf.action.SwapExactTokensForTokens swap_exact_tokens_for_tokens = 33; org.openmev.protobuf.action.SwapTokensForExactTokens swap_tokens_for_exact_tokens = 34; org.openmev.protobuf.action.SwapExactETHForTokens swap_exact_eth_for_tokens = 35; org.openmev.protobuf.action.SwapTokensForExactETH swap_tokens_for_exact_ETH = 36; org.openmev.protobuf.action.SwapExactTokensForETH swap_exact_tokens_for_ETH = 37; org.openmev.protobuf.action.SwapETHForExactTokens swap_eth_for_exact_tokens = 38; org.openmev.protobuf.action.SwapExactTokensForTokensSupportingFeeOnTransferTokens swap_exact_tokens_for_tokens_supporting_fee_on_transfer_tokens = 39; org.openmev.protobuf.action.SwapExactETHForTokensSupportingFeeOnTransferTokens swap_exact_eth_for_tokens_supporting_fee_on_transfer_tokens = 40; org.openmev.protobuf.action.SwapExactTokensForETHSupportingFeeOnTransferTokens swap_exact_tokens_for_eth_supporting_fee_on_transfer_tokens = 41; } } The arbitrage profit generated by second order is sent to the msg.sender of the first order. The first order will still lose 5%(assumption) in slippage. Arbitrage profits will rarely be more than the slippage loss. If someone front runs the transaction sent by the Cabal: They pay for the gas while post confirmation of transaction the fees for order1 goes to the relayer in the signed order. They lose 5% in slippage as our real user does.","title":"transaction.proto"},{"location":"dev-example/#transaction-engine","text":"The OpenMEV Engine uses a batch auction-based matching engine to execute orders. Batch auctions were chosen to reduce the impact of frontrunning on the exchange. All orders for the given market are collected. Orders beyond their time-in-force are canceled. Orders are placed into separate lists by market side, and aggregate supply and demand curves are calculated. The matching engine discovers the price at which the aggregate supply and demand curves cross, which yields the clearing price. If there is a horizontal cross - i.e., two prices for which aggregate supply and demand are equal - then the clearing price is the midpoint between the two prices. If both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then the side with higher volume is rationed pro-rata based on how much its volume exceeds the other side. For example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%. Orders are sorted based on their price, and order ID. Order IDs are generated at post time and is the only part of the matching engine that is time-dependent. However, the oldest order IDs are matched first so there is no incentive to post an order ahead of someone else\u2019s.","title":"Transaction Engine"},{"location":"dev-example/#endpoints-v1","text":"","title":"Endpoints v1"},{"location":"dev-example/#post","text":"/v1/quote A user can get a quote based on the current market conditions and potentially the other transactions that are queued. The only reason for this to be on the backend is if we find value in quoting based on the other transactions in the queue. Details of this quote calculation formula need to be researched.","title":"POST"},{"location":"dev-example/#post_1","text":"/v1/transact A user submits their transaction call after signing it. This is an asynchronous request that will insert the swap transaction in a queue. The call returns a TransactionId. The user can then listen for the result of their transaction via the websocket feed which will report all completed and failed transactions.","title":"POST"},{"location":"dev-example/#sequencing","text":"On any additions to the queue, the server runs a sequencing algorithm to optimize MEV, then decides if it is time to submit the transactions to a miner for the current block. Garbage collection will have to be run on the queues periodically to remove transactions that are not going to be successful due to timeout or slippage. On successful and failed (garbage collected) transactions, the backend will send WebSocket messages to the frontend to notify users.","title":"Sequencing"},{"location":"dev-example/#gwei-service","text":"The Gwei Service is an important part of the overall system. Since Gwei pricing is the most important portion of the overall system efficacy it is decoupled from the application itself and run in a separate stack entirely. We inject the Gwei pricing service by loading at runtime via startGasWorker() . note we use the term GasWorker to draw a distinction between gwei and gas . Whereas gwei is understood as a specific SI unit, gas is more abstract.","title":"Gwei Service"},{"location":"dev-example/#gas-pricing-service","text":"Note : EIP1559 Gas Pricing Compatible For accurate pricing, we trim off the lowest price with the fastest time and highest price with the slowest times until 80% of the data is represented; these are outliers . See the API Service here: https://api.txprice.com /** * * @summary filters transactions from blocks * @note transaction wait duration and gas price taken into consideration */ blocks . forEach (( block ) => { block . transactions . forEach (( tx ) => { const price = parseFloat ( ethers . utils . formatUnits ( tx . gasPrice , \"gwei\" )); const duration = tx . waitDuration ; /** * * @summary Purge anything that takes over 5 minutes * @param duration * @type {seconds} * @exports TransactionTimeDuration */ if ( duration > ( 60 * 60 )) { return ; } if ( duration < ( 1 * 60 )) { data . fast . push ( price ); } else if ( duration < ( 5 * 60 )) { data . medium . push ( price ); } else { data . slow . push ( price ); }","title":"Gas Pricing Service"},{"location":"dev-example/#transaction-details","text":"/** * Add the transaction details * @const diff * @param waitDuration * @param dataLength * @param gasLimit * @param value */ const diff = timestamp - seenTime ; txs . push ({ w : diff , // waitDuration, not a delta but difference d : ethers . utils . hexDataLength ( tx . data ), // dataLength l : tx . gasLimit . toString (), // gasLimit p : ethers . utils . formatUnits ( tx . gasPrice , 'gwei' ), // gasPrice v : ethers . utils . formatUnits ( tx . value ), // value });","title":"Transaction Details"},{"location":"dev-example/#canary-scanning","text":"Failsafe guard // Canary scanning (check every second) // If we go too long without a ne block or a new transaction, it indicates the // underlying connection to a backend has probably disconnected. setInterval (() => { const delta = getTime () - canaryTimer ; if ( delta > MAX_DISCONNECT ) { console . log ( `Canary: forcing restart...` ); process . exit (); } }, 1000 ). unref (); How to subscribe to gas price changes import { Container } from 'typedi' ; import EventConstants from '@constants/events' ; import EventEmitter from 'events' ; const { GAS_CHANGE } = EventConstants ; const events : EventEmitter = Container . get ( 'eventEmitter' ); events . on ( GAS_CHANGE , ( newGasPrice ) => {});","title":"Canary Scanning"},{"location":"formulas/","text":"Formulas and Calculations \u00b6 Formulas and Calculations Rebate Calculations Transaction Parameters MEV Bundle pricing formula Explanation Appendix Transactions Appendix Rebate Calculations \u00b6 Note : naive implementation, expect changes bundleCost = mev bribe + bundleTxs[1,2,...] gasAllowance = mev bribe - bundleTxs[1,2,...] BundleTransactionGas[1,2,...] = Individual Gas Cost BundleId = The Block Number (or hash?) in which the bundle was included max_gasRebate = (BundleId(BundleTransactionGas[1,2,...])) Transaction Parameters \u00b6 targetBlockNumber : block number at which this bundle is valid minTimestamp : minimum timestamp at which this bundle is valid (inclusive) maxTimestamp : maximum timestamp at which this bundle is valid (inclusive) MEV Bundle pricing formula \u00b6 Our costs for bundling transactions for MEV are as follows: Formula for calculating the pricing of a bundle (flashbots): \\[s_{v0.2} = \\frac{\\Delta_{coinbase} + \\sum_{T\\in U}g_Tp_T - \\sum_{T\\in M \\cap U}g_Tp_T}{\\sum_{T\\in U}g_T}\\] \\(s\\) : bundle \\(U\\) score used to sort bundles. \\(U\\) : ordered list of transactions \\(T\\) in a bundle. \\(M\\) : set of transactions \\(T\\) in the mempool. \\(g_{T}\\) : gas used by transaction \\(T\\) . \\(p_{T}\\) : gas price of transaction \\(T\\) . \\(\\Delta_{coinbase}\\) : coinbase difference from direct payment. Explanation \u00b6 This formula derives the effective gas price of the bundle by summing up all payments to coinbase as well as gas fees except for the gas fees of transactions that have been seen in the mempool. The gas fees of mempool transactions are deducted to prevent \"stuffing\" bundles with high gas price transactions from the mempool to inflate the effective gas price. Appendix \u00b6 Expected Execution Price \\((( E [P])\\) When a liquidity taker issues a trade on \\(X / Y,\\) the taker wishes to execute the trade with the expected execution price \\(E [P]\\) (based on the AMM algorithm and \\(X / Y\\) state), given the expected slippage. Execution Price \\((P):\\) During the time difference between a liquidity taker issuing a transaction, and the transaction being executed (e.g. mined in a block), the state of the AMM market \\(X / Y\\) may change. This state change may induce unexpected slippage resulting in an execution price \\(P \\neq E [P]\\) . Atomic arbitrage profit (aarb) : is defined as the gain of two atomically executed arbitrage trades \\(TA\\) and \\(TB\\) on exchange \\(A\\) and \\(B\\) . Non-atomic arbitrage profit (naarb) : is defined as the arbitrage gain, if \\(TA\\) executes first, and \\(TB\\) \u2019s execution follows after \\(i\\) intermediary transactions. Holding value ( \\(Hv\\) ) : is defined as the change in the averaged price of the given asset pair on the two exchanges, which represents the asset value change during the non-atomic execution period. Borrowing Capacity ( \\(Bc\\) ) : Refers to the total value that a borrower is allowed to request from a lending pool, given its collateral amount. For each collateral asset \ud835\udc56 of a borrower, its borrowing capacity is defined in Equation 3. \\[ Bc =\u2211\ufe01 \ud835\udc49 \ud835\udc4e\ud835\udc59\ud835\udc62\ud835\udc52 \ud835\udc5c\ud835\udc53 \ud835\udc36\ud835\udc5c\ud835\udc59\ud835\udc59\ud835\udc4e\ud835\udc61\ud835\udc52\ud835\udc5fal \u00d7 LT\ud835\udc56 \\] Health Factor ( \\(Hhf\\) ) : The health factor measures the collateralization status of a position, defined as the ratio of the borrowing capacity over the outstanding debts (cf. Equation 4). \\[ Hhf = BC / \u2211\ufe01 \ud835\udc49\ud835\udc4e\ud835\udc59\ud835\udc62\ud835\udc52 \ud835\udc5c\ud835\udc53 \ud835\udc37\ud835\udc52\ud835\udc4f\ud835\udc61t \\] MVI : Mininumal Profitable Viable Input **Unexpected Price Slippage ** \\((P- E [P]):\\) is the difference between \\(P\\) and \\(E [P]\\) . Unexpected Slippage Rate \\(\\left(\\frac{P- E [P]}{ E [P]}\\right):\\) is \\(\\quad\\) the unexpected slippage over the expected price. Expected Execution Price : \\(E [P]\\) When a liquidity taker issues a trade on \\(X / Y,\\) the taker wishes to execute the trade with the expected execution price \\(E [P]\\) (based on the AMM algorithm and \\(X / Y\\) state), given the expected slippage. Execution Price : \\(P\\) During the time difference between a liquidity taker issuing a transaction, and the transaction being executed (e.g. mined in a block), the state of the AMM market \\(X / Y\\) may change. This state change may induce unexpected slippage resulting in an execution price \\(P \\neq E [P]\\) . Unexpected Price Slippage : \\(P- E [P]\\) is the difference between \\(P\\) and \\(E [P]\\) . Unexpected Slippage Rate \\(\\left(\\frac{P- E [P]}{ E [P]}\\right)\\) is \\(\\quad\\) the unexpected slippage over the expected price. Transactions Appendix \u00b6 Status Description QUEUED The default state when initially creating a transaction during the initial API call. This indicates that this transaction is waiting to be picked up by a background worker. PROCESSING A background worker has started to process this transaction. FUNDING An auxiliary funding transaction is being initiated (this only applies to non-Ether transactions). FUNDED An auxiliary funding transaction was successful (this only applies to non-Ether transactions). BROADCASTING The transaction is being announced to the blockchain network nodes. BROADCASTED The transaction was successfully announced to the blockchain network nodes. PENDING The transaction is \"pending\" / \"in the mempool\", i.e. known to (some) blockchain network nodes, and awaiting inclusion/mining into a block. CONFIRMING The transaction was mined into a block, but not enough subsequent blocks have yet been mined to consider that transaction \"safe\" / confirmed. CONFIRMED The transaction was mined into a block and enough subsequent blocks have been mined to consider that transaction \"safe\" / confirmed. FAILED The transaction was mined into a block, but the execution of its smart contract code failed. Several reasons are possible, most notably \"out of gas\". The transaction is still included in a block because its gas is still awarded to the miner who attempted to execute it. REJECTED The transaction was mined into a block but was rejected during the execution of its smart contract code. Several reasons are possible, most notably Solidity's require() assertions not being satisfied. The transaction is still included in a block because it's gas is still awarded to the miner who attempted to execute it. UNPROCESSABLE An unrecoverable error occurred which prevents us from getting this transaction onto the blockchain. We have given up (or the customer requested us not to retry). RETRYING A temporary/recoverable error occurred, and this transaction was re-queued as to try getting this transaction onto the blockchain at a later time. This state is more or less equivalent to QUEUED, but its name is more telling.","title":"Formulas and Calculations"},{"location":"formulas/#formulas-and-calculations","text":"Formulas and Calculations Rebate Calculations Transaction Parameters MEV Bundle pricing formula Explanation Appendix Transactions Appendix","title":"Formulas and Calculations"},{"location":"formulas/#rebate-calculations","text":"Note : naive implementation, expect changes bundleCost = mev bribe + bundleTxs[1,2,...] gasAllowance = mev bribe - bundleTxs[1,2,...] BundleTransactionGas[1,2,...] = Individual Gas Cost BundleId = The Block Number (or hash?) in which the bundle was included max_gasRebate = (BundleId(BundleTransactionGas[1,2,...]))","title":"Rebate Calculations"},{"location":"formulas/#transaction-parameters","text":"targetBlockNumber : block number at which this bundle is valid minTimestamp : minimum timestamp at which this bundle is valid (inclusive) maxTimestamp : maximum timestamp at which this bundle is valid (inclusive)","title":"Transaction Parameters"},{"location":"formulas/#mev-bundle-pricing-formula","text":"Our costs for bundling transactions for MEV are as follows: Formula for calculating the pricing of a bundle (flashbots): \\[s_{v0.2} = \\frac{\\Delta_{coinbase} + \\sum_{T\\in U}g_Tp_T - \\sum_{T\\in M \\cap U}g_Tp_T}{\\sum_{T\\in U}g_T}\\] \\(s\\) : bundle \\(U\\) score used to sort bundles. \\(U\\) : ordered list of transactions \\(T\\) in a bundle. \\(M\\) : set of transactions \\(T\\) in the mempool. \\(g_{T}\\) : gas used by transaction \\(T\\) . \\(p_{T}\\) : gas price of transaction \\(T\\) . \\(\\Delta_{coinbase}\\) : coinbase difference from direct payment.","title":"MEV Bundle pricing formula"},{"location":"formulas/#explanation","text":"This formula derives the effective gas price of the bundle by summing up all payments to coinbase as well as gas fees except for the gas fees of transactions that have been seen in the mempool. The gas fees of mempool transactions are deducted to prevent \"stuffing\" bundles with high gas price transactions from the mempool to inflate the effective gas price.","title":"Explanation"},{"location":"formulas/#appendix","text":"Expected Execution Price \\((( E [P])\\) When a liquidity taker issues a trade on \\(X / Y,\\) the taker wishes to execute the trade with the expected execution price \\(E [P]\\) (based on the AMM algorithm and \\(X / Y\\) state), given the expected slippage. Execution Price \\((P):\\) During the time difference between a liquidity taker issuing a transaction, and the transaction being executed (e.g. mined in a block), the state of the AMM market \\(X / Y\\) may change. This state change may induce unexpected slippage resulting in an execution price \\(P \\neq E [P]\\) . Atomic arbitrage profit (aarb) : is defined as the gain of two atomically executed arbitrage trades \\(TA\\) and \\(TB\\) on exchange \\(A\\) and \\(B\\) . Non-atomic arbitrage profit (naarb) : is defined as the arbitrage gain, if \\(TA\\) executes first, and \\(TB\\) \u2019s execution follows after \\(i\\) intermediary transactions. Holding value ( \\(Hv\\) ) : is defined as the change in the averaged price of the given asset pair on the two exchanges, which represents the asset value change during the non-atomic execution period. Borrowing Capacity ( \\(Bc\\) ) : Refers to the total value that a borrower is allowed to request from a lending pool, given its collateral amount. For each collateral asset \ud835\udc56 of a borrower, its borrowing capacity is defined in Equation 3. \\[ Bc =\u2211\ufe01 \ud835\udc49 \ud835\udc4e\ud835\udc59\ud835\udc62\ud835\udc52 \ud835\udc5c\ud835\udc53 \ud835\udc36\ud835\udc5c\ud835\udc59\ud835\udc59\ud835\udc4e\ud835\udc61\ud835\udc52\ud835\udc5fal \u00d7 LT\ud835\udc56 \\] Health Factor ( \\(Hhf\\) ) : The health factor measures the collateralization status of a position, defined as the ratio of the borrowing capacity over the outstanding debts (cf. Equation 4). \\[ Hhf = BC / \u2211\ufe01 \ud835\udc49\ud835\udc4e\ud835\udc59\ud835\udc62\ud835\udc52 \ud835\udc5c\ud835\udc53 \ud835\udc37\ud835\udc52\ud835\udc4f\ud835\udc61t \\] MVI : Mininumal Profitable Viable Input **Unexpected Price Slippage ** \\((P- E [P]):\\) is the difference between \\(P\\) and \\(E [P]\\) . Unexpected Slippage Rate \\(\\left(\\frac{P- E [P]}{ E [P]}\\right):\\) is \\(\\quad\\) the unexpected slippage over the expected price. Expected Execution Price : \\(E [P]\\) When a liquidity taker issues a trade on \\(X / Y,\\) the taker wishes to execute the trade with the expected execution price \\(E [P]\\) (based on the AMM algorithm and \\(X / Y\\) state), given the expected slippage. Execution Price : \\(P\\) During the time difference between a liquidity taker issuing a transaction, and the transaction being executed (e.g. mined in a block), the state of the AMM market \\(X / Y\\) may change. This state change may induce unexpected slippage resulting in an execution price \\(P \\neq E [P]\\) . Unexpected Price Slippage : \\(P- E [P]\\) is the difference between \\(P\\) and \\(E [P]\\) . Unexpected Slippage Rate \\(\\left(\\frac{P- E [P]}{ E [P]}\\right)\\) is \\(\\quad\\) the unexpected slippage over the expected price.","title":"Appendix"},{"location":"formulas/#transactions-appendix","text":"Status Description QUEUED The default state when initially creating a transaction during the initial API call. This indicates that this transaction is waiting to be picked up by a background worker. PROCESSING A background worker has started to process this transaction. FUNDING An auxiliary funding transaction is being initiated (this only applies to non-Ether transactions). FUNDED An auxiliary funding transaction was successful (this only applies to non-Ether transactions). BROADCASTING The transaction is being announced to the blockchain network nodes. BROADCASTED The transaction was successfully announced to the blockchain network nodes. PENDING The transaction is \"pending\" / \"in the mempool\", i.e. known to (some) blockchain network nodes, and awaiting inclusion/mining into a block. CONFIRMING The transaction was mined into a block, but not enough subsequent blocks have yet been mined to consider that transaction \"safe\" / confirmed. CONFIRMED The transaction was mined into a block and enough subsequent blocks have been mined to consider that transaction \"safe\" / confirmed. FAILED The transaction was mined into a block, but the execution of its smart contract code failed. Several reasons are possible, most notably \"out of gas\". The transaction is still included in a block because its gas is still awarded to the miner who attempted to execute it. REJECTED The transaction was mined into a block but was rejected during the execution of its smart contract code. Several reasons are possible, most notably Solidity's require() assertions not being satisfied. The transaction is still included in a block because it's gas is still awarded to the miner who attempted to execute it. UNPROCESSABLE An unrecoverable error occurred which prevents us from getting this transaction onto the blockchain. We have given up (or the customer requested us not to retry). RETRYING A temporary/recoverable error occurred, and this transaction was re-queued as to try getting this transaction onto the blockchain at a later time. This state is more or less equivalent to QUEUED, but its name is more telling.","title":"Transactions Appendix"},{"location":"limit_order_books/","text":"Limit Order Books \u00b6 Exchanges \u00b6 Most electronic Exchanges use LOBs to match orders placed by buyers and sellers. LOBs have entered the mainstream in recent years with the popularisation of Cryptocurrency Exchanges. Understanding how a LOB works is essential for understanding the market-data published by these Exchanges. An Exchange is a place where traders come together to exchange goods or services. Sellers offer their goods or services to buyers that bid for them. The Exchange accepts bids and offers in the form of orders and attempts to match them: bids are submitted as buy orders; offers are submitted as sell orders. Exchanges are also known as \"venues\", although Exchanges are not the only kind of trading venue. Level 2 Order Books \u00b6 The \"liquidity\" available in the LOB can be viewed in multiple ways. In this article, we present the liquidity in the LOB as a stack of \"price levels\", where each price level comprises one or more orders with the same price and side. This representation is known as a level 2 order book aggregated by price. Consider the following LOB with two price levels: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 1 9649 2 9651 1 2 5 9648 5 9653 3 For each given price level: the quantity is the sum of all order quantities at that level; the \"spread\" is the difference between the bid and offer price. The first level, or Top Of Book (TOB), shows the best bid and offer available in the order book: the bids are arranged in descending order with the best bid at the top; the offers are arranged in ascending order with the best offer at the top. Limit Orders \u00b6 The LOB gets its name from a standard order type known as a \"limit\" order; a LOB is essentially a book of limit orders. The price on a limit order is known as the limit price. The limit price specifies the worst price at which the trader is willing to trade (highest for bids and lowest for offers). This article deals exclusively with limit orders, so the limit price is subsequently referred to simply as the price. Resting Orders \u00b6 A trade happens when a buy or sell order is matched with one or more pre-existing orders in the LOB. How an order behaves when it is not immediately filled varies between order types. Limit orders may also specify how long they are \"good for\". If a limit order is good for a period of time, and it is not immediately filled, then it is placed in the LOB according to its side (buy or sell) and price. An unmatched limit order that is live or \"working\" in the LOB is known as a \"resting\" order. Order types that cannot rest in the order book are either immediately filled or cancelled. The short-hand notation below will be used in proceeding examples to describe a limit order: BUY 2 @9650 : a buy order where 2 is the order quantity and 9650 is the price. If this limit order is applied to our earlier example, then it will rest at the TOB on the bid side, because its price is better than the current TOB: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 2 9650 1 9651 1 2 1 9649 4 9653 3 3 5 9648 Similarly, a limit order to \"SELL 3 @9653 \" will \"join\" the second level on the offer side: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 2 9650 1 9651 1 2 1 9649 4 9653 6 3 5 9648 Note that the number of orders at each price level cannot be derived from the aggregate quantity. The order count is often shown as a separate \"count\" field. Order Matching \u00b6 In a classic LOB, Matching happens by price/time priority. This means that orders are matched first by price, and then by time (order age). If multiple orders exist at the same price level, for example, then the oldest order will be matched first. Consider the effect of a limit order to \"BUY 2 @9652 \" that crosses the spread: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 1 9652 2 9653 6 2 2 9650 3 1 9649 4 5 9648 In this example, the limit order to \"BUY 2 @9652 \" crossed with the first level on the offer side (\"OFFER 1 @9651 \"). The price on the order was higher than the level it crossed, so the resulting trade will have an improved price of 9651. The limit order was not completely filled, because there was insufficient quantity on the offer side. And assuming this order is good for some time, any quantity remaining after the matching phase is complete will rest on the bid side, hence the new price level on the bid side at TOB. Orders that cross the spread and \"take\" liquidity from the order book are known as an \"aggressive\" orders. By contrast, orders that do not cross the spread are known as \"passive\" orders. Aggressive orders may \"sweep\" through multiple price levels, as demonstrated in the following example, where an aggressive order to \"SELL 4 @9649 \" sweeps through the top three levels of the bid side: Level Bid Qty Bid Price Spread Offer Price Offer Qty 4 5 9648 5 9653 6 This aggressive order will result in the following trades: 1 @9652 2 @9650 1 @9649 Makers and Takers \u00b6 Traders that submit aggressive orders are known as \"takers\". Traders that submit passive orders are known as \"makers\". Market-makers play an important role in providing liquidity to the market, because, under normal market conditions, they are willing to quote two-way prices on a continual basis, thus ensuring that there is always a maker available to take the opposing side of a taker's trade. Each trade transaction comprises two matched orders. These orders can be classified both in terms of a buyer and a seller or a maker and a taker. To avoid confusion, trades are often referred to from the taker's perspective as \"paid\" or \"given\": Paid: taker bought or \"lifted the offer\". Given: taker sold or \"hit the bid\". This terminology is particular relevant for public trade feeds, where an Exchange may publicise anonymised trade information from the taker's perspective.","title":"Limit Order Book"},{"location":"limit_order_books/#limit-order-books","text":"","title":"Limit Order Books"},{"location":"limit_order_books/#exchanges","text":"Most electronic Exchanges use LOBs to match orders placed by buyers and sellers. LOBs have entered the mainstream in recent years with the popularisation of Cryptocurrency Exchanges. Understanding how a LOB works is essential for understanding the market-data published by these Exchanges. An Exchange is a place where traders come together to exchange goods or services. Sellers offer their goods or services to buyers that bid for them. The Exchange accepts bids and offers in the form of orders and attempts to match them: bids are submitted as buy orders; offers are submitted as sell orders. Exchanges are also known as \"venues\", although Exchanges are not the only kind of trading venue.","title":"Exchanges"},{"location":"limit_order_books/#level-2-order-books","text":"The \"liquidity\" available in the LOB can be viewed in multiple ways. In this article, we present the liquidity in the LOB as a stack of \"price levels\", where each price level comprises one or more orders with the same price and side. This representation is known as a level 2 order book aggregated by price. Consider the following LOB with two price levels: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 1 9649 2 9651 1 2 5 9648 5 9653 3 For each given price level: the quantity is the sum of all order quantities at that level; the \"spread\" is the difference between the bid and offer price. The first level, or Top Of Book (TOB), shows the best bid and offer available in the order book: the bids are arranged in descending order with the best bid at the top; the offers are arranged in ascending order with the best offer at the top.","title":"Level 2 Order Books"},{"location":"limit_order_books/#limit-orders","text":"The LOB gets its name from a standard order type known as a \"limit\" order; a LOB is essentially a book of limit orders. The price on a limit order is known as the limit price. The limit price specifies the worst price at which the trader is willing to trade (highest for bids and lowest for offers). This article deals exclusively with limit orders, so the limit price is subsequently referred to simply as the price.","title":"Limit Orders"},{"location":"limit_order_books/#resting-orders","text":"A trade happens when a buy or sell order is matched with one or more pre-existing orders in the LOB. How an order behaves when it is not immediately filled varies between order types. Limit orders may also specify how long they are \"good for\". If a limit order is good for a period of time, and it is not immediately filled, then it is placed in the LOB according to its side (buy or sell) and price. An unmatched limit order that is live or \"working\" in the LOB is known as a \"resting\" order. Order types that cannot rest in the order book are either immediately filled or cancelled. The short-hand notation below will be used in proceeding examples to describe a limit order: BUY 2 @9650 : a buy order where 2 is the order quantity and 9650 is the price. If this limit order is applied to our earlier example, then it will rest at the TOB on the bid side, because its price is better than the current TOB: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 2 9650 1 9651 1 2 1 9649 4 9653 3 3 5 9648 Similarly, a limit order to \"SELL 3 @9653 \" will \"join\" the second level on the offer side: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 2 9650 1 9651 1 2 1 9649 4 9653 6 3 5 9648 Note that the number of orders at each price level cannot be derived from the aggregate quantity. The order count is often shown as a separate \"count\" field.","title":"Resting Orders"},{"location":"limit_order_books/#order-matching","text":"In a classic LOB, Matching happens by price/time priority. This means that orders are matched first by price, and then by time (order age). If multiple orders exist at the same price level, for example, then the oldest order will be matched first. Consider the effect of a limit order to \"BUY 2 @9652 \" that crosses the spread: Level Bid Qty Bid Price Spread Offer Price Offer Qty 1 1 9652 2 9653 6 2 2 9650 3 1 9649 4 5 9648 In this example, the limit order to \"BUY 2 @9652 \" crossed with the first level on the offer side (\"OFFER 1 @9651 \"). The price on the order was higher than the level it crossed, so the resulting trade will have an improved price of 9651. The limit order was not completely filled, because there was insufficient quantity on the offer side. And assuming this order is good for some time, any quantity remaining after the matching phase is complete will rest on the bid side, hence the new price level on the bid side at TOB. Orders that cross the spread and \"take\" liquidity from the order book are known as an \"aggressive\" orders. By contrast, orders that do not cross the spread are known as \"passive\" orders. Aggressive orders may \"sweep\" through multiple price levels, as demonstrated in the following example, where an aggressive order to \"SELL 4 @9649 \" sweeps through the top three levels of the bid side: Level Bid Qty Bid Price Spread Offer Price Offer Qty 4 5 9648 5 9653 6 This aggressive order will result in the following trades: 1 @9652 2 @9650 1 @9649","title":"Order Matching"},{"location":"limit_order_books/#makers-and-takers","text":"Traders that submit aggressive orders are known as \"takers\". Traders that submit passive orders are known as \"makers\". Market-makers play an important role in providing liquidity to the market, because, under normal market conditions, they are willing to quote two-way prices on a continual basis, thus ensuring that there is always a maker available to take the opposing side of a taker's trade. Each trade transaction comprises two matched orders. These orders can be classified both in terms of a buyer and a seller or a maker and a taker. To avoid confusion, trades are often referred to from the taker's perspective as \"paid\" or \"given\": Paid: taker bought or \"lifted the offer\". Given: taker sold or \"hit the bid\". This terminology is particular relevant for public trade feeds, where an Exchange may publicise anonymised trade information from the taker's perspective.","title":"Makers and Takers"},{"location":"mev-risks/","text":"MEV Risks \u00b6 source Call \\(T_{MEV}\\) the transaction fees netted by MEV transactions (in Gwei) MEV transactions use an amount of gas \\(g_{MEV}\\) Non-MEV transactions pay a miner fee \\(\\delta\\) (in Gwei per gas unit) Non-MEV transactions use \\(g_N\\) gas The whole block (MEV + non-MEV) uses \\(g = g_{MEV} + g_N\\) gas The block reward is \\(R\\) (in Gwei) The uncle reward is \\(U\\) (in Gwei) There is a rate \\(p\\) such that for each unit of gas added in the block, the uncle risk increases by \\(p\\) . It was once measured that 10M gas adds about 2.5% risk, so we take \\(p = 2.5 \\times 10^{-9}\\) The expected revenue from a block including only MEV transactions is \\[ A = (1-pg_{MEV}) (R + T_{MEV}) + pg_{MEV} U \\] The expected revenue from a block providing \\(g\\) gas in total is \\[ B = (1-pg) (R + T_{MEV} + \\delta g_N) + pgU \\] We look for \\(\\delta\\) such that \\(B \\geq A\\) , which yields \\[ \\delta \\geq \\frac{p(R + T_{MEV} - U)}{1-pg} \\] Note that this measure is independent of the quantity of gas used by MEV vs non-MEV transactions, but simply a function of the total gas used by the block \\(g\\) . Calculating for \\(T_{MEV} \\in [0, 2 \\times 10^9]\\) (i.e., MEV in block netting between 0 and 2 ETH), we obtain the following values for \\(\\delta\\) , assuming 15 million gas is provided: Recently, Tim Beiko argued that the value of \\(p\\) may be different: > If we eyeball it, the gas limit goes from ~12.25m to ~14.75m, so +2.5m. In that, it seems like the uncle rates go from clustering around .045 to .049 (being somewhat generous), so a ~0.004 increase in uncle rate for a 2.5m increase. This means a 10m gas would add ~1.6% uncle risk, not 2.5% as your note assumes. Note that as \\(p\\) decreases, so does the required miner fee. With \\(p = 2.0 \\times 10^{-9}\\) Notebook source How much MEV should I expect in the block? \u00b6 See Flashbots mev-explore , reporting around 200 USD profit per bundle, i.e., ~0.1 ETH (@ 2000 ETH/USD). Note that since the above calculation is based on averages, there could be bundles netting much more than 0.1 ETH sometimes, and bundles netting much less than 0.1 ETH most times. A priority fee of ~2Gwei seems fine for most cases however.","title":"Risks"},{"location":"mev-risks/#mev-risks","text":"source Call \\(T_{MEV}\\) the transaction fees netted by MEV transactions (in Gwei) MEV transactions use an amount of gas \\(g_{MEV}\\) Non-MEV transactions pay a miner fee \\(\\delta\\) (in Gwei per gas unit) Non-MEV transactions use \\(g_N\\) gas The whole block (MEV + non-MEV) uses \\(g = g_{MEV} + g_N\\) gas The block reward is \\(R\\) (in Gwei) The uncle reward is \\(U\\) (in Gwei) There is a rate \\(p\\) such that for each unit of gas added in the block, the uncle risk increases by \\(p\\) . It was once measured that 10M gas adds about 2.5% risk, so we take \\(p = 2.5 \\times 10^{-9}\\) The expected revenue from a block including only MEV transactions is \\[ A = (1-pg_{MEV}) (R + T_{MEV}) + pg_{MEV} U \\] The expected revenue from a block providing \\(g\\) gas in total is \\[ B = (1-pg) (R + T_{MEV} + \\delta g_N) + pgU \\] We look for \\(\\delta\\) such that \\(B \\geq A\\) , which yields \\[ \\delta \\geq \\frac{p(R + T_{MEV} - U)}{1-pg} \\] Note that this measure is independent of the quantity of gas used by MEV vs non-MEV transactions, but simply a function of the total gas used by the block \\(g\\) . Calculating for \\(T_{MEV} \\in [0, 2 \\times 10^9]\\) (i.e., MEV in block netting between 0 and 2 ETH), we obtain the following values for \\(\\delta\\) , assuming 15 million gas is provided: Recently, Tim Beiko argued that the value of \\(p\\) may be different: > If we eyeball it, the gas limit goes from ~12.25m to ~14.75m, so +2.5m. In that, it seems like the uncle rates go from clustering around .045 to .049 (being somewhat generous), so a ~0.004 increase in uncle rate for a 2.5m increase. This means a 10m gas would add ~1.6% uncle risk, not 2.5% as your note assumes. Note that as \\(p\\) decreases, so does the required miner fee. With \\(p = 2.0 \\times 10^{-9}\\) Notebook source","title":"MEV Risks"},{"location":"mev-risks/#how-much-mev-should-i-expect-in-the-block","text":"See Flashbots mev-explore , reporting around 200 USD profit per bundle, i.e., ~0.1 ETH (@ 2000 ETH/USD). Note that since the above calculation is based on averages, there could be bundles netting much more than 0.1 ETH sometimes, and bundles netting much less than 0.1 ETH most times. A priority fee of ~2Gwei seems fine for most cases however.","title":"How much MEV should I expect in the block?"},{"location":"mining-pools/","text":"Pool Examples for ETH \u00b6 Pool connection definition is issued via -P argument which has this syntax: -P scheme://user[.workername][:password]@hostname:port[/...] values in square brackets are optional where scheme can be any of: http for getwork mode (geth) stratum+tcp for plain stratum mode stratum1+tcp for plain stratum eth-proxy compatible mode stratum2+tcp for plain stratum NiceHash compatible mode A note about this form of notation \u00b6 This notation is called URI notation and gives us great flexibility allowing ethminer to specify all needed arguments per single connection (other miners offer single dedicated CLI arguments which are valid for all connections). An URI is formed like this Authority +---------------------------------------------------------------------+ stratum://0x123456789012345678901234567890.Worker:password@eu1.ethermine.org:4444 +------+ +----------------------------------------------+ +---------------+ +--+ | | | | | | | + > Port | | + ------------- > Host | + ------------------------------------------------ > User Info + -------------------------------------------------------------------------- > Scheme Optionally you can append to the above notation anything which might be useful in the form of a path. Example stratum://0x123456789012345678901234567890.Worker:password@eu1.ethermine.org:4444/something/else +--------------+ | Path --------------- + Anything you put in the Path part must be Url Encoded thus, for example, @ must be written as %40 As you may have noticed due to compatibility with pools we need to know exactly which are the delimiters for the account, the workername (if any) and the password (if any) which are respectively a dot . and a column : . Should your values contain any of the above mentioned chars or any other char which may impair the proper parsing of the URI you have two options: - either enclose the string in backticks (ASCII 96) - or URL encode the impairing chars Say you need to provide the pool with an account name which contains a dot. At your discretion you may either write -P stratum://`account.1234`.Worker:password@eu1.ethermine.org:4444 or -P stratum://account%2e1234.Worker:password@eu1.ethermine.org:4444 The above samples produce the very same result. Backticks on *nix . The backtick enclosure has a special meaning of execution thus you may need to further escape the sequence as -P stratum://\\`account.1234\\`.Worker:password@eu1.ethermine.org:4444 % on Windows . The percent symbol % has a special meaning in Windows batch files thus you may need to further escape it by doubling. Following example shows %2e needs to be replaced as %%2e -P stratum://account%%2e1234.Worker:password@eu1.ethermine.org:4444 Secure socket communications for stratum only \u00b6 Ethminer supports secure socket communications (where pool implements and offers it) to avoid the risk of a man-in-the-middle attack To enable it simply replace tcp with either: tls to enable secure socket communication ssl or tls12 to enable secure socket communication allowing only TLS 1.2 encryption thus your connection scheme changes to -P stratum+tls://[...] or -P stratum+tls12://[...] . Same applies for stratum1 and stratum2 . Special characters in variables \u00b6 You can use the %xx (xx=hexvalue of character) to pass special values. Some examples: Code Character %25 % %26 & %2e . %2f / %3a : %3f ? %40 @ Only for version 0.16+ (older versions not affected) \u00b6 Stratum autodetection has been introduced to mitigate user's duty to guess/find which stratum flavour to apply (stratum or stratum1 or stratum2). If you want to let ethminer do the tests for you simply enter scheme as stratum:// (note +tcp is missing) or stratums:// for secure socket or stratumss:// for secure socket allowing only TLS 1.2 encryption. Common samples \u00b6 Here you can find a collection of samples to connect to most commonly used ethash pools. (alphabetic order). Stratum connection is always to be preferred over getwork when pool offers it due to its better network latency. If possible the samples use a protocol which supports reporting of hashrate ( --report-hashrate ) if pool supports this. Check for updates in the pool connection settings visiting the pool's homepage. Variables \u00b6 We tried to merge the requirements of the variables so they match all pools. Variables Description Sample ETH_WALLET Replace ETH_WALLET with your Ethereum wallet number including the leading 0x . 0x1234567890ABCDEF1234567890abcdef12345678 WORKERNAME WORKERNAME may only contain letters and numbers. Some pools also only allow up to a maximum of 8 characters! pl1rig01 EMAIL EMAIL may contain letters, numbers, underscores. Please encode dashes, @-sign and other uncommon charaters using the Special characters joe1.doe_jr-ny%40acme.com USERNAME USERNAME you got from the pool (like miningpoolhub.com ) my_username WORKERPWD WORKERPWD is the password you got from the pool for the worker (like miningpoolhub.com ) - if you have no password set try using 'x' my_workerpwd BTC_WALLET As some pools honor your work in BTC (eg nicehash.com ) BTC_WALLET is your Bitcoin wallet address 1A2b3C4d5e5F6g7H8I9j0kLmNoPqRstUvW Servers \u00b6 The servers are listed in alphabetical order. To get best results reorder them from nearest to farest distance depending on your geographic location. Pools (alphabetic order) \u00b6 Pool Name Pool Homepage Details about connection 2miners.com https://2miners.com/ https://eth.2miners.com/en/help dwarfpool.org https://dwarfpool.com/ https://dwarfpool.com/eth ethermine.org https://ethermine.org/ https://ethermine.org/ ethpool.org https://www.ethpool.org/ https://www.ethpool.org/ f2pool.com https://www.f2pool.com/ https://www.f2pool.com/help/?#tab-content-eth flexpool.io https://flexpool.io/ https://flexpool.io/docs/getting-started/ miningpoolhub.com https://miningpoolhub.com/ https://ethereum.miningpoolhub.com/ nanopool.org https://nanopool.org/ https://eth.nanopool.org/help nicehash.com https://www.nicehash.com/ https://www.nicehash.com/help/which-stratum-servers-are-available sparkpool.com https://sparkpool.com/ https://eth.sparkpool.com/ whalesburg.com https://whalesburg.com/ https://whalesburg.com/start_mining/ 2miners.com \u00b6 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth.2miners.com:2020 dwarfpool.org \u00b6 With email -P stratum1+tcp://ETH_WALLET@eth-ar.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-asia.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-au.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-br.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-cn.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-cn2.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-eu.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-hk.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-sg.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-ru.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-ru2.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us2.dwarfpool.com:8008/WORKERNAME/EMAIL Without email -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-ar.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-asia.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-au.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-br.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-cn.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-cn2.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-eu.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-hk.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-sg.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-ru.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-ru2.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us2.dwarfpool.com:8008 HINTS: Use \"%40\" for the @-sign in your email address ethermine.org \u00b6 Non-SSL connection: -P stratum1+tcp://ETH_WALLET.WORKERNAME@asia1.ethermine.org:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu1.ethermine.org:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us1.ethermine.org:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us2.ethermine.org:4444 SSL connection: -P stratum1+ssl://ETH_WALLET.WORKERNAME@asia1.ethermine.org:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@eu1.ethermine.org:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@us1.ethermine.org:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@us2.ethermine.org:5555 ethpool.org \u00b6 -P stratum1+tcp://ETH_WALLET.WORKERNAME@asia1.ethpool.org:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu1.ethpool.org:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us1.ethpool.org:3333 f2pool.com \u00b6 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth.f2pool.com:8008 flexpool.io \u00b6 Non-SSL connection: -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu.flexpool.io:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us.flexpool.io:4444 SSL connection: -P stratum1+ssl://ETH_WALLET.WORKERNAME@eu.flexpool.io:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@us.flexpool.io:5555 miningpoolhub.com \u00b6 -P stratum2+tcp://USERNAME%2eWORKERNAME:WORKERPWD@asia.ethash-hub.miningpoolhub.com:20535 -P stratum2+tcp://USERNAME%2eWORKERNAME:WORKERPWD@europe.ethash-hub.miningpoolhub.com:20535 -P stratum2+tcp://USERNAME%2eWORKERNAME:WORKERPWD@us-east.ethash-hub.miningpoolhub.com:20535 HINTS: miningpoolhub.com needs username.workername in the internal login process. Use \"%2e\" to join them into one parameter. It seems the password is not being verified by the pool so you can use a plain x as WORKERPWD . nanopool.org \u00b6 Notice \u26a0 Use \"%40\" for the @-sign in your email address Use \"\\%2e\" for the .-sign on Linux in ETH_WALLET.WORKERNAME With email: -P stratum1+tcp://ETH_WALLET@eth-asia1.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-eu1.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-eu2.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us-east1.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us-west1.nanopool.org:9999/WORKERNAME/EMAIL Without email: -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-asia1.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-eu1.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-eu2.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us-east1.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us-west1.nanopool.org:9999 nicehash.com \u00b6 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.br.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.eu.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.hk.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.in.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.jp.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.usa.nicehash.com:3353 sparkpool.com \u00b6 -P stratum1+tcp://ETH_WALLET.WORKERNAME@cn.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@jp.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@kr.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@na-east.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@na-west.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@tw.sparkpool.com:3333 whalesburg.com \u00b6 -P stratum1+tcp://ETH_WALLET.WORKERNAME@proxy.pool.whalesburg.com:8082","title":"Mining Pools"},{"location":"mining-pools/#pool-examples-for-eth","text":"Pool connection definition is issued via -P argument which has this syntax: -P scheme://user[.workername][:password]@hostname:port[/...] values in square brackets are optional where scheme can be any of: http for getwork mode (geth) stratum+tcp for plain stratum mode stratum1+tcp for plain stratum eth-proxy compatible mode stratum2+tcp for plain stratum NiceHash compatible mode","title":"Pool Examples for ETH"},{"location":"mining-pools/#a-note-about-this-form-of-notation","text":"This notation is called URI notation and gives us great flexibility allowing ethminer to specify all needed arguments per single connection (other miners offer single dedicated CLI arguments which are valid for all connections). An URI is formed like this Authority +---------------------------------------------------------------------+ stratum://0x123456789012345678901234567890.Worker:password@eu1.ethermine.org:4444 +------+ +----------------------------------------------+ +---------------+ +--+ | | | | | | | + > Port | | + ------------- > Host | + ------------------------------------------------ > User Info + -------------------------------------------------------------------------- > Scheme Optionally you can append to the above notation anything which might be useful in the form of a path. Example stratum://0x123456789012345678901234567890.Worker:password@eu1.ethermine.org:4444/something/else +--------------+ | Path --------------- + Anything you put in the Path part must be Url Encoded thus, for example, @ must be written as %40 As you may have noticed due to compatibility with pools we need to know exactly which are the delimiters for the account, the workername (if any) and the password (if any) which are respectively a dot . and a column : . Should your values contain any of the above mentioned chars or any other char which may impair the proper parsing of the URI you have two options: - either enclose the string in backticks (ASCII 96) - or URL encode the impairing chars Say you need to provide the pool with an account name which contains a dot. At your discretion you may either write -P stratum://`account.1234`.Worker:password@eu1.ethermine.org:4444 or -P stratum://account%2e1234.Worker:password@eu1.ethermine.org:4444 The above samples produce the very same result. Backticks on *nix . The backtick enclosure has a special meaning of execution thus you may need to further escape the sequence as -P stratum://\\`account.1234\\`.Worker:password@eu1.ethermine.org:4444 % on Windows . The percent symbol % has a special meaning in Windows batch files thus you may need to further escape it by doubling. Following example shows %2e needs to be replaced as %%2e -P stratum://account%%2e1234.Worker:password@eu1.ethermine.org:4444","title":"A note about this form of notation"},{"location":"mining-pools/#secure-socket-communications-for-stratum-only","text":"Ethminer supports secure socket communications (where pool implements and offers it) to avoid the risk of a man-in-the-middle attack To enable it simply replace tcp with either: tls to enable secure socket communication ssl or tls12 to enable secure socket communication allowing only TLS 1.2 encryption thus your connection scheme changes to -P stratum+tls://[...] or -P stratum+tls12://[...] . Same applies for stratum1 and stratum2 .","title":"Secure socket communications for stratum only"},{"location":"mining-pools/#special-characters-in-variables","text":"You can use the %xx (xx=hexvalue of character) to pass special values. Some examples: Code Character %25 % %26 & %2e . %2f / %3a : %3f ? %40 @","title":"Special characters in variables"},{"location":"mining-pools/#only-for-version-016-older-versions-not-affected","text":"Stratum autodetection has been introduced to mitigate user's duty to guess/find which stratum flavour to apply (stratum or stratum1 or stratum2). If you want to let ethminer do the tests for you simply enter scheme as stratum:// (note +tcp is missing) or stratums:// for secure socket or stratumss:// for secure socket allowing only TLS 1.2 encryption.","title":"Only for version 0.16+ (older versions not affected)"},{"location":"mining-pools/#common-samples","text":"Here you can find a collection of samples to connect to most commonly used ethash pools. (alphabetic order). Stratum connection is always to be preferred over getwork when pool offers it due to its better network latency. If possible the samples use a protocol which supports reporting of hashrate ( --report-hashrate ) if pool supports this. Check for updates in the pool connection settings visiting the pool's homepage.","title":"Common samples"},{"location":"mining-pools/#variables","text":"We tried to merge the requirements of the variables so they match all pools. Variables Description Sample ETH_WALLET Replace ETH_WALLET with your Ethereum wallet number including the leading 0x . 0x1234567890ABCDEF1234567890abcdef12345678 WORKERNAME WORKERNAME may only contain letters and numbers. Some pools also only allow up to a maximum of 8 characters! pl1rig01 EMAIL EMAIL may contain letters, numbers, underscores. Please encode dashes, @-sign and other uncommon charaters using the Special characters joe1.doe_jr-ny%40acme.com USERNAME USERNAME you got from the pool (like miningpoolhub.com ) my_username WORKERPWD WORKERPWD is the password you got from the pool for the worker (like miningpoolhub.com ) - if you have no password set try using 'x' my_workerpwd BTC_WALLET As some pools honor your work in BTC (eg nicehash.com ) BTC_WALLET is your Bitcoin wallet address 1A2b3C4d5e5F6g7H8I9j0kLmNoPqRstUvW","title":"Variables"},{"location":"mining-pools/#servers","text":"The servers are listed in alphabetical order. To get best results reorder them from nearest to farest distance depending on your geographic location.","title":"Servers"},{"location":"mining-pools/#pools-alphabetic-order","text":"Pool Name Pool Homepage Details about connection 2miners.com https://2miners.com/ https://eth.2miners.com/en/help dwarfpool.org https://dwarfpool.com/ https://dwarfpool.com/eth ethermine.org https://ethermine.org/ https://ethermine.org/ ethpool.org https://www.ethpool.org/ https://www.ethpool.org/ f2pool.com https://www.f2pool.com/ https://www.f2pool.com/help/?#tab-content-eth flexpool.io https://flexpool.io/ https://flexpool.io/docs/getting-started/ miningpoolhub.com https://miningpoolhub.com/ https://ethereum.miningpoolhub.com/ nanopool.org https://nanopool.org/ https://eth.nanopool.org/help nicehash.com https://www.nicehash.com/ https://www.nicehash.com/help/which-stratum-servers-are-available sparkpool.com https://sparkpool.com/ https://eth.sparkpool.com/ whalesburg.com https://whalesburg.com/ https://whalesburg.com/start_mining/","title":"Pools (alphabetic order)"},{"location":"mining-pools/#2minerscom","text":"-P stratum1+tcp://ETH_WALLET.WORKERNAME@eth.2miners.com:2020","title":"2miners.com"},{"location":"mining-pools/#dwarfpoolorg","text":"With email -P stratum1+tcp://ETH_WALLET@eth-ar.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-asia.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-au.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-br.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-cn.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-cn2.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-eu.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-hk.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-sg.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-ru.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-ru2.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us.dwarfpool.com:8008/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us2.dwarfpool.com:8008/WORKERNAME/EMAIL Without email -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-ar.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-asia.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-au.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-br.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-cn.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-cn2.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-eu.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-hk.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-sg.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-ru.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-ru2.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us.dwarfpool.com:8008 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us2.dwarfpool.com:8008 HINTS: Use \"%40\" for the @-sign in your email address","title":"dwarfpool.org"},{"location":"mining-pools/#ethermineorg","text":"Non-SSL connection: -P stratum1+tcp://ETH_WALLET.WORKERNAME@asia1.ethermine.org:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu1.ethermine.org:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us1.ethermine.org:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us2.ethermine.org:4444 SSL connection: -P stratum1+ssl://ETH_WALLET.WORKERNAME@asia1.ethermine.org:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@eu1.ethermine.org:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@us1.ethermine.org:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@us2.ethermine.org:5555","title":"ethermine.org"},{"location":"mining-pools/#ethpoolorg","text":"-P stratum1+tcp://ETH_WALLET.WORKERNAME@asia1.ethpool.org:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu1.ethpool.org:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us1.ethpool.org:3333","title":"ethpool.org"},{"location":"mining-pools/#f2poolcom","text":"-P stratum1+tcp://ETH_WALLET.WORKERNAME@eth.f2pool.com:8008","title":"f2pool.com"},{"location":"mining-pools/#flexpoolio","text":"Non-SSL connection: -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu.flexpool.io:4444 -P stratum1+tcp://ETH_WALLET.WORKERNAME@us.flexpool.io:4444 SSL connection: -P stratum1+ssl://ETH_WALLET.WORKERNAME@eu.flexpool.io:5555 -P stratum1+ssl://ETH_WALLET.WORKERNAME@us.flexpool.io:5555","title":"flexpool.io"},{"location":"mining-pools/#miningpoolhubcom","text":"-P stratum2+tcp://USERNAME%2eWORKERNAME:WORKERPWD@asia.ethash-hub.miningpoolhub.com:20535 -P stratum2+tcp://USERNAME%2eWORKERNAME:WORKERPWD@europe.ethash-hub.miningpoolhub.com:20535 -P stratum2+tcp://USERNAME%2eWORKERNAME:WORKERPWD@us-east.ethash-hub.miningpoolhub.com:20535 HINTS: miningpoolhub.com needs username.workername in the internal login process. Use \"%2e\" to join them into one parameter. It seems the password is not being verified by the pool so you can use a plain x as WORKERPWD .","title":"miningpoolhub.com"},{"location":"mining-pools/#nanopoolorg","text":"Notice \u26a0 Use \"%40\" for the @-sign in your email address Use \"\\%2e\" for the .-sign on Linux in ETH_WALLET.WORKERNAME With email: -P stratum1+tcp://ETH_WALLET@eth-asia1.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-eu1.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-eu2.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us-east1.nanopool.org:9999/WORKERNAME/EMAIL -P stratum1+tcp://ETH_WALLET@eth-us-west1.nanopool.org:9999/WORKERNAME/EMAIL Without email: -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-asia1.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-eu1.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-eu2.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us-east1.nanopool.org:9999 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eth-us-west1.nanopool.org:9999","title":"nanopool.org"},{"location":"mining-pools/#nicehashcom","text":"-P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.br.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.eu.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.hk.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.in.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.jp.nicehash.com:3353 -P stratum2+tcp://BTC_WALLET.WORKERNAME@daggerhashimoto.usa.nicehash.com:3353","title":"nicehash.com"},{"location":"mining-pools/#sparkpoolcom","text":"-P stratum1+tcp://ETH_WALLET.WORKERNAME@cn.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@eu.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@jp.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@kr.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@na-east.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@na-west.sparkpool.com:3333 -P stratum1+tcp://ETH_WALLET.WORKERNAME@tw.sparkpool.com:3333","title":"sparkpool.com"},{"location":"mining-pools/#whalesburgcom","text":"-P stratum1+tcp://ETH_WALLET.WORKERNAME@proxy.pool.whalesburg.com:8082","title":"whalesburg.com"},{"location":"obligations/","text":"Obligations \u00b6 501. Limitation of Liability \u00b6 (A). THE LIABILITY OF Commodity Stream, LLC CLEARING RELATING TO OR ARISING OUT OF CONTRACTS SHALL BE LIMITED TO LOSSES RESULTING FROM THE NOVATION OF THE CONTRACTS IN ACCORDANCE WITH THE RULES. SUBJECT TO THE FOREGOING, NEITHER THE CLEARINGHOUSE, NOR ANY AFFILIATE OF THE CLEARINGHOUSE, NOR ANY OF THEIR RESPECTIVE MANAGERS, OFFICERS, DIRECTORS, EMPLOYEES, EQUITYHOLDERS, AGENTS, CONSULTANTS OR SERVICE PROVIDERS (INCLUDING, WITHOUT LIMITATION, ANY REGULATORY SERVICES PROVIDER), NOR ANY MEMBER OF ANY COMMITTEE OR OTHER GOVERNING BODY OF ANY AFFILIATE OF THE CLEARINGHOUSE (EACH OF THE FOREGOING, AS APPLICABLE, THE \u201cDISCLAIMING PARTY\u201d AND, COLLECTIVELY, \u201cDISCLAIMING PARTIES\u201d) SHALL BE RESPONSIBLE FOR ANY ACTION TAKEN, OR ANY DELAY OR FAILURE TO TAKE ANY ACTION, HEREUNDER OR OTHERWISE TO FULFILL A DISCLAIMING PARTY\u2019S OBLIGATIONS TO CLEARING PARTICIPANTS, OTHER THAN FOR LOSSES CAUSED DIRECTLY BY A DISCLAIMING PARTY\u2019S GROSS NEGLIGENCE OR WILLFUL MISCONDUCT AND SHALL NOT BE LIABLE FOR ANY OTHER OBLIGATIONS, INCLUDING BUT NOT LIMITED TO OBLIGATIONS OF A CLEARING PARTICIPANT, OBLIGATIONS OF A CLEARING PARTICIPANT TO A CUSTOMER OR OTHER NON-CLEARING PARTICIPANT OR OBLIGATIONS OF A CLEARING PARTICIPANT TO ANOTHER CLEARING PARTICIPANT THAT IS ACTING FOR IT AS BROKER; NOR SHALL A DISCLAIMING PARTY BECOME LIABLE TO MAKE DELIVERIES TO OR ACCEPT DELIVERIES FROM CLEARING PARTICIPANTS OR CUSTOMERS. UNDER NO CIRCUMSTANCES WILL A DISCLAIMING PARTY BE LIABLE FOR (1) THE ACTS, DELAYS, OMISSIONS, BANKRUPTCY, OR INSOLVENCY, OF ANY THIRD PARTY, INCLUDING, WITHOUT LIMITATION, ANY DEPOSITORY, CUSTODIAN, SUBCUSTODIAN, CLEARING OR SETTLEMENT SYSTEM UNLESS THE DISCLAIMING PARTY WAS GROSSLY NEGLIGENT OR ENGAGED IN WILLFUL MISCONDUCT OR (2) THE PERFORMANCE OR OPERATION (OR NON- PERFORMANCE OR NON-OPERATION) OF ANY DIGITAL ASSET OR RELATED DISTRIBUTED LEDGER (\u201cANCILLARY DL\u201d) ATTRIBUTABLE DIRECTLY OR INDIRECTLY TO THE DESIGN OF THE DIGITAL ASSET OR ANCILLARY DL. UNDER NO CIRCUMSTANCES WILL A DISCLAIMING PARTY BE LIABLE FOR ANY INDIRECT, CONSEQUENTIAL, INCIDENTAL, SPECIAL, PUNITIVE OR EXEMPLARY LOSS OR DAMAGE (INCLUDING, BUT NOT LIMITED TO, LOSS OF BUSINESS, LOSS OF PROFITS, TRADING LOSSES, LOSS OF OPPORTUNITY AND LOSS OF USE) HOWSOEVER SUFFERED OR INCURRED, REGARDLESS OF WHETHER THE DISCLAIMING PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES OR WHETHER SUCH DAMAGES OTHERWISE COULD HAVE BEEN FORESEEN OR PREVENTED. THE FOREGOING LIMITATIONS OF LIABILITY SHALL APPLY REGARDLESS OF WHETHER A CLAIM IS BASED ON BREACH OF CONTRACT, TORT, INCLUDING, WITHOUT LIMITATION, NEGLIGENCE (OTHER THAN GROSS NEGLIGENCE), STRICT LIABILITY, NEGLIGENT MISREPRESENTATION, RESTITUTION, BREACH OF STATUTORY DUTY, BREACH OF WARRANTY OR OTHERWISE, AND WHETHER THE CLAIM IS BROUGHT DIRECTLY OR AS A THIRD-PARTY CLAIM. (B). THERE ARE NO EXPRESS OR IMPLIED WARRANTIES OR REPRESENTATIONS PROVIDED BY THE CLEARINGHOUSE OR ANY OTHER DISCLAIMING PARTY RELATING TO ANY SYSTEMS OR SERVICES OF THE CLEARINGHOUSE OR SERVICES, EQUIPMENT OR FACILITIES USED TO SUPPORT SUCH SYSTEMS OR SERVICES, AND THE CLEARINGHOUSE HEREBY SPECIFICALLY DISCLAIMS, OVERRIDES AND EXCLUDES, TO THE FULLEST EXTENT PERMITTED BY LAW, ALL IMPLIED WARRANTIES OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE AND ALL OTHER WARRANTIES, CONDITIONS, OTHER CONTRACTUAL TERMS, REPRESENTATIONS, INDEMNITIES AND GUARANTEES WITH RESPECT TO THE SERVICES, WHETHER EXPRESS, IMPLIED OR STATUTORY, ARISING BY LAW, CUSTOM, PRIOR ORAL OR WRITTEN STATEMENTS BY THE CLEARINGHOUSE OR ANY OTHER DISCLAIMING PARTY OR OTHERWISE (INCLUDING BUT NOT LIMITED TO, AS TO TITLE, SATISFACTORY QUALITY, ACCURACY, COMPLETENESS, UNINTERRUPTED USE, NON-INFRINGEMENT, TIMELINESS, TRUTHFULNESS, SEQUENCE AND ANY IMPLIED WARRANTIES, CONDITIONS AND OTHER CONTRACTUAL TERMS ARISING FROM TRANSACTION USAGE, COURSE OF DEALING OR COURSE OF PERFORMANCE) RELATING TO ANY SYSTEMS OR SERVICES OF THE CLEARINGHOUSE OR SERVICES, EQUIPMENT OR FACILITIES USED TO SUPPORT SUCH SYSTEMS OR SERVICES. (C). Commodity Stream, LLC CLEARING MAY ACCEPT AND RELY UPON ANY INFORMATION OR INSTRUCTION GIVEN TO Commodity Stream, LLC CLEARING BY A CLEARING PARTICIPANT OR ITS OFFICERS OR AUTHORIZED REPRESENTATIVES, WHICH REASONABLY IS UNDERSTOOD BY Commodity Stream, LLC CLEARING TO HAVE BEEN DELIVERED TO Commodity Stream, LLC CLEARING BY THE CLEARING PARTICIPANT AND SUCH CLEARING PARTICIPANT SHALL INDEMNIFY THE DISCLAIMING PARTIES AND CLEARING PARTICIPANTS AGAINST ANY LOSS, LIABILITY OR EXPENSE AS A RESULT OF ANY ACT DONE IN RELIANCE UPON THE AUTHENTICITY OF ANY INFORMATION OR INSTRUCTION RECEIVED BY Commodity Stream, LLC CLEARING, THE INACCURACY OF THE INFORMATION CONTAINED THEREIN OR EFFECTING TRANSACTIONS IN RELIANCE UPON SUCH INFORMATION OR INSTRUCTION. (D). A CLEARING PARTICIPANT SHALL REIMBURSE Commodity Stream, LLC CLEARING FOR ALL FEES, EXPENSES, CHARGES AND COSTS ASSESSED BY A DEPOSITORY AGAINST Commodity Stream, LLC CLEARING WITH RESPECT TO MARGIN MAINTAINED IN SUCH CLEARING PARTICIPANT\u2019S ACCOUNT, AND Commodity Stream, LLC CLEARING SHALL NOT HAVE ANY OBLIGATION OR RESPONSIBILITY TO PRESERVE, PROTECT, COLLECT OR REALIZE UPON, AND EXCEPT AS PROVIDED IN RULE 403(D), Commodity Stream, LLC CLEARING SHALL NOT BE LIABLE FOR, ANY LOSS OR DIMINUTION IN VALUE OR DEPRECIATION IN MARGIN DEPOSITED BY CLEARING PARTICIPANTS. CLEARING PARTICIPANTS THAT DEPOSIT MARGIN WITH AN APPROVED DEPOSITORY INSTITUTION PURSUANT TO THE RULES SHALL HOLD Commodity Stream, LLC CLEARING HARMLESS FROM ALL LIABILITY, LOSSES AND DAMAGES WHICH MAY RESULT FROM OR ARISE WITH RESPECT TO THE CARE AND SALE OF SUCH MARGIN. (E). ANY OBLIGATION OF Commodity Stream, LLC CLEARING TO A CLEARING PARTICIPANT ARISING FROM A CONTRACT OR FROM ANY PROVISION OF THE RULES SHALL BE SUBJECT TO ALL THE TERMS OF THE RULES, INCLUDING THE SETOFF AND OTHER RIGHTS SET FORTH HEREIN. (F). EXCEPT IN ANY CASE WHERE A DISCLAIMING PARTY HAS BEEN FINALLY ADJUDICATED TO HAVE ENGAGED IN FRAUD OR WILLFUL OR WANTON MISCONDUCT, IN NO EVENT SHALL THE DISCLAIMING PARTIES\u2019 TOTAL COMBINED AGGREGATE LIABILITY FOR ALL CLAIMS, OTHER THAN THOSE ARISING UNDER RULE 501(F), EXCEED $100,000 FOR ALL LOSSES SUFFERED FROM ALL CAUSES ON A SINGLE CALENDAR DAY; $200,000 FOR ALL LOSSES SUFFERED FROM ALL CAUSES IN A SINGLE CALENDAR MONTH; AND $1,000,000 FOR ALL LOSSES SUFFERED FROM ALL CAUSES IN A SINGLE CALENDAR YEAR. IF THE NUMBER OF ALLOWED CLAIMS ARISING OUT OF ANY FAILURES OR MALFUNCTIONS ON A SINGLE DAY, SINGLE MONTH OR SINGLE YEAR CANNOT BE FULLY SATISFIED BECAUSE OF THE ABOVE DOLLAR LIMITATIONS, ALL SUCH CLAIMS SHALL BE LIMITED TO A PRO RATA SHARE OF THE MAXIMUM AMOUNT FOR THE RESPECTIVE PERIOD. (G). THE RIGHTS OF Commodity Stream, LLC CLEARING SET FORTH HEREIN SHALL BE IN ADDITION TO OTHER RIGHTS THAT Commodity Stream, LLC CLEARING MAY HAVE UNDER APPLICABLE LAW AND GOVERNMENTAL REGULATIONS, OTHER PROVISIONS OF THE RULES, ADDITIONAL AGREEMENTS WITH THE CLEARING PARTICIPANT OR ANY OTHER SOURCE. 502. Clearing Participant Default \u00b6 (A). If a Clearing Participant is in Default, Margin held with respect to such Clearing Participant\u2019s Member Property Accounts, and any other of such Clearing Participant\u2019s assets held by, pledged to or otherwise available to Commodity Stream, LLC, may be applied by Commodity Stream, LLC to discharge the Obligations of such Clearing Participant to Commodity Stream, LLC (including any costs and expenses associated with the liquidation, transfer or management of Contracts held in or for the Member Property Accounts of such Clearing Participant, and any fees, assessments or fines imposed by Commodity Stream, LLC on such Clearing Participant), and Commodity Stream, LLC may cause all Contracts of such Clearing Participant (whether or not carried in a Customer Account) to be closed or offset, transferred to any other Clearing Participant, or otherwise resolved as provided in these Rules. (B). If the Margin held with respect to such Clearing Participant\u2019s Member Property Accounts, and other of such Clearing Participant\u2019s assets held by, pledged to or otherwise available to Commodity Stream, LLC, including any guarantee issued pursuant to these Rules, are insufficient to satisfy the defaulting Clearing Participant\u2019s Obligations to Commodity Stream, LLC after giving effect to the application of such amounts pursuant to paragraph (a), such defaulting Clearing Participant shall continue to be liable therefor. (C). In closing, offsetting, transferring or otherwise resolving the Contracts of a Clearing Participant as provided herein and in Rule 601, Commodity Stream, LLC shall have the right: (i) With respect to Contracts in a Customer Account of such Commodity Stream, LLC Clearing Participant, to set off [x] any proceeds received by Commodity Stream, LLC from the disposition of such Contracts and any property or proceeds thereof deposited with or held by Commodity Stream, LLC as Margin for such account against [y] any amounts paid by Commodity Stream, LLC in the disposition of such Contracts, including any commissions or other losses or expenses incurred in connection therewith or in connection with the liquidation of Margin deposits in such Customer Account and any other amounts owed to Commodity Stream, LLC as a result of transactions in the Customer Account or otherwise lawfully chargeable against such Customer Account; (ii) With respect to the Contracts in any Member Property Accounts of such Clearing Participant, to set off (x) any proceeds received by Commodity Stream, LLC from the disposition of such Contracts, any property or proceeds thereof deposited with or held by Commodity Stream, LLC as Margin for such Member Property Accounts and any other property of the Clearing Participant within the possession or control of Commodity Stream, LLC other than property that has been identified by such Clearing Participant as required to be segregated pursuant to the CEA and CFTC Regulations, against (y) any amounts paid by Commodity Stream, LLC in the disposition of such Contracts, including any commissions or other losses or expenses incurred in connection therewith or in connection with the liquidation of Margin deposits in such Member Property Accounts, and any other Obligations of the Clearing Participant to Commodity Stream, LLC, including Obligations of the Clearing Participant to Commodity Stream, LLC remaining after the setoffs referred to in paragraph (i) above, and any Obligations arising from any other Member Property Accounts maintained by the Clearing Participant with Commodity Stream, LLC; and (iii) To defer closing or otherwise settling such trades and Contracts if, in its discretion, it determines that the closing out of some or all of the suspended Clearing Participant\u2019s trades or Contracts would not be in the best interests of Commodity Stream, LLC or other Clearing Participants, taking into account the size and nature of the positions in question, market conditions prevailing at the time, the potential market effects of such liquidating transactions as might be directed by Commodity Stream, LLC, and such other circumstances as it deems relevant; (iv) Or take any action the Clearinghouse deems proper or in the best interest of the Clearinghouse or its Clearing Participants. (D). For purposes of this Rule, each Default by a Network and/or Clearing Participant will be considered a separate Default. (E). A Network and/or Clearing Participant shall take no action, including but not limited to attempting to obtain a court order, that would interfere with the ability of Commodity Stream, LLC to exercise its rights under the Rules and its agreements with such Network or Clearing Participant. 503. Investment of Customer Funds \u00b6 Funds and assets belonging to Customers that are invested by Commodity Stream, LLC Clearing shall be held in instruments that comply with CFTC Regulations 1.25 and 39.15(e). Non-Customer funds and assets belonging to Clearing Participants that are invested by Commodity Stream, LLC shall be held in instruments that comply with CFTC Regulation 39.15(e).","title":"Obligations"},{"location":"obligations/#obligations","text":"","title":"Obligations"},{"location":"obligations/#501-limitation-of-liability","text":"(A). THE LIABILITY OF Commodity Stream, LLC CLEARING RELATING TO OR ARISING OUT OF CONTRACTS SHALL BE LIMITED TO LOSSES RESULTING FROM THE NOVATION OF THE CONTRACTS IN ACCORDANCE WITH THE RULES. SUBJECT TO THE FOREGOING, NEITHER THE CLEARINGHOUSE, NOR ANY AFFILIATE OF THE CLEARINGHOUSE, NOR ANY OF THEIR RESPECTIVE MANAGERS, OFFICERS, DIRECTORS, EMPLOYEES, EQUITYHOLDERS, AGENTS, CONSULTANTS OR SERVICE PROVIDERS (INCLUDING, WITHOUT LIMITATION, ANY REGULATORY SERVICES PROVIDER), NOR ANY MEMBER OF ANY COMMITTEE OR OTHER GOVERNING BODY OF ANY AFFILIATE OF THE CLEARINGHOUSE (EACH OF THE FOREGOING, AS APPLICABLE, THE \u201cDISCLAIMING PARTY\u201d AND, COLLECTIVELY, \u201cDISCLAIMING PARTIES\u201d) SHALL BE RESPONSIBLE FOR ANY ACTION TAKEN, OR ANY DELAY OR FAILURE TO TAKE ANY ACTION, HEREUNDER OR OTHERWISE TO FULFILL A DISCLAIMING PARTY\u2019S OBLIGATIONS TO CLEARING PARTICIPANTS, OTHER THAN FOR LOSSES CAUSED DIRECTLY BY A DISCLAIMING PARTY\u2019S GROSS NEGLIGENCE OR WILLFUL MISCONDUCT AND SHALL NOT BE LIABLE FOR ANY OTHER OBLIGATIONS, INCLUDING BUT NOT LIMITED TO OBLIGATIONS OF A CLEARING PARTICIPANT, OBLIGATIONS OF A CLEARING PARTICIPANT TO A CUSTOMER OR OTHER NON-CLEARING PARTICIPANT OR OBLIGATIONS OF A CLEARING PARTICIPANT TO ANOTHER CLEARING PARTICIPANT THAT IS ACTING FOR IT AS BROKER; NOR SHALL A DISCLAIMING PARTY BECOME LIABLE TO MAKE DELIVERIES TO OR ACCEPT DELIVERIES FROM CLEARING PARTICIPANTS OR CUSTOMERS. UNDER NO CIRCUMSTANCES WILL A DISCLAIMING PARTY BE LIABLE FOR (1) THE ACTS, DELAYS, OMISSIONS, BANKRUPTCY, OR INSOLVENCY, OF ANY THIRD PARTY, INCLUDING, WITHOUT LIMITATION, ANY DEPOSITORY, CUSTODIAN, SUBCUSTODIAN, CLEARING OR SETTLEMENT SYSTEM UNLESS THE DISCLAIMING PARTY WAS GROSSLY NEGLIGENT OR ENGAGED IN WILLFUL MISCONDUCT OR (2) THE PERFORMANCE OR OPERATION (OR NON- PERFORMANCE OR NON-OPERATION) OF ANY DIGITAL ASSET OR RELATED DISTRIBUTED LEDGER (\u201cANCILLARY DL\u201d) ATTRIBUTABLE DIRECTLY OR INDIRECTLY TO THE DESIGN OF THE DIGITAL ASSET OR ANCILLARY DL. UNDER NO CIRCUMSTANCES WILL A DISCLAIMING PARTY BE LIABLE FOR ANY INDIRECT, CONSEQUENTIAL, INCIDENTAL, SPECIAL, PUNITIVE OR EXEMPLARY LOSS OR DAMAGE (INCLUDING, BUT NOT LIMITED TO, LOSS OF BUSINESS, LOSS OF PROFITS, TRADING LOSSES, LOSS OF OPPORTUNITY AND LOSS OF USE) HOWSOEVER SUFFERED OR INCURRED, REGARDLESS OF WHETHER THE DISCLAIMING PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES OR WHETHER SUCH DAMAGES OTHERWISE COULD HAVE BEEN FORESEEN OR PREVENTED. THE FOREGOING LIMITATIONS OF LIABILITY SHALL APPLY REGARDLESS OF WHETHER A CLAIM IS BASED ON BREACH OF CONTRACT, TORT, INCLUDING, WITHOUT LIMITATION, NEGLIGENCE (OTHER THAN GROSS NEGLIGENCE), STRICT LIABILITY, NEGLIGENT MISREPRESENTATION, RESTITUTION, BREACH OF STATUTORY DUTY, BREACH OF WARRANTY OR OTHERWISE, AND WHETHER THE CLAIM IS BROUGHT DIRECTLY OR AS A THIRD-PARTY CLAIM. (B). THERE ARE NO EXPRESS OR IMPLIED WARRANTIES OR REPRESENTATIONS PROVIDED BY THE CLEARINGHOUSE OR ANY OTHER DISCLAIMING PARTY RELATING TO ANY SYSTEMS OR SERVICES OF THE CLEARINGHOUSE OR SERVICES, EQUIPMENT OR FACILITIES USED TO SUPPORT SUCH SYSTEMS OR SERVICES, AND THE CLEARINGHOUSE HEREBY SPECIFICALLY DISCLAIMS, OVERRIDES AND EXCLUDES, TO THE FULLEST EXTENT PERMITTED BY LAW, ALL IMPLIED WARRANTIES OF MERCHANTABILITY, SATISFACTORY QUALITY, FITNESS FOR A PARTICULAR PURPOSE AND ALL OTHER WARRANTIES, CONDITIONS, OTHER CONTRACTUAL TERMS, REPRESENTATIONS, INDEMNITIES AND GUARANTEES WITH RESPECT TO THE SERVICES, WHETHER EXPRESS, IMPLIED OR STATUTORY, ARISING BY LAW, CUSTOM, PRIOR ORAL OR WRITTEN STATEMENTS BY THE CLEARINGHOUSE OR ANY OTHER DISCLAIMING PARTY OR OTHERWISE (INCLUDING BUT NOT LIMITED TO, AS TO TITLE, SATISFACTORY QUALITY, ACCURACY, COMPLETENESS, UNINTERRUPTED USE, NON-INFRINGEMENT, TIMELINESS, TRUTHFULNESS, SEQUENCE AND ANY IMPLIED WARRANTIES, CONDITIONS AND OTHER CONTRACTUAL TERMS ARISING FROM TRANSACTION USAGE, COURSE OF DEALING OR COURSE OF PERFORMANCE) RELATING TO ANY SYSTEMS OR SERVICES OF THE CLEARINGHOUSE OR SERVICES, EQUIPMENT OR FACILITIES USED TO SUPPORT SUCH SYSTEMS OR SERVICES. (C). Commodity Stream, LLC CLEARING MAY ACCEPT AND RELY UPON ANY INFORMATION OR INSTRUCTION GIVEN TO Commodity Stream, LLC CLEARING BY A CLEARING PARTICIPANT OR ITS OFFICERS OR AUTHORIZED REPRESENTATIVES, WHICH REASONABLY IS UNDERSTOOD BY Commodity Stream, LLC CLEARING TO HAVE BEEN DELIVERED TO Commodity Stream, LLC CLEARING BY THE CLEARING PARTICIPANT AND SUCH CLEARING PARTICIPANT SHALL INDEMNIFY THE DISCLAIMING PARTIES AND CLEARING PARTICIPANTS AGAINST ANY LOSS, LIABILITY OR EXPENSE AS A RESULT OF ANY ACT DONE IN RELIANCE UPON THE AUTHENTICITY OF ANY INFORMATION OR INSTRUCTION RECEIVED BY Commodity Stream, LLC CLEARING, THE INACCURACY OF THE INFORMATION CONTAINED THEREIN OR EFFECTING TRANSACTIONS IN RELIANCE UPON SUCH INFORMATION OR INSTRUCTION. (D). A CLEARING PARTICIPANT SHALL REIMBURSE Commodity Stream, LLC CLEARING FOR ALL FEES, EXPENSES, CHARGES AND COSTS ASSESSED BY A DEPOSITORY AGAINST Commodity Stream, LLC CLEARING WITH RESPECT TO MARGIN MAINTAINED IN SUCH CLEARING PARTICIPANT\u2019S ACCOUNT, AND Commodity Stream, LLC CLEARING SHALL NOT HAVE ANY OBLIGATION OR RESPONSIBILITY TO PRESERVE, PROTECT, COLLECT OR REALIZE UPON, AND EXCEPT AS PROVIDED IN RULE 403(D), Commodity Stream, LLC CLEARING SHALL NOT BE LIABLE FOR, ANY LOSS OR DIMINUTION IN VALUE OR DEPRECIATION IN MARGIN DEPOSITED BY CLEARING PARTICIPANTS. CLEARING PARTICIPANTS THAT DEPOSIT MARGIN WITH AN APPROVED DEPOSITORY INSTITUTION PURSUANT TO THE RULES SHALL HOLD Commodity Stream, LLC CLEARING HARMLESS FROM ALL LIABILITY, LOSSES AND DAMAGES WHICH MAY RESULT FROM OR ARISE WITH RESPECT TO THE CARE AND SALE OF SUCH MARGIN. (E). ANY OBLIGATION OF Commodity Stream, LLC CLEARING TO A CLEARING PARTICIPANT ARISING FROM A CONTRACT OR FROM ANY PROVISION OF THE RULES SHALL BE SUBJECT TO ALL THE TERMS OF THE RULES, INCLUDING THE SETOFF AND OTHER RIGHTS SET FORTH HEREIN. (F). EXCEPT IN ANY CASE WHERE A DISCLAIMING PARTY HAS BEEN FINALLY ADJUDICATED TO HAVE ENGAGED IN FRAUD OR WILLFUL OR WANTON MISCONDUCT, IN NO EVENT SHALL THE DISCLAIMING PARTIES\u2019 TOTAL COMBINED AGGREGATE LIABILITY FOR ALL CLAIMS, OTHER THAN THOSE ARISING UNDER RULE 501(F), EXCEED $100,000 FOR ALL LOSSES SUFFERED FROM ALL CAUSES ON A SINGLE CALENDAR DAY; $200,000 FOR ALL LOSSES SUFFERED FROM ALL CAUSES IN A SINGLE CALENDAR MONTH; AND $1,000,000 FOR ALL LOSSES SUFFERED FROM ALL CAUSES IN A SINGLE CALENDAR YEAR. IF THE NUMBER OF ALLOWED CLAIMS ARISING OUT OF ANY FAILURES OR MALFUNCTIONS ON A SINGLE DAY, SINGLE MONTH OR SINGLE YEAR CANNOT BE FULLY SATISFIED BECAUSE OF THE ABOVE DOLLAR LIMITATIONS, ALL SUCH CLAIMS SHALL BE LIMITED TO A PRO RATA SHARE OF THE MAXIMUM AMOUNT FOR THE RESPECTIVE PERIOD. (G). THE RIGHTS OF Commodity Stream, LLC CLEARING SET FORTH HEREIN SHALL BE IN ADDITION TO OTHER RIGHTS THAT Commodity Stream, LLC CLEARING MAY HAVE UNDER APPLICABLE LAW AND GOVERNMENTAL REGULATIONS, OTHER PROVISIONS OF THE RULES, ADDITIONAL AGREEMENTS WITH THE CLEARING PARTICIPANT OR ANY OTHER SOURCE.","title":"501. Limitation of Liability"},{"location":"obligations/#502-clearing-participant-default","text":"(A). If a Clearing Participant is in Default, Margin held with respect to such Clearing Participant\u2019s Member Property Accounts, and any other of such Clearing Participant\u2019s assets held by, pledged to or otherwise available to Commodity Stream, LLC, may be applied by Commodity Stream, LLC to discharge the Obligations of such Clearing Participant to Commodity Stream, LLC (including any costs and expenses associated with the liquidation, transfer or management of Contracts held in or for the Member Property Accounts of such Clearing Participant, and any fees, assessments or fines imposed by Commodity Stream, LLC on such Clearing Participant), and Commodity Stream, LLC may cause all Contracts of such Clearing Participant (whether or not carried in a Customer Account) to be closed or offset, transferred to any other Clearing Participant, or otherwise resolved as provided in these Rules. (B). If the Margin held with respect to such Clearing Participant\u2019s Member Property Accounts, and other of such Clearing Participant\u2019s assets held by, pledged to or otherwise available to Commodity Stream, LLC, including any guarantee issued pursuant to these Rules, are insufficient to satisfy the defaulting Clearing Participant\u2019s Obligations to Commodity Stream, LLC after giving effect to the application of such amounts pursuant to paragraph (a), such defaulting Clearing Participant shall continue to be liable therefor. (C). In closing, offsetting, transferring or otherwise resolving the Contracts of a Clearing Participant as provided herein and in Rule 601, Commodity Stream, LLC shall have the right: (i) With respect to Contracts in a Customer Account of such Commodity Stream, LLC Clearing Participant, to set off [x] any proceeds received by Commodity Stream, LLC from the disposition of such Contracts and any property or proceeds thereof deposited with or held by Commodity Stream, LLC as Margin for such account against [y] any amounts paid by Commodity Stream, LLC in the disposition of such Contracts, including any commissions or other losses or expenses incurred in connection therewith or in connection with the liquidation of Margin deposits in such Customer Account and any other amounts owed to Commodity Stream, LLC as a result of transactions in the Customer Account or otherwise lawfully chargeable against such Customer Account; (ii) With respect to the Contracts in any Member Property Accounts of such Clearing Participant, to set off (x) any proceeds received by Commodity Stream, LLC from the disposition of such Contracts, any property or proceeds thereof deposited with or held by Commodity Stream, LLC as Margin for such Member Property Accounts and any other property of the Clearing Participant within the possession or control of Commodity Stream, LLC other than property that has been identified by such Clearing Participant as required to be segregated pursuant to the CEA and CFTC Regulations, against (y) any amounts paid by Commodity Stream, LLC in the disposition of such Contracts, including any commissions or other losses or expenses incurred in connection therewith or in connection with the liquidation of Margin deposits in such Member Property Accounts, and any other Obligations of the Clearing Participant to Commodity Stream, LLC, including Obligations of the Clearing Participant to Commodity Stream, LLC remaining after the setoffs referred to in paragraph (i) above, and any Obligations arising from any other Member Property Accounts maintained by the Clearing Participant with Commodity Stream, LLC; and (iii) To defer closing or otherwise settling such trades and Contracts if, in its discretion, it determines that the closing out of some or all of the suspended Clearing Participant\u2019s trades or Contracts would not be in the best interests of Commodity Stream, LLC or other Clearing Participants, taking into account the size and nature of the positions in question, market conditions prevailing at the time, the potential market effects of such liquidating transactions as might be directed by Commodity Stream, LLC, and such other circumstances as it deems relevant; (iv) Or take any action the Clearinghouse deems proper or in the best interest of the Clearinghouse or its Clearing Participants. (D). For purposes of this Rule, each Default by a Network and/or Clearing Participant will be considered a separate Default. (E). A Network and/or Clearing Participant shall take no action, including but not limited to attempting to obtain a court order, that would interfere with the ability of Commodity Stream, LLC to exercise its rights under the Rules and its agreements with such Network or Clearing Participant.","title":"502. Clearing Participant Default"},{"location":"obligations/#503-investment-of-customer-funds","text":"Funds and assets belonging to Customers that are invested by Commodity Stream, LLC Clearing shall be held in instruments that comply with CFTC Regulations 1.25 and 39.15(e). Non-Customer funds and assets belonging to Clearing Participants that are invested by Commodity Stream, LLC shall be held in instruments that comply with CFTC Regulation 39.15(e).","title":"503. Investment of Customer Funds"},{"location":"openmev-diagrams/","text":"OpenMEV Technical Overview \u00b6 Info Fork Mode \u00b6 Submit Bundle \u00b6 Submit Tx \u00b6","title":"Platform Overview"},{"location":"openmev-diagrams/#openmev-technical-overview","text":"Info","title":"OpenMEV Technical Overview"},{"location":"openmev-diagrams/#fork-mode","text":"","title":"Fork Mode"},{"location":"openmev-diagrams/#submit-bundle","text":"","title":"Submit Bundle"},{"location":"openmev-diagrams/#submit-tx","text":"","title":"Submit Tx"},{"location":"openmev/","text":"OpenMEV \u00b6 Intro Benefits Issues/Support links OpenMEV User Example Engine Summary Application structure Endpoints v1 POST POST Sequencing Transaction Price Service Gas Pricing Service Transaction Details Canary Scanning User Example \u00b6 Info order than sent, we need a mechanism for choosing a canonical id from a list that doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary ordering: the smallest string if possible, otherwise the smallest number, otherwise null. Example order = { Give : ETH , Want : DAI , SlippageLimit : 10 % , Amount : 1000 ETH , OpenMEV : 0xabc ..., FeesIn : DAI , TargetDEX : SushiSwap , Deadline : time . Now () + 1 * time . Minute Signature : sign ( order . SignBytes ()) } When we broadcast this transaction with an arbitrage order, the transaction contains 2 orders: Example transactions = [ { Give : ETH , Want : DAI , SlippageLimit : 10 % , Amount : 1000 ETH , OpenMEV : 0xabc ..., FeesIn : DAI , TargetDEX : SushiSwap , Deadline : time . Now () + 1 * time . Minute Signature : sign ( order . SignBytes ()) }, { Give : DAI , Want : ETH , SlippageLimit : 1 % , Amount : 10 ETH , OpenMEV : 0xabc ..., FeesIn : DAI , TargetDEX : SushiSwap , Deadline : time . Now () + 1 * time . Minute Signature : sign ( order . SignBytes ()), IsFlashbots OpenMEV : true , TransferProfitTo : transactions [ 0 ]. signer } ] The arbitrage profit generated by second order is sent to the msg.sender of the first order. The first order will still lose 5%(assumption) in slippage. Arbitrage profits will rarely be more than the slippage loss. If someone front runs the transaction sent by the OpenMEV: They pay for the gas while post confirmation of transaction the fees for order1 goes to the relayer in the signed order. They lose 5% in slippage as our real user does. Engine \u00b6 OpenMEV uses a batch auction-based matching engine to execute orders. All orders for the given market are collected. Orders beyond their time-in-force are canceled. Orders are placed into separate lists by market side, and aggregate supply and demand curves are calculated. The matching engine discovers the price at which the aggregate supply and demand curves cross, which yields the clearing price. If there is a horizontal cross - i.e., two prices for which aggregate supply and demand are equal - then the clearing price is the midpoint between the two prices. If both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then the side with higher volume is rationed pro-rata based on how much its volume exceeds the other side. For example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%. Orders are sorted based on their price, and order ID. Order IDs are generated at post time and is the only part of the matching engine that is time-dependent. However, the oldest order IDs are matched first so there is no incentive to post an order ahead of someone else\u2019s. Summary \u00b6 Bundle the frontend transactions into blocks Finds miner extracted value (MEV), and then sends them to miners through a direct connection Redistribute the resulting value back to Manifold users who submitted trades by eliminating their transaction cost and to the greater SushiSwap community by further enriching their rewards pool Application structure \u00b6 Route paths: acceptable trading pairs/whitelisted tokens. See manifold.tokenlist.json Subroutes can be defined in separate files within the routes folder and referenced in Controllers should be used to handle HTTP/WS/RPC requests Services handle business logic Endpoints v1 \u00b6 POST \u00b6 /v1/quote A user can get a quote based on the current market conditions and potentially the other transactions that are queued. The only reason for this to be on the backend is if we find value in quoting based on the other transactions in the queue. Details of this quote calculation formula need to be researched. POST \u00b6 /v1/transact A user submits their transaction call after signing it. This is an asynchronous request that will insert the swap transaction in a queue. The call returns a TransactionId. The user can then listen for the result of their transaction via the websocket feed which will report all completed and failed transactions. Sequencing \u00b6 On any additions to the queue, the server runs a sequencing algorithm to optimize MEV, then decides if it is time to submit the transactions to a miner for the current block. !!! attention GC (Garbage Collection) is only on public submitted transactions, not SushiSwap sent transactions! Warning transactions that are not going to be successful due to timeout or slippage. On successful and failed (garbage collected) transactions, the backend will send WebSocket messages to the frontend to notify users. Transaction Price Service \u00b6 !!! tip Visit txprice.com and API The TxPrice Service is an important part of the overall system. Since Gwei pricing is the most important portion of the overall system efficacy it is decoupled from the application itself and run in a separate stack entirely. We inject the Gwei pricing service by loading at runtime via startGasWorker() . note we use the term GasWorker to draw a distinction between gwei and gas . Whereas gwei is understood as a specific SI unit, gas is more abstract. Gas Pricing Service \u00b6 Note : EIP1559 Gas Pricing Compatible For accurate pricing, we trim off the lowest price with the fastest time and highest price with the slowest times until 80% of the data is represented; these are outliers . See the API Service here: https://api.txprice.com !! warning This is for Legacy Transactions /** * * @summary filters transactions from blocks * @note transaction wait duration and gas price taken into consideration */ blocks . forEach (( block ) => { block . transactions . forEach (( tx ) => { const price = parseFloat ( ethers . utils . formatUnits ( tx . gasPrice , \"gwei\" )); const duration = tx . waitDuration ; /** * * @summary Purge anything that takes over 5 minutes * @param duration * @type {seconds} * @exports TransactionTimeDuration */ if ( duration > ( 60 * 60 )) { return ; } if ( duration < ( 1 * 60 )) { data . fast . push ( price ); } else if ( duration < ( 5 * 60 )) { data . medium . push ( price ); } else { data . slow . push ( price ); } Transaction Details \u00b6 /** * Add the transaction details * @const diff * @param waitDuration * @param dataLength * @param gasLimit * @param value */ const diff = timestamp - seenTime ; txs . push ({ w : diff , // waitDuration, not a delta but difference d : ethers . utils . hexDataLength ( tx . data ), // dataLength l : tx . gasLimit . toString (), // gasLimit p : ethers . utils . formatUnits ( tx . gasPrice , 'gwei' ), // gasPrice v : ethers . utils . formatUnits ( tx . value ), // value }); Canary Scanning \u00b6 Failsafe guard // Canary scanning (check every second) // If we go too long without a ne block or a new transaction, it indicates the // underlying connection to a backend has probably disconnected. setInterval (() => { const delta = getTime () - canaryTimer ; if ( delta > MAX_DISCONNECT ) { console . log ( `Canary: forcing restart...` ); process . exit (); } }, 1000 ). unref (); How to subscribe to gas price changes import { Container } from 'typedi' ; import EventConstants from '@constants/events' ; import EventEmitter from 'events' ; const { GAS_CHANGE } = EventConstants ; const events : EventEmitter = Container . get ( 'eventEmitter' ); events . on ( GAS_CHANGE , ( newGasPrice ) => {});","title":"Overview"},{"location":"openmev/#openmev","text":"Intro Benefits Issues/Support links OpenMEV User Example Engine Summary Application structure Endpoints v1 POST POST Sequencing Transaction Price Service Gas Pricing Service Transaction Details Canary Scanning","title":"OpenMEV"},{"location":"openmev/#user-example","text":"Info order than sent, we need a mechanism for choosing a canonical id from a list that doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary ordering: the smallest string if possible, otherwise the smallest number, otherwise null. Example order = { Give : ETH , Want : DAI , SlippageLimit : 10 % , Amount : 1000 ETH , OpenMEV : 0xabc ..., FeesIn : DAI , TargetDEX : SushiSwap , Deadline : time . Now () + 1 * time . Minute Signature : sign ( order . SignBytes ()) } When we broadcast this transaction with an arbitrage order, the transaction contains 2 orders: Example transactions = [ { Give : ETH , Want : DAI , SlippageLimit : 10 % , Amount : 1000 ETH , OpenMEV : 0xabc ..., FeesIn : DAI , TargetDEX : SushiSwap , Deadline : time . Now () + 1 * time . Minute Signature : sign ( order . SignBytes ()) }, { Give : DAI , Want : ETH , SlippageLimit : 1 % , Amount : 10 ETH , OpenMEV : 0xabc ..., FeesIn : DAI , TargetDEX : SushiSwap , Deadline : time . Now () + 1 * time . Minute Signature : sign ( order . SignBytes ()), IsFlashbots OpenMEV : true , TransferProfitTo : transactions [ 0 ]. signer } ] The arbitrage profit generated by second order is sent to the msg.sender of the first order. The first order will still lose 5%(assumption) in slippage. Arbitrage profits will rarely be more than the slippage loss. If someone front runs the transaction sent by the OpenMEV: They pay for the gas while post confirmation of transaction the fees for order1 goes to the relayer in the signed order. They lose 5% in slippage as our real user does.","title":"User Example"},{"location":"openmev/#engine","text":"OpenMEV uses a batch auction-based matching engine to execute orders. All orders for the given market are collected. Orders beyond their time-in-force are canceled. Orders are placed into separate lists by market side, and aggregate supply and demand curves are calculated. The matching engine discovers the price at which the aggregate supply and demand curves cross, which yields the clearing price. If there is a horizontal cross - i.e., two prices for which aggregate supply and demand are equal - then the clearing price is the midpoint between the two prices. If both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then the side with higher volume is rationed pro-rata based on how much its volume exceeds the other side. For example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%. Orders are sorted based on their price, and order ID. Order IDs are generated at post time and is the only part of the matching engine that is time-dependent. However, the oldest order IDs are matched first so there is no incentive to post an order ahead of someone else\u2019s.","title":"Engine"},{"location":"openmev/#summary","text":"Bundle the frontend transactions into blocks Finds miner extracted value (MEV), and then sends them to miners through a direct connection Redistribute the resulting value back to Manifold users who submitted trades by eliminating their transaction cost and to the greater SushiSwap community by further enriching their rewards pool","title":"Summary"},{"location":"openmev/#application-structure","text":"Route paths: acceptable trading pairs/whitelisted tokens. See manifold.tokenlist.json Subroutes can be defined in separate files within the routes folder and referenced in Controllers should be used to handle HTTP/WS/RPC requests Services handle business logic","title":"Application structure"},{"location":"openmev/#endpoints-v1","text":"","title":"Endpoints v1"},{"location":"openmev/#post","text":"/v1/quote A user can get a quote based on the current market conditions and potentially the other transactions that are queued. The only reason for this to be on the backend is if we find value in quoting based on the other transactions in the queue. Details of this quote calculation formula need to be researched.","title":"POST"},{"location":"openmev/#post_1","text":"/v1/transact A user submits their transaction call after signing it. This is an asynchronous request that will insert the swap transaction in a queue. The call returns a TransactionId. The user can then listen for the result of their transaction via the websocket feed which will report all completed and failed transactions.","title":"POST"},{"location":"openmev/#sequencing","text":"On any additions to the queue, the server runs a sequencing algorithm to optimize MEV, then decides if it is time to submit the transactions to a miner for the current block. !!! attention GC (Garbage Collection) is only on public submitted transactions, not SushiSwap sent transactions! Warning transactions that are not going to be successful due to timeout or slippage. On successful and failed (garbage collected) transactions, the backend will send WebSocket messages to the frontend to notify users.","title":"Sequencing"},{"location":"openmev/#transaction-price-service","text":"!!! tip Visit txprice.com and API The TxPrice Service is an important part of the overall system. Since Gwei pricing is the most important portion of the overall system efficacy it is decoupled from the application itself and run in a separate stack entirely. We inject the Gwei pricing service by loading at runtime via startGasWorker() . note we use the term GasWorker to draw a distinction between gwei and gas . Whereas gwei is understood as a specific SI unit, gas is more abstract.","title":"Transaction Price Service"},{"location":"openmev/#gas-pricing-service","text":"Note : EIP1559 Gas Pricing Compatible For accurate pricing, we trim off the lowest price with the fastest time and highest price with the slowest times until 80% of the data is represented; these are outliers . See the API Service here: https://api.txprice.com !! warning This is for Legacy Transactions /** * * @summary filters transactions from blocks * @note transaction wait duration and gas price taken into consideration */ blocks . forEach (( block ) => { block . transactions . forEach (( tx ) => { const price = parseFloat ( ethers . utils . formatUnits ( tx . gasPrice , \"gwei\" )); const duration = tx . waitDuration ; /** * * @summary Purge anything that takes over 5 minutes * @param duration * @type {seconds} * @exports TransactionTimeDuration */ if ( duration > ( 60 * 60 )) { return ; } if ( duration < ( 1 * 60 )) { data . fast . push ( price ); } else if ( duration < ( 5 * 60 )) { data . medium . push ( price ); } else { data . slow . push ( price ); }","title":"Gas Pricing Service"},{"location":"openmev/#transaction-details","text":"/** * Add the transaction details * @const diff * @param waitDuration * @param dataLength * @param gasLimit * @param value */ const diff = timestamp - seenTime ; txs . push ({ w : diff , // waitDuration, not a delta but difference d : ethers . utils . hexDataLength ( tx . data ), // dataLength l : tx . gasLimit . toString (), // gasLimit p : ethers . utils . formatUnits ( tx . gasPrice , 'gwei' ), // gasPrice v : ethers . utils . formatUnits ( tx . value ), // value });","title":"Transaction Details"},{"location":"openmev/#canary-scanning","text":"Failsafe guard // Canary scanning (check every second) // If we go too long without a ne block or a new transaction, it indicates the // underlying connection to a backend has probably disconnected. setInterval (() => { const delta = getTime () - canaryTimer ; if ( delta > MAX_DISCONNECT ) { console . log ( `Canary: forcing restart...` ); process . exit (); } }, 1000 ). unref (); How to subscribe to gas price changes import { Container } from 'typedi' ; import EventConstants from '@constants/events' ; import EventEmitter from 'events' ; const { GAS_CHANGE } = EventConstants ; const events : EventEmitter = Container . get ( 'eventEmitter' ); events . on ( GAS_CHANGE , ( newGasPrice ) => {});","title":"Canary Scanning"},{"location":"refunder/","text":"Proxy Gas Refunder \u00b6 A generic contract system for reliably refunding the gas costs of transactions. The purpose of the project is to: Enable Protocols to specify what contract calls they are willing to sponsor with a set of limitations (e.g gas price) Enable anyone to submit transactions that are eligible for refunding and get their transaction costs reimbursed. Contracts \u00b6 There are 3 major contracts: Refunder factory Refunder GatewayProxy Refunder Factory \u00b6 Factory contract used for the deployment of Refunder contracts. Anyone is able to deploy a refunder contract and configure it for its own needs. RefunderFactory is aware of the GateWayProxy and its interface. On deployment: msg.sender is the initial owner of the Refunder contract. the deployed Refunder contract is added to the set of registered refunders in the GatewayProxy via the GatewayProxy.addRefunder function. Refunder \u00b6 Refunder contract is a standalone, completely independent contract that represents the interest of a given protocol/entity that wants to sponsor a set of function calls. The contract: is ownable . Initially set to the msg.sender that calls the factory Holds ETH for gas cost reimbursements has a map(address, bool) of whitelisted GatewayProxy contracts has a map(address -> map(bytes4, uint256)) of whitelisted refundableCalls . The key of the outer map is a \"whitelisted\" contract address . Calls are represented by the function's signature. The keys of the inner map ( bytes4 ) are calculated as keccak256('functionName(params)') . For example, if a given refunder contract allows for refunding of ERC20 approve tx, the key of the inner map would be bytes4(keccak256(approve(address,uint256)) . The value ( uint256 ) of the inner map ( map(bytes4, uint256) ) represents the estimated gas costs of refunding users for that specific contract call. NOTE: this is not the gas costs that will be reimbursed to the msg.sender , but the expected gas costs only for calling refund with those arguments. Interface \u00b6 Note: Function calls must be nonReentrant // @param isEligible - Returns true/false whether the specified contract call is eligible for gas refund function isEligible ( address targetContract , bytes4 interfaceId , uint256 gasPrice ) external returns ( bool ) // @param getRefundCost - Returns the `expected` gas costs for executing the `refund` with the specified arguments function getRefundCost ( address targetContract , bytes4 interfaceId , uint256 gasPrice ) external returns ( uint256 ) // @param refund - Refunds the sender, calling the target contract's function function refund ( address sender , address target , bytes4 interfaceId , uint256 amount ) external returns ( bool ) // @param withdraw - Withdraws ETH from the Refunder contract function withdraw ( uint256 amount ) Context \u00b6 abstract contract Context { function _msgSender () internal view virtual returns ( address ) { return msg.sender ; } function _msgData () internal view virtual returns ( bytes calldata ) { this ; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691 return msg.data ; } } GatewayProxy \u00b6 The GatewayProxy contract is a singleton contract used to forward the provided contract call data (e.g raw msg + signature) to the target contract and request a refund for the msg.sender afterwards from the responsible Refunder contract. Note v1 should implement the factory/registry pattern The contract has a map(address, bool) of the deployed refunder contracts. Anyone is able to add addresses to the map if they support the required Refunder interface. Interface \u00b6 Note v1 should implement the factory/registry pattern // Provides the `refunder` of the call, the target contract and the call data to be passed. Refunder reimburses the gas costs of the msg sender function supplyAndRefund ( address refunder , address target , bytes data ) // Adds new refunder in the `refunders` map. Internally this function calls the `refunder.refundGasCost` function to set the appropriate value in the `refunders` map function addRefunder ( address refunder ) Pseudo-code \u00b6 Refund calculations modifier netGasCost ( targetContract , interfaceId ) { uint256 gasProvided = gasLeft (); uint256 refundCost = refunder . getRefundCost ( targetContract , interfaceId , tx.gasprice ) // FIXME - non-reentrance _ ; uint256 gasUsedSoFar = gasProvided - gasLeft (); refundAmount = ( gasUsedSoFar + refundCost ) * tx.gasprice ; refunder . refund ( msg.sender , targetContract , interfaceId , refundAmount ); } getRefundCost information is required in order for the GatewayProxy to know how much will be the additional cost for the actual refund call NOTE: interfaceId is the first 4 bytes of the provided bytes data Supply and Refund ( bool success , bytes memory returnData ) = target . call ( data ) // @dev forwarding value","title":"Gas Rebating"},{"location":"refunder/#proxy-gas-refunder","text":"A generic contract system for reliably refunding the gas costs of transactions. The purpose of the project is to: Enable Protocols to specify what contract calls they are willing to sponsor with a set of limitations (e.g gas price) Enable anyone to submit transactions that are eligible for refunding and get their transaction costs reimbursed.","title":"Proxy Gas Refunder"},{"location":"refunder/#contracts","text":"There are 3 major contracts: Refunder factory Refunder GatewayProxy","title":"Contracts"},{"location":"refunder/#refunder-factory","text":"Factory contract used for the deployment of Refunder contracts. Anyone is able to deploy a refunder contract and configure it for its own needs. RefunderFactory is aware of the GateWayProxy and its interface. On deployment: msg.sender is the initial owner of the Refunder contract. the deployed Refunder contract is added to the set of registered refunders in the GatewayProxy via the GatewayProxy.addRefunder function.","title":"Refunder Factory"},{"location":"refunder/#refunder","text":"Refunder contract is a standalone, completely independent contract that represents the interest of a given protocol/entity that wants to sponsor a set of function calls. The contract: is ownable . Initially set to the msg.sender that calls the factory Holds ETH for gas cost reimbursements has a map(address, bool) of whitelisted GatewayProxy contracts has a map(address -> map(bytes4, uint256)) of whitelisted refundableCalls . The key of the outer map is a \"whitelisted\" contract address . Calls are represented by the function's signature. The keys of the inner map ( bytes4 ) are calculated as keccak256('functionName(params)') . For example, if a given refunder contract allows for refunding of ERC20 approve tx, the key of the inner map would be bytes4(keccak256(approve(address,uint256)) . The value ( uint256 ) of the inner map ( map(bytes4, uint256) ) represents the estimated gas costs of refunding users for that specific contract call. NOTE: this is not the gas costs that will be reimbursed to the msg.sender , but the expected gas costs only for calling refund with those arguments.","title":"Refunder"},{"location":"refunder/#interface","text":"Note: Function calls must be nonReentrant // @param isEligible - Returns true/false whether the specified contract call is eligible for gas refund function isEligible ( address targetContract , bytes4 interfaceId , uint256 gasPrice ) external returns ( bool ) // @param getRefundCost - Returns the `expected` gas costs for executing the `refund` with the specified arguments function getRefundCost ( address targetContract , bytes4 interfaceId , uint256 gasPrice ) external returns ( uint256 ) // @param refund - Refunds the sender, calling the target contract's function function refund ( address sender , address target , bytes4 interfaceId , uint256 amount ) external returns ( bool ) // @param withdraw - Withdraws ETH from the Refunder contract function withdraw ( uint256 amount )","title":"Interface"},{"location":"refunder/#context","text":"abstract contract Context { function _msgSender () internal view virtual returns ( address ) { return msg.sender ; } function _msgData () internal view virtual returns ( bytes calldata ) { this ; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691 return msg.data ; } }","title":"Context"},{"location":"refunder/#gatewayproxy","text":"The GatewayProxy contract is a singleton contract used to forward the provided contract call data (e.g raw msg + signature) to the target contract and request a refund for the msg.sender afterwards from the responsible Refunder contract. Note v1 should implement the factory/registry pattern The contract has a map(address, bool) of the deployed refunder contracts. Anyone is able to add addresses to the map if they support the required Refunder interface.","title":"GatewayProxy"},{"location":"refunder/#interface_1","text":"Note v1 should implement the factory/registry pattern // Provides the `refunder` of the call, the target contract and the call data to be passed. Refunder reimburses the gas costs of the msg sender function supplyAndRefund ( address refunder , address target , bytes data ) // Adds new refunder in the `refunders` map. Internally this function calls the `refunder.refundGasCost` function to set the appropriate value in the `refunders` map function addRefunder ( address refunder )","title":"Interface"},{"location":"refunder/#pseudo-code","text":"Refund calculations modifier netGasCost ( targetContract , interfaceId ) { uint256 gasProvided = gasLeft (); uint256 refundCost = refunder . getRefundCost ( targetContract , interfaceId , tx.gasprice ) // FIXME - non-reentrance _ ; uint256 gasUsedSoFar = gasProvided - gasLeft (); refundAmount = ( gasUsedSoFar + refundCost ) * tx.gasprice ; refunder . refund ( msg.sender , targetContract , interfaceId , refundAmount ); } getRefundCost information is required in order for the GatewayProxy to know how much will be the additional cost for the actual refund call NOTE: interfaceId is the first 4 bytes of the provided bytes data Supply and Refund ( bool success , bytes memory returnData ) = target . call ( data ) // @dev forwarding value","title":"Pseudo-code"},{"location":"strategies/","text":"Overview \u00b6 Warning this documentation is in an active rewrite 0 - Ashbys Law \u00b6 You do not rise to the level of your goals. You fall to the level of your systems.\u201d \u2014 James Clear Law of requisite variety If a system is to be stable, the number of states of its control mechanism must be greater than or equal to the number of states in the system being controlled. Ashby states the law as \"variety can destroy variety\". 1 - Building better systems, not 'better goals' \u00b6 Building better systems, not 'better goals' 2 - Actions - Reactive or Proactive \u00b6 ${2} Building better actions? 3 - Identity is the Thesis \u00b6 ${3} Stratagies as an 'Identity' or 'Thesis' 4 - Decision Fatigue and Singular Priority \u00b6 ${4} Singular Priorities / Decision Fatigue 5 - Aggregation of Marginal Gains \u00b6 1% improvement 230 days a year is a 10 times improvement Number of Blocks Empty Block Order per Gas Price 0.7853 Order per Parity Default 384,150 0.1620 Unknown Ordering 69,589 0.0293 Total 2,372,084 1.0000 Strategy Column 2 Ratio Text 55,545 0.0234 Design Pattern Axioms \u00b6 Pattern \u00b6 Strategies that addresses a problem that has not been define Strategies that addresses a problem that no longer exist The strategies addresses more than one problem Strategies that has no stated purpose The language of the strategies is vague or complex Strategies is unable to achieve its stated goa Anti-Pattern \u00b6 Strategies that address problems that have not been define Strategies that address problems that no longer exis Strategies that address more than one problem in different domain Strategies that lack a stated, measurable problem solving the goal, or purpos Strategies that fail to achieve their goal or lack stated goal Strategies that lack a citation of reference Strategies whose burdens are greater than their problem-solving benefi Strategies whose problem-solving benefit and burdens are equa Strategies whose results cannot be measure Strategies that interfere with other strategie Strategies that duplicate other strategie Requires Revision \u00b6 Strategies that are not enforced Strategies that violate human rights Strategies that are overly vague or complex Strategies that have not undergone QA analysis within a specified time fram","title":"Strategies"},{"location":"strategies/#overview","text":"Warning this documentation is in an active rewrite","title":"Overview"},{"location":"strategies/#0-ashbys-law","text":"You do not rise to the level of your goals. You fall to the level of your systems.\u201d \u2014 James Clear Law of requisite variety If a system is to be stable, the number of states of its control mechanism must be greater than or equal to the number of states in the system being controlled. Ashby states the law as \"variety can destroy variety\".","title":"0 - Ashbys Law"},{"location":"strategies/#1-building-better-systems-not-better-goals","text":"Building better systems, not 'better goals'","title":"1 - Building better systems, not 'better goals'"},{"location":"strategies/#2-actions-reactive-or-proactive","text":"${2} Building better actions?","title":"2 - Actions - Reactive or Proactive"},{"location":"strategies/#3-identity-is-the-thesis","text":"${3} Stratagies as an 'Identity' or 'Thesis'","title":"3 - Identity is the Thesis"},{"location":"strategies/#4-decision-fatigue-and-singular-priority","text":"${4} Singular Priorities / Decision Fatigue","title":"4 - Decision Fatigue and Singular Priority"},{"location":"strategies/#5-aggregation-of-marginal-gains","text":"1% improvement 230 days a year is a 10 times improvement Number of Blocks Empty Block Order per Gas Price 0.7853 Order per Parity Default 384,150 0.1620 Unknown Ordering 69,589 0.0293 Total 2,372,084 1.0000 Strategy Column 2 Ratio Text 55,545 0.0234","title":"5 -  Aggregation of Marginal Gains"},{"location":"strategies/#design-pattern-axioms","text":"","title":"Design Pattern Axioms"},{"location":"strategies/#pattern","text":"Strategies that addresses a problem that has not been define Strategies that addresses a problem that no longer exist The strategies addresses more than one problem Strategies that has no stated purpose The language of the strategies is vague or complex Strategies is unable to achieve its stated goa","title":"Pattern    "},{"location":"strategies/#anti-pattern","text":"Strategies that address problems that have not been define Strategies that address problems that no longer exis Strategies that address more than one problem in different domain Strategies that lack a stated, measurable problem solving the goal, or purpos Strategies that fail to achieve their goal or lack stated goal Strategies that lack a citation of reference Strategies whose burdens are greater than their problem-solving benefi Strategies whose problem-solving benefit and burdens are equa Strategies whose results cannot be measure Strategies that interfere with other strategie Strategies that duplicate other strategie","title":"Anti-Pattern   "},{"location":"strategies/#requires-revision","text":"Strategies that are not enforced Strategies that violate human rights Strategies that are overly vague or complex Strategies that have not undergone QA analysis within a specified time fram","title":"Requires Revision     "},{"location":"sushi-help/","text":"SushiSwap Help \u00b6","title":"Help and Support"},{"location":"sushi-help/#sushiswap-help","text":"","title":"SushiSwap Help"},{"location":"sushi-intro/","text":"Sushiswap \u00b6 OpenMEV and Sushiswap work together to recapture lost MEV profits so that Sushi traders can trade for free (up to 95%) on the exchange. This is not gasless transactions, these are paid rebate transactions! You get paid to trade more using OpenMEV. Trading for Free on Sushi.com \u00b6 baseFee amount is subject to transaction cost rebates Transactions with a slippage tolerance of 1% or higher are eligible for gas refunds Refunds are paid out in ETH/WETH/xSUSHI It can take up to 35 blocks to receive a refund Engine \u00b6 OpenMEV Engine uses a batch auction-based matching engine to execute orders. Batch auctions were chosen to reduce the impact of frontrunning on the exchange. All orders for the given market are collected. Orders beyond their time-in-force are canceled. Orders are placed into separate lists by market side, and aggregate supply and demand curves are calculated. The matching engine discovers the price at which the aggregate supply and demand curves cross, which yields the clearing price. If there is a horizontal cross - i.e., two prices for which aggregate supply and demand are equal - then the clearing price is the midpoint between the two prices. If both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then the side with higher volume is rationed pro-rata based on how much its volume exceeds the other side. For example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%. Orders are sorted based on their price, and order ID. Order IDs are generated at post time and is the only part of the matching engine that is time-dependent. However, the oldest order IDs are matched first so there is no incentive to post an order ahead of someone else\u2019s.","title":"How it works"},{"location":"sushi-intro/#sushiswap","text":"OpenMEV and Sushiswap work together to recapture lost MEV profits so that Sushi traders can trade for free (up to 95%) on the exchange. This is not gasless transactions, these are paid rebate transactions! You get paid to trade more using OpenMEV.","title":"Sushiswap"},{"location":"sushi-intro/#trading-for-free-on-sushicom","text":"baseFee amount is subject to transaction cost rebates Transactions with a slippage tolerance of 1% or higher are eligible for gas refunds Refunds are paid out in ETH/WETH/xSUSHI It can take up to 35 blocks to receive a refund","title":"Trading for Free on Sushi.com"},{"location":"sushi-intro/#engine","text":"OpenMEV Engine uses a batch auction-based matching engine to execute orders. Batch auctions were chosen to reduce the impact of frontrunning on the exchange. All orders for the given market are collected. Orders beyond their time-in-force are canceled. Orders are placed into separate lists by market side, and aggregate supply and demand curves are calculated. The matching engine discovers the price at which the aggregate supply and demand curves cross, which yields the clearing price. If there is a horizontal cross - i.e., two prices for which aggregate supply and demand are equal - then the clearing price is the midpoint between the two prices. If both sides of the market have equal volume, then all orders are completely filled. If one side has more volume than the other, then the side with higher volume is rationed pro-rata based on how much its volume exceeds the other side. For example, if aggregate demand is 100 and aggregate supply is 90, then every order on the demand side of the market will be matched by 90%. Orders are sorted based on their price, and order ID. Order IDs are generated at post time and is the only part of the matching engine that is time-dependent. However, the oldest order IDs are matched first so there is no incentive to post an order ahead of someone else\u2019s.","title":"Engine"},{"location":"sushi-overview/","text":"SushiSwap Overview \u00b6","title":"Overview"},{"location":"sushi-overview/#sushiswap-overview","text":"","title":"SushiSwap Overview"},{"location":"suspensions/","text":"Suspension and Disciplinary Proceedings \u00b6 Overview \u00b6 (A). The Board, Risk Management Committee, or any Exchange Committee may summarily suspend any Clearing Participant (i) if the Clearing Participant is in Default, (ii) upon the discovery of a materially false or misleading representation or warranty made by the Clearing Participant to Commodity Stream, LLC under or in connection with any agreement between Commodity Stream, LLC and the Clearing Participant, (iii) if a breach by the Clearing Participant of the Rules or any of the terms or provisions of any agreement between Commodity Stream, LLC and the Clearing Participant is not remedied promptly after notice from Commodity Stream, LLC, (iv) in the event of a material violation of the Rules of the Exchange or of the Clearinghouse, or (v) if the Board or the Risk Management Committee determines that suspension is necessary for the protection of Commodity Stream, LLC, other Clearing Participants, or the general public (whether or not such Clearing Participant continues to meet the required minimum financial requirements pursuant to the Rules). Notice of Suspension to Participants \u00b6 (B). Notice of Suspension to Network and Clearing Participants Upon the suspension of a Clearing Participant, Commodity Stream, LLC shall as soon as possible notify all Clearing Participants of the suspension. Such notice shall state to the extent practicable in general terms how pending transactions, open positions and other pending matters will be affected and what steps are to be taken in connection therewith. Pending Transactions \u00b6 (C). Pending Transactions Notwithstanding any other provision of the Rules, Commodity Stream, LLC shall have no obligation to accept any transaction of a suspended Network and/or Clearing Participant that was effected after the time at which the Clearing Participant was suspended. In the event a transaction of a suspended Clearing Participant is rejected by Commodity Stream, LLC, Commodity Stream, LLC shall provide notice of such rejection to the other party thereto and such transaction shall be closed by the other party thereto in accordance with the rules of the Exchange. Open Positions \u00b6 (D). Open Positions * Commodity Stream, LLC shall have the right to cause open positions in Contracts in any of the accounts of a suspended Clearing Participant: (i) To be closed in such manner as deemed practicable by Commodity Stream, LLC, in its sole discretion; (ii) To be transferred to the account of one or more other Clearing Participants; (iii) To be offset against each other and, to the extent of any remaining imbalance, against the Contracts of other Clearing Participants; or (iv) To be settled at the Settlement Price for such Contracts, or at such other price or prices as Commodity Stream, LLC may deem fair and reasonable under the circumstances, in which event Commodity Stream, LLC may cause Contracts in the accounts of other Clearing Participants to be settled at such price or prices; (v) Or take any other action with respect to open positions it deems in the best interest of the Clearinghouse or the Clearing Participants. In connection with any action undertaken by Commodity Stream, LLC pursuant to subparagraphs (i) through (iv) above, Commodity Stream, LLC shall have the right to apply the Margin of the applicable Clearing Participant and any other assets of such Clearing Participant held by, pledged to or otherwise available to Commodity Stream, LLC, including any guarantee issued pursuant to these Rules, to discharge the Obligations of such Clearing Participant to Commodity Stream, LLC Clearing (including any costs and expenses associated with the liquidation, transfer or management of Contracts held in or for the accounts of such Network and/or Clearing Participant, and any fees, assessments or fines imposed by Commodity Stream, LLC on such Clearing Participant). Commodity Stream, LLC may delegate to specified Officers or agents of Commodity Stream, LLC the authority to determine, within such guidelines, if any, as Commodity Stream, LLC shall prescribe, the nature and timing of transactions of the type described in subparagraph (i). Notwithstanding the preceding provisions of this paragraph (d), if Commodity Stream, LLC shall determine, taking into account the size and nature of a suspended Clearing Participant\u2019s positions, market conditions prevailing at the time, the potential market effects of liquidating transactions that might be directed by Commodity Stream, LLC, and such other circumstances as Commodity Stream, LLC deems relevant, that the closing out of some or all of the suspended Network and/or Clearing Participant\u2019s positions would not be in the best interests of Commodity Stream, LLC, other Clearing Participants, or the general public, such positions need not be closed out. Protective Action \u00b6 (E). Protective Action If Commodity Stream, LLC (i) is unable, for any reason, to close out in a prompt and orderly manner any positions or to convert to cash any Margin deposits of a suspended Network and/or Clearing Participant, or (ii) elects pursuant to paragraph (d) of this Rule not to close out any such positions, Commodity Stream, LLC may authorize the execution of hedging transactions from time to time for the account of Commodity Stream, LLC, solely for the purpose of reducing the risk to Commodity Stream, LLC resulting from the continued maintenance of such positions or the continued holding of such Margin deposits. Commodity Stream, LLC may delegate to specified Officers or agents of Commodity Stream, LLC the authority to determine, within such guidelines, if any, as Commodity Stream, LLC shall prescribe, the nature and timing of such hedging transactions. Reimbursement of Costs and Expenses \u00b6 (F). Reimbursement of Costs and Expenses Any costs or expenses, including losses, sustained by Commodity Stream, LLC in connection with transactions effected for its account pursuant to this Rule shall be charged to the suspended Clearing Participant, and any gains realized on such transactions shall be credited to such Clearing Participant; provided, however, that costs, expenses, and gains allocable to the hedging of positions in a Customer Account shall be charged or credited, as the case may be, to the Customer Account, and only the excess, if any, of such costs and expenses over the funds available in that account shall be charged to the Clearing Participant. Reasonable allocations of costs, expenses, and gains among accounts made by Commodity Stream, LLC for the purpose of implementing the proviso to the preceding sentence shall be binding on the Clearing Participant and any persons claiming through the Clearing Participant and their respective successors and assigns. 602. Right of Appeal \u00b6 A Clearing Participant suspended pursuant to Rule 601 shall be entitled, upon request within five Business Days after the date of its suspension, to a written statement of the grounds for its suspension and shall have the right to appeal its suspension in accordance with the following procedure: (A). A suspended Clearing Participant may appeal its suspension by filing a written notice of appeal within five Business Days after the date of its receipt of a written statement of the grounds for its suspension. (B). Appeals shall be considered and decided by the Appeal Panel. Appeals shall be heard as promptly as possible, and in no event more than five Business Days after the filing of the notice of appeal. The appellant shall be notified of the time, place and date of the hearing not less than three Business Days in advance of such date. At the hearing, the appellant shall be afforded an opportunity to be heard and to present evidence in its own behalf, and may, if it so desires, be represented by counsel. As promptly as possible after the hearing, the Appeal Panel shall, by the vote of a majority of its members, affirm or reverse the suspension or modify the terms thereof. The appellant shall be notified in writing of the Appeal Panel\u2019s decision; and if the decision shall have been to affirm or modify the suspension, the appellant shall be given a written statement of the grounds therefor. (C). Any decision by the Appeal Panel to affirm or modify a suspension shall be reviewable by the Board on its own motion or on written demand by the appellant filed with Commodity Stream, LLC within three Business Days after receipt of notice of the Appeal Panel\u2019s decision. The Board may afford the appellant a further opportunity to be heard or to present evidence. The appellant shall be notified in writing of the decision of the Board; and if the decision shall have been to affirm or modify the suspension, the appellant shall be given a written statement of the grounds therefor. (D). The filing of an appeal pursuant to this Rule shall not impair the validity or stay the effect of the suspension appealed from. The reversal or modification of a suspension shall not invalidate any acts of Commodity Stream, LLC taken pursuant to such suspension prior to such reversal or modification, and the rights of any person which may arise out of any such acts shall not be affected by such reversal or modification. (E). A record shall be kept of any hearing held pursuant hereto. The cost of the transcript may, in the discretion of the body holding the hearing, be charged in whole or in part to the suspended Clearing Participant in the event that the suspension is finally affirmed. 603. Sanctions from Disciplinary Proceedings \u00b6 (A). Commodity Stream, LLC may censure, suspend, expel or limit the activities, functions or operations of, and/or impose a fine on (each a \u201csanction\u201d), a Clearing Participant for (i) a violation of the Rules or its agreements with Commodity Stream, LLC or the Exchange, (ii) any neglect or refusal by such Clearing Participant to comply with any applicable order or direction of Commodity Stream, LLC or the Exchange, (iii) any error, delay or other conduct that materially and adversely affects the operations of Commodity Stream, LLC or Commodity Stream, LLC Exchange, (iv) a violation of the rules of the Exchange, or (v) a failure to provide adequate personnel or facilities, where applicable, for its transactions with Commodity Stream, LLC. (B). Commodity Stream, LLC shall provide prompt notice to the CFTC/and or any other governance Board of any action taken in accordance with this Rule 603. 604. Procedures for Disciplinary Proceedings \u00b6 (A). Before any sanction is imposed pursuant to Rule 603, Commodity Stream, LLC shall furnish the person against whom the sanction is sought to be imposed (\u201cRespondent\u201d) with a concise written statement of the charges against the Respondent. The Respondent shall have ten Business Days after the service of such statement to file with Commodity Stream, LLC a written answer thereto. The answer shall admit or deny each allegation contained in the statement of charges and may also contain any defense which the Respondent wishes to submit. Allegations contained in the statement of charges which are not denied in the answer shall be deemed to have been admitted, and any defense not raised in the answer shall be deemed to have been waived. If an answer is not filed within the time prescribed above or any extension thereof granted pursuant to paragraph (d) of this Rule, the allegations contained in the statement of charges shall be deemed to have been admitted, and the sanction specified in the final request shall be imposed without further proceedings and the Respondent shall be notified thereof in writing. If an answer is timely filed, Commodity Stream, LLC shall (unless the Respondent and Commodity Stream, LLC shall have stipulated to the imposition of an agreed sanction) schedule a hearing before the Disciplinary Panel. The Respondent shall be given not less than three Business Days advance notice of the place and time of such hearing. At the hearing, the Respondent shall be afforded the opportunity to be heard and to present evidence in its behalf and may be represented by counsel. A record of the hearing shall be prepared and the cost of the transcript may, in the discretion of the Disciplinary Panel, be charged in whole or in part to the Respondent in the event any sanction is imposed on the Respondent. As soon as practicable after the conclusion of the hearing, the Disciplinary Panel shall furnish the Respondent and the Board with a written statement of its decision. If the decision shall have been to impose a disciplinary sanction, the written statement shall set forth (i) any act or practice in which the Respondent has been found to have engaged, or which the Respondent has been found to have omitted; (ii) the specific provisions of the Rules which any such act, practice or omission has been deemed to violate; and (iii) the sanction imposed and the reasons therefor. (B). In the event that (i) the Disciplinary Panel censures, fines, suspends, expels or limits the activities, functions or operations of a Respondent, or (ii) determines not to impose any disciplinary measures on a Respondent, the Respondent, in the case of (i) above, or the President, in the case of (ii) above, may apply for review to the Board, by written motion filed with Commodity Stream, LLC within five Business Days after issuance of the Disciplinary Panel\u2019s written statement of its decision. (C). The granting of any such motion shall be within the discretion of the Board. In addition, the Board may determine to review any such action by the Disciplinary Panel on its own motion. Review by the Board shall be on the basis of the written record of the proceedings in which the sanction was imposed, but the Board may, in its discretion, afford the Respondent a further opportunity to be heard or to present evidence. A record shall be kept of any such further proceedings. Based upon such review, the Board may affirm, reverse or modify, in whole or in part, the decision of the Disciplinary Panel. The Respondent shall be notified in writing of the decision of the Board and if the decision shall have been to affirm or modify the imposition of any disciplinary sanction, the Respondent shall be given a written statement setting forth (i) any act or practice in which the Respondent has been found to have engaged, or which the Respondent has been found to have omitted; (ii) the Rules which any such act, practice or omission has been deemed to violate; and (iii) the sanction imposed and the reasons therefor. (D). Any time limit set forth in this Rule may be extended by the body having jurisdiction over the matter in respect of which the time limit is imposed. (E). Any action taken by the Disciplinary Panel hereunder shall be deemed to be final upon (i) expiration of the time provided for the filing of a motion for review, or any extension thereof granted pursuant to paragraph (d) hereof; or (ii) if a motion for review is timely filed, when the Respondent is notified of the denial of the motion or the decision of the Board on review, as the case may be; or (iii) if the Board shall determine on its own motion to review the action by the Disciplinary Panel, when the Respondent is notified of the decision of the Board on review. (F). The summary suspension of a Clearing Participant pursuant to Rule 601 shall not be deemed to be a \u201csanction\u201d within the meaning of this Rule, and the provisions of this Rule shall be inapplicable to any such summary suspension. 605. Discipline by Other Self-Regulatory Organizations \u00b6 (A). At the discretion of the Clearinghouse, any suspected violation of these Rules may be referred to the enforcement staff of the Exchange. (B). Any inquiry, investigation or disciplinary action resulting from a suspected violation of these Rules may be handled by Clearinghouse personnel, Exchange personnel, or personnel that serve in roles at both the Clearinghouse and the Exchange. (C). Nothing in this Chapter 6 shall affect the right of any Self-Regulatory Organization to discipline its members pursuant to the provisions of its rules for a violation of the Rules of Commodity Stream, LLC. ## 606. Restriction on or Termination of Clearing Privileges. (A). If [x] a Removal Event occurs with respect to a Clearing Participant, or [y]Commodity Stream, LLC determines that the financial or operational condition of a Clearing Participant or one of its affiliates is such that to allow the Clearing Participant to continue its operation as a Clearing Participant could adversely affect Commodity Stream, LLC or cleared markets (whether or not such Clearing Participant continues to meet the required minimum financial requirements, if applicable), Commodity Stream, LLC may: (i) Allow such Clearing Participant (in the case of an Commodity Stream, LLC Clearing Participant handling Customer Accounts) to submit Contracts for clearing solely for its Member Property Account; (ii) Limit or restrict the type of Contracts that may be cleared by such Clearing Participant in any of its Accounts with Commodity Stream, LLC; (iii) Limit or restrict the number of Contracts that are permitted to be maintained by such Clearing Participant in any of its Accounts with Commodity Stream, LLC; (iv) Decline to accept new trades or positions in Contracts for the Accounts of the Clearing Participant; (v) Increase such Clearing Participant\u2019s Margin requirements and/or require such Clearing Participant to deposit the same in cash or Eligible Securities in proportions different than those that are applicable to Clearing Participants generally;","title":"Suspensions"},{"location":"suspensions/#suspension-and-disciplinary-proceedings","text":"","title":"Suspension and Disciplinary Proceedings"},{"location":"suspensions/#overview","text":"(A). The Board, Risk Management Committee, or any Exchange Committee may summarily suspend any Clearing Participant (i) if the Clearing Participant is in Default, (ii) upon the discovery of a materially false or misleading representation or warranty made by the Clearing Participant to Commodity Stream, LLC under or in connection with any agreement between Commodity Stream, LLC and the Clearing Participant, (iii) if a breach by the Clearing Participant of the Rules or any of the terms or provisions of any agreement between Commodity Stream, LLC and the Clearing Participant is not remedied promptly after notice from Commodity Stream, LLC, (iv) in the event of a material violation of the Rules of the Exchange or of the Clearinghouse, or (v) if the Board or the Risk Management Committee determines that suspension is necessary for the protection of Commodity Stream, LLC, other Clearing Participants, or the general public (whether or not such Clearing Participant continues to meet the required minimum financial requirements pursuant to the Rules).","title":"Overview"},{"location":"suspensions/#notice-of-suspension-to-participants","text":"(B). Notice of Suspension to Network and Clearing Participants Upon the suspension of a Clearing Participant, Commodity Stream, LLC shall as soon as possible notify all Clearing Participants of the suspension. Such notice shall state to the extent practicable in general terms how pending transactions, open positions and other pending matters will be affected and what steps are to be taken in connection therewith.","title":"Notice of Suspension to Participants"},{"location":"suspensions/#pending-transactions","text":"(C). Pending Transactions Notwithstanding any other provision of the Rules, Commodity Stream, LLC shall have no obligation to accept any transaction of a suspended Network and/or Clearing Participant that was effected after the time at which the Clearing Participant was suspended. In the event a transaction of a suspended Clearing Participant is rejected by Commodity Stream, LLC, Commodity Stream, LLC shall provide notice of such rejection to the other party thereto and such transaction shall be closed by the other party thereto in accordance with the rules of the Exchange.","title":"Pending Transactions"},{"location":"suspensions/#open-positions","text":"(D). Open Positions * Commodity Stream, LLC shall have the right to cause open positions in Contracts in any of the accounts of a suspended Clearing Participant: (i) To be closed in such manner as deemed practicable by Commodity Stream, LLC, in its sole discretion; (ii) To be transferred to the account of one or more other Clearing Participants; (iii) To be offset against each other and, to the extent of any remaining imbalance, against the Contracts of other Clearing Participants; or (iv) To be settled at the Settlement Price for such Contracts, or at such other price or prices as Commodity Stream, LLC may deem fair and reasonable under the circumstances, in which event Commodity Stream, LLC may cause Contracts in the accounts of other Clearing Participants to be settled at such price or prices; (v) Or take any other action with respect to open positions it deems in the best interest of the Clearinghouse or the Clearing Participants. In connection with any action undertaken by Commodity Stream, LLC pursuant to subparagraphs (i) through (iv) above, Commodity Stream, LLC shall have the right to apply the Margin of the applicable Clearing Participant and any other assets of such Clearing Participant held by, pledged to or otherwise available to Commodity Stream, LLC, including any guarantee issued pursuant to these Rules, to discharge the Obligations of such Clearing Participant to Commodity Stream, LLC Clearing (including any costs and expenses associated with the liquidation, transfer or management of Contracts held in or for the accounts of such Network and/or Clearing Participant, and any fees, assessments or fines imposed by Commodity Stream, LLC on such Clearing Participant). Commodity Stream, LLC may delegate to specified Officers or agents of Commodity Stream, LLC the authority to determine, within such guidelines, if any, as Commodity Stream, LLC shall prescribe, the nature and timing of transactions of the type described in subparagraph (i). Notwithstanding the preceding provisions of this paragraph (d), if Commodity Stream, LLC shall determine, taking into account the size and nature of a suspended Clearing Participant\u2019s positions, market conditions prevailing at the time, the potential market effects of liquidating transactions that might be directed by Commodity Stream, LLC, and such other circumstances as Commodity Stream, LLC deems relevant, that the closing out of some or all of the suspended Network and/or Clearing Participant\u2019s positions would not be in the best interests of Commodity Stream, LLC, other Clearing Participants, or the general public, such positions need not be closed out.","title":"Open Positions"},{"location":"suspensions/#protective-action","text":"(E). Protective Action If Commodity Stream, LLC (i) is unable, for any reason, to close out in a prompt and orderly manner any positions or to convert to cash any Margin deposits of a suspended Network and/or Clearing Participant, or (ii) elects pursuant to paragraph (d) of this Rule not to close out any such positions, Commodity Stream, LLC may authorize the execution of hedging transactions from time to time for the account of Commodity Stream, LLC, solely for the purpose of reducing the risk to Commodity Stream, LLC resulting from the continued maintenance of such positions or the continued holding of such Margin deposits. Commodity Stream, LLC may delegate to specified Officers or agents of Commodity Stream, LLC the authority to determine, within such guidelines, if any, as Commodity Stream, LLC shall prescribe, the nature and timing of such hedging transactions.","title":"Protective Action"},{"location":"suspensions/#reimbursement-of-costs-and-expenses","text":"(F). Reimbursement of Costs and Expenses Any costs or expenses, including losses, sustained by Commodity Stream, LLC in connection with transactions effected for its account pursuant to this Rule shall be charged to the suspended Clearing Participant, and any gains realized on such transactions shall be credited to such Clearing Participant; provided, however, that costs, expenses, and gains allocable to the hedging of positions in a Customer Account shall be charged or credited, as the case may be, to the Customer Account, and only the excess, if any, of such costs and expenses over the funds available in that account shall be charged to the Clearing Participant. Reasonable allocations of costs, expenses, and gains among accounts made by Commodity Stream, LLC for the purpose of implementing the proviso to the preceding sentence shall be binding on the Clearing Participant and any persons claiming through the Clearing Participant and their respective successors and assigns.","title":"Reimbursement of Costs and Expenses"},{"location":"suspensions/#602-right-of-appeal","text":"A Clearing Participant suspended pursuant to Rule 601 shall be entitled, upon request within five Business Days after the date of its suspension, to a written statement of the grounds for its suspension and shall have the right to appeal its suspension in accordance with the following procedure: (A). A suspended Clearing Participant may appeal its suspension by filing a written notice of appeal within five Business Days after the date of its receipt of a written statement of the grounds for its suspension. (B). Appeals shall be considered and decided by the Appeal Panel. Appeals shall be heard as promptly as possible, and in no event more than five Business Days after the filing of the notice of appeal. The appellant shall be notified of the time, place and date of the hearing not less than three Business Days in advance of such date. At the hearing, the appellant shall be afforded an opportunity to be heard and to present evidence in its own behalf, and may, if it so desires, be represented by counsel. As promptly as possible after the hearing, the Appeal Panel shall, by the vote of a majority of its members, affirm or reverse the suspension or modify the terms thereof. The appellant shall be notified in writing of the Appeal Panel\u2019s decision; and if the decision shall have been to affirm or modify the suspension, the appellant shall be given a written statement of the grounds therefor. (C). Any decision by the Appeal Panel to affirm or modify a suspension shall be reviewable by the Board on its own motion or on written demand by the appellant filed with Commodity Stream, LLC within three Business Days after receipt of notice of the Appeal Panel\u2019s decision. The Board may afford the appellant a further opportunity to be heard or to present evidence. The appellant shall be notified in writing of the decision of the Board; and if the decision shall have been to affirm or modify the suspension, the appellant shall be given a written statement of the grounds therefor. (D). The filing of an appeal pursuant to this Rule shall not impair the validity or stay the effect of the suspension appealed from. The reversal or modification of a suspension shall not invalidate any acts of Commodity Stream, LLC taken pursuant to such suspension prior to such reversal or modification, and the rights of any person which may arise out of any such acts shall not be affected by such reversal or modification. (E). A record shall be kept of any hearing held pursuant hereto. The cost of the transcript may, in the discretion of the body holding the hearing, be charged in whole or in part to the suspended Clearing Participant in the event that the suspension is finally affirmed.","title":"602. Right of Appeal"},{"location":"suspensions/#603-sanctions-from-disciplinary-proceedings","text":"(A). Commodity Stream, LLC may censure, suspend, expel or limit the activities, functions or operations of, and/or impose a fine on (each a \u201csanction\u201d), a Clearing Participant for (i) a violation of the Rules or its agreements with Commodity Stream, LLC or the Exchange, (ii) any neglect or refusal by such Clearing Participant to comply with any applicable order or direction of Commodity Stream, LLC or the Exchange, (iii) any error, delay or other conduct that materially and adversely affects the operations of Commodity Stream, LLC or Commodity Stream, LLC Exchange, (iv) a violation of the rules of the Exchange, or (v) a failure to provide adequate personnel or facilities, where applicable, for its transactions with Commodity Stream, LLC. (B). Commodity Stream, LLC shall provide prompt notice to the CFTC/and or any other governance Board of any action taken in accordance with this Rule 603.","title":"603. Sanctions from Disciplinary Proceedings"},{"location":"suspensions/#604-procedures-for-disciplinary-proceedings","text":"(A). Before any sanction is imposed pursuant to Rule 603, Commodity Stream, LLC shall furnish the person against whom the sanction is sought to be imposed (\u201cRespondent\u201d) with a concise written statement of the charges against the Respondent. The Respondent shall have ten Business Days after the service of such statement to file with Commodity Stream, LLC a written answer thereto. The answer shall admit or deny each allegation contained in the statement of charges and may also contain any defense which the Respondent wishes to submit. Allegations contained in the statement of charges which are not denied in the answer shall be deemed to have been admitted, and any defense not raised in the answer shall be deemed to have been waived. If an answer is not filed within the time prescribed above or any extension thereof granted pursuant to paragraph (d) of this Rule, the allegations contained in the statement of charges shall be deemed to have been admitted, and the sanction specified in the final request shall be imposed without further proceedings and the Respondent shall be notified thereof in writing. If an answer is timely filed, Commodity Stream, LLC shall (unless the Respondent and Commodity Stream, LLC shall have stipulated to the imposition of an agreed sanction) schedule a hearing before the Disciplinary Panel. The Respondent shall be given not less than three Business Days advance notice of the place and time of such hearing. At the hearing, the Respondent shall be afforded the opportunity to be heard and to present evidence in its behalf and may be represented by counsel. A record of the hearing shall be prepared and the cost of the transcript may, in the discretion of the Disciplinary Panel, be charged in whole or in part to the Respondent in the event any sanction is imposed on the Respondent. As soon as practicable after the conclusion of the hearing, the Disciplinary Panel shall furnish the Respondent and the Board with a written statement of its decision. If the decision shall have been to impose a disciplinary sanction, the written statement shall set forth (i) any act or practice in which the Respondent has been found to have engaged, or which the Respondent has been found to have omitted; (ii) the specific provisions of the Rules which any such act, practice or omission has been deemed to violate; and (iii) the sanction imposed and the reasons therefor. (B). In the event that (i) the Disciplinary Panel censures, fines, suspends, expels or limits the activities, functions or operations of a Respondent, or (ii) determines not to impose any disciplinary measures on a Respondent, the Respondent, in the case of (i) above, or the President, in the case of (ii) above, may apply for review to the Board, by written motion filed with Commodity Stream, LLC within five Business Days after issuance of the Disciplinary Panel\u2019s written statement of its decision. (C). The granting of any such motion shall be within the discretion of the Board. In addition, the Board may determine to review any such action by the Disciplinary Panel on its own motion. Review by the Board shall be on the basis of the written record of the proceedings in which the sanction was imposed, but the Board may, in its discretion, afford the Respondent a further opportunity to be heard or to present evidence. A record shall be kept of any such further proceedings. Based upon such review, the Board may affirm, reverse or modify, in whole or in part, the decision of the Disciplinary Panel. The Respondent shall be notified in writing of the decision of the Board and if the decision shall have been to affirm or modify the imposition of any disciplinary sanction, the Respondent shall be given a written statement setting forth (i) any act or practice in which the Respondent has been found to have engaged, or which the Respondent has been found to have omitted; (ii) the Rules which any such act, practice or omission has been deemed to violate; and (iii) the sanction imposed and the reasons therefor. (D). Any time limit set forth in this Rule may be extended by the body having jurisdiction over the matter in respect of which the time limit is imposed. (E). Any action taken by the Disciplinary Panel hereunder shall be deemed to be final upon (i) expiration of the time provided for the filing of a motion for review, or any extension thereof granted pursuant to paragraph (d) hereof; or (ii) if a motion for review is timely filed, when the Respondent is notified of the denial of the motion or the decision of the Board on review, as the case may be; or (iii) if the Board shall determine on its own motion to review the action by the Disciplinary Panel, when the Respondent is notified of the decision of the Board on review. (F). The summary suspension of a Clearing Participant pursuant to Rule 601 shall not be deemed to be a \u201csanction\u201d within the meaning of this Rule, and the provisions of this Rule shall be inapplicable to any such summary suspension.","title":"604. Procedures for Disciplinary Proceedings"},{"location":"suspensions/#605-discipline-by-other-self-regulatory-organizations","text":"(A). At the discretion of the Clearinghouse, any suspected violation of these Rules may be referred to the enforcement staff of the Exchange. (B). Any inquiry, investigation or disciplinary action resulting from a suspected violation of these Rules may be handled by Clearinghouse personnel, Exchange personnel, or personnel that serve in roles at both the Clearinghouse and the Exchange. (C). Nothing in this Chapter 6 shall affect the right of any Self-Regulatory Organization to discipline its members pursuant to the provisions of its rules for a violation of the Rules of Commodity Stream, LLC. ## 606. Restriction on or Termination of Clearing Privileges. (A). If [x] a Removal Event occurs with respect to a Clearing Participant, or [y]Commodity Stream, LLC determines that the financial or operational condition of a Clearing Participant or one of its affiliates is such that to allow the Clearing Participant to continue its operation as a Clearing Participant could adversely affect Commodity Stream, LLC or cleared markets (whether or not such Clearing Participant continues to meet the required minimum financial requirements, if applicable), Commodity Stream, LLC may: (i) Allow such Clearing Participant (in the case of an Commodity Stream, LLC Clearing Participant handling Customer Accounts) to submit Contracts for clearing solely for its Member Property Account; (ii) Limit or restrict the type of Contracts that may be cleared by such Clearing Participant in any of its Accounts with Commodity Stream, LLC; (iii) Limit or restrict the number of Contracts that are permitted to be maintained by such Clearing Participant in any of its Accounts with Commodity Stream, LLC; (iv) Decline to accept new trades or positions in Contracts for the Accounts of the Clearing Participant; (v) Increase such Clearing Participant\u2019s Margin requirements and/or require such Clearing Participant to deposit the same in cash or Eligible Securities in proportions different than those that are applicable to Clearing Participants generally;","title":"605. Discipline by Other Self-Regulatory Organizations"},{"location":"trade-settlement/","text":"Trade and Settlement \u00b6 401. Submission of Trades \u00b6 (A). Upon matching of a trade effected on or pursuant to the rules of the Exchange, the Exchange shall promptly submit to Commodity Stream, LLC a trade report generated by the electronic trading system of the Exchange. The report shall show for each trade (i) the identity of each Clearing Participant and/or Network Participant, (ii) whether bought or sold, (iii) quantity, (iv) delivery month, (v) the price, (vi) whether for house, Customer, or non- Customer account, and (vii) such other information as may be required by Commodity Stream, LLC. (B). If Commodity Stream, LLC determines that any trade report submitted pursuant to this Rule 401 contains a material error or is otherwise not eligible for clearing by Commodity Stream, LLC, Commodity Stream, LLC may reject such trade and notify the Exchange of such rejection, setting forth the basis of such objection. 402. Clearance and Substitution \u00b6 (a) The submission of a Contract (Smart Contract or a Normal Contract) to Commodity Stream, LLC by or on behalf of the buying and selling Clearing Participants shall constitute a request, by such Clearing Participants, for the clearing of such Contract by Commodity Stream, LLC. Upon the acceptance thereof by Commodity Stream, LLC, which ordinarily shall be deemed to occur upon the receipt of matched trade data from the Exchange, the Contract shall be novated and Commodity Stream, LLC shall be substituted as, and assume the position of, seller to the Clearing Participant buying such Contract and buyer from the Clearing Participant selling such Contract. Upon such substitution, such buying and selling Clearing Participants shall be released from their obligations to each other, and Commodity Stream, LLC shall be deemed to have succeeded to all the rights, and to have assumed all the Obligations, of the Clearing Participants that were party to such Contract, in each case as provided in the Rules. (b) Where an Commodity Stream, LLC Clearing Participant and/or Network Participant acts to clear a Contract made for the account of a Customer, the Commodity Stream, LLC Clearing Participant becomes obligated to Commodity Stream, LLC, and Commodity Stream, LLC becomes obligated to the Commodity Stream, LLC Clearing Participant, with respect to such Contract in the same manner and to the same extent as if the Contract were for the account of the Commodity Stream, LLC Clearing Participant. \u00a9 Notwithstanding the provisions of paragraph (a), a trade shall not be accepted for clearing, and Commodity Stream, LLC shall not be substituted for a given Contract, unless the Margin for such Contract is made available to Commodity Stream, LLC, by or for both Clearing Participants, pursuant to Rule 403. 403. Margin \u00b6 (a) Each Network and Clearing Participant SHALL deposit funds or Collateral in the form of the applicable quantity of the deliverable underlying commodity and/or deliverable asset required to fully collateralize orders pursuant to the contract specifications contained in the Rulebook, including payment of premiums, payment in exchange for delivery or to fulfill delivery obligations, as applicable, prior to submission of such orders to the Exchange. Fund and Collateral transfers made by a Clearing Participant to the Clearinghouse or by the Clearinghouse to a Clearing Participant are irrevocable and unconditional when effected. The Clearing Participant shall be responsible for all fees associated with wires or transfers of Collateral to the Clearinghouse. (b) Subject to the terms and conditions of the Clearinghouse, Clearing Participants may deposit the following as Margin: (1) cash; (2) the underlying commodity; and (3) any other form of Collateral deemed acceptable by the Risk Management Committee upon the Risk Management Committee\u2019s approval of such Collateral as communicated through Clearinghouse notices. The Clearinghouse will value margin Collateral as it deems appropriate. \u00a9 Funds and Collateral must be and remain unencumbered. Except as otherwise provided herein, each Clearing Participant posting funds or Collateral hereby grants to the Clearinghouse a first priority security interest in and unencumbered lien against any Margin, Contracts, positions and other funds, property and any other Collateral deposited with the Clearinghouse by the Clearing Participant, including without limitation such Clearing Participant\u2019s Member Property Accounts, the Customer Accounts of such Clearing Participant\u2019s Customers, and all securities entitlements held therein. A Clearing Participant shall execute any documents required by Commodity Stream, LLC to create, perfect and enforce such lien. Each Clearing Participant hereby agrees that with respect to any funds or Collateral which is or may be credited to the Clearing Participant\u2019s Member Property Account or Customer Account, as applicable, the Clearinghouse shall have control pursuant to Section 9-106(a) and 8-106(e) of the UCC and a perfected security interest pursuant to Section 9-314(a) of the UCC. (d) Commodity Stream, LLC may assign, pledge, repledge or otherwise create a lien on or security interest in, and enter into repurchase agreements involving, Margin, Contracts, positions and other funds, property and any other Collateral deposited with the Clearinghouse by the Clearing Participant, as permitted by CFTC Regulations, held in or for such Clearing Participant\u2019s Member Property Accounts or the Customer Accounts of such Clearing Participant\u2019s Customers to secure the repayment of funds that may be borrowed by Commodity Stream, LLC. (e) Clearing Participant must transfer the funds and Collateral to the Clearinghouse which will hold funds and Collateral on behalf of the Clearing Participant. Commodity Stream, LLC will credit to the Clearing Participant the funds and Collateral that such Clearing Participant deposits. Funds and Collateral shall be held by the Clearinghouse until a Clearing Participant submits a withdrawal notification, unless otherwise stipulated by these Rules. Commodity Stream, LLC will not be responsible for any diminution in value of funds or Collateral that a Clearing Participant deposits with the Clearinghouse, except, in the case of cash, the diminution of value is as a direct result of investment activity of the Clearinghouse, such activity having been conducted in full compliance with CFTC Regulations. Any fluctuation in markets is the risk of each Clearing Participant. Any interest earned on Clearing Participant funds or Collateral may be retained by the Clearinghouse. (f) If a Clearing Participant is in Default, Commodity Stream, LLC may foreclose on and sell any of the Margin deposited by such Clearing Participant without notice. (g) Commodity Stream, LLC shall be empowered to invest and reinvest all or part of the funds constituting Margin. Such investments shall be for the account and risk of Commodity Stream, LLC, and any income and gains on such investments and interest on such deposits shall belong to Commodity Stream, LLC and may be withdrawn from the account holding the Margin and deposited with the general funds of Commodity Stream, LLC. 404. Offset and Settlement \u00b6 (a) Where, as the result of novation under Rule 402, a Clearing Participant has bought and sold a Contract on or subject to the Rules of the Exchange with the same expiration, or otherwise deemed equivalent by the Clearinghouse, the purchase and sale will be offset by Commodity Stream, LLC through the timely submission of instructions by the Clearing Participant containing such information as Commodity Stream, LLC may require in accordance with its procedures. A Clearing Participant shall be required to pay the loss or entitled to collect the profit, as the case may be, upon such offsetting transactions, and shall have no further rights or be under any further obligation with respect thereto. For purposes of this Rule 404, the first Contracts made shall be deemed the first Contracts offset. (b) Contracts made and designated by the Network or Clearing Participant as for the Network and/or Clearing Participant\u2019s Customer Account shall not be offset under this Rule 405 against Contracts designated by the Clearing Participant as for the Clearing Participant\u2019s own Member Property Account. 405. Approved Depository Institutions \u00b6 A bank, trust company or other depository that meets such financial and other requirements of Commodity Stream, LLC may be designated by Commodity Stream, LLC as an Approved Depository Institution. 406. Statement of Trades and Contracts \u00b6 Commodity Stream, LLC shall in the manner and at the time that it determines from time to time make available to a Clearing Participant an accounting of trades and Contracts for each Business Day on which such Clearing Participant has trades to be cleared or Contracts open with Commodity Stream, LLC. Any amounts the Clearing Participant has posted to Commodity Stream, LLC under Rule 403 shall be indicated on this statement 409. Settlement Prices \u00b6 As used in the Rules, the term \u201cSettlement Price\u201d means the settlement price for a Contract for which positions remain open, as determined, intra-day and at the close of regular trading hours, by the Exchange in accordance with its rules, except in the case of manifest error or where Commodity Stream, LLC believes that such settlement price does not reasonably reflect the value or price of the Contract, in which case Commodity Stream, LLC, using its best efforts to consult with the Exchange, shall determine the official Settlement Price; provided, that Commodity Stream, LLC shall in such circumstances promptly notify the Exchange and Clearing Participants, and the reasons for that determination and the basis for the Settlement Price determined by Commodity Stream, LLC shall be published in a notice to the Exchange and Clearing Participants. 410. Delivery \u00b6 After trading ceases for a Smart Contract and/or Normal Contract that is physically settled, the Clearinghouse shall transfer the underlying to the Account of the Clearing Participant that is required to accept delivery, from the Account of the Clearing Participant obligated to make delivery, such full collateralization having been transferred to the Clearinghouse\u2019s custody at the inception of the trade. Deliveries will occur on the Clearinghouse\u2019s books and records unless otherwise specified in the Exchange contract specifications. 411. Reporting \u00b6 Network and Clearing Participants shall make such reports in respect of trades, Smart Contracts, Normal Contracts settlements and deliveries as may be as prescribed by Commodity Stream, LLC. copyright \u00a9 2021 Commodity Stream, LLC - All Rights Reserved CC-BY-NC-ND-2.5","title":"Settlement"},{"location":"trade-settlement/#trade-and-settlement","text":"","title":"Trade and Settlement"},{"location":"trade-settlement/#401-submission-of-trades","text":"(A). Upon matching of a trade effected on or pursuant to the rules of the Exchange, the Exchange shall promptly submit to Commodity Stream, LLC a trade report generated by the electronic trading system of the Exchange. The report shall show for each trade (i) the identity of each Clearing Participant and/or Network Participant, (ii) whether bought or sold, (iii) quantity, (iv) delivery month, (v) the price, (vi) whether for house, Customer, or non- Customer account, and (vii) such other information as may be required by Commodity Stream, LLC. (B). If Commodity Stream, LLC determines that any trade report submitted pursuant to this Rule 401 contains a material error or is otherwise not eligible for clearing by Commodity Stream, LLC, Commodity Stream, LLC may reject such trade and notify the Exchange of such rejection, setting forth the basis of such objection.","title":"401. Submission of Trades"},{"location":"trade-settlement/#402-clearance-and-substitution","text":"(a) The submission of a Contract (Smart Contract or a Normal Contract) to Commodity Stream, LLC by or on behalf of the buying and selling Clearing Participants shall constitute a request, by such Clearing Participants, for the clearing of such Contract by Commodity Stream, LLC. Upon the acceptance thereof by Commodity Stream, LLC, which ordinarily shall be deemed to occur upon the receipt of matched trade data from the Exchange, the Contract shall be novated and Commodity Stream, LLC shall be substituted as, and assume the position of, seller to the Clearing Participant buying such Contract and buyer from the Clearing Participant selling such Contract. Upon such substitution, such buying and selling Clearing Participants shall be released from their obligations to each other, and Commodity Stream, LLC shall be deemed to have succeeded to all the rights, and to have assumed all the Obligations, of the Clearing Participants that were party to such Contract, in each case as provided in the Rules. (b) Where an Commodity Stream, LLC Clearing Participant and/or Network Participant acts to clear a Contract made for the account of a Customer, the Commodity Stream, LLC Clearing Participant becomes obligated to Commodity Stream, LLC, and Commodity Stream, LLC becomes obligated to the Commodity Stream, LLC Clearing Participant, with respect to such Contract in the same manner and to the same extent as if the Contract were for the account of the Commodity Stream, LLC Clearing Participant. \u00a9 Notwithstanding the provisions of paragraph (a), a trade shall not be accepted for clearing, and Commodity Stream, LLC shall not be substituted for a given Contract, unless the Margin for such Contract is made available to Commodity Stream, LLC, by or for both Clearing Participants, pursuant to Rule 403.","title":"402. Clearance and Substitution"},{"location":"trade-settlement/#403-margin","text":"(a) Each Network and Clearing Participant SHALL deposit funds or Collateral in the form of the applicable quantity of the deliverable underlying commodity and/or deliverable asset required to fully collateralize orders pursuant to the contract specifications contained in the Rulebook, including payment of premiums, payment in exchange for delivery or to fulfill delivery obligations, as applicable, prior to submission of such orders to the Exchange. Fund and Collateral transfers made by a Clearing Participant to the Clearinghouse or by the Clearinghouse to a Clearing Participant are irrevocable and unconditional when effected. The Clearing Participant shall be responsible for all fees associated with wires or transfers of Collateral to the Clearinghouse. (b) Subject to the terms and conditions of the Clearinghouse, Clearing Participants may deposit the following as Margin: (1) cash; (2) the underlying commodity; and (3) any other form of Collateral deemed acceptable by the Risk Management Committee upon the Risk Management Committee\u2019s approval of such Collateral as communicated through Clearinghouse notices. The Clearinghouse will value margin Collateral as it deems appropriate. \u00a9 Funds and Collateral must be and remain unencumbered. Except as otherwise provided herein, each Clearing Participant posting funds or Collateral hereby grants to the Clearinghouse a first priority security interest in and unencumbered lien against any Margin, Contracts, positions and other funds, property and any other Collateral deposited with the Clearinghouse by the Clearing Participant, including without limitation such Clearing Participant\u2019s Member Property Accounts, the Customer Accounts of such Clearing Participant\u2019s Customers, and all securities entitlements held therein. A Clearing Participant shall execute any documents required by Commodity Stream, LLC to create, perfect and enforce such lien. Each Clearing Participant hereby agrees that with respect to any funds or Collateral which is or may be credited to the Clearing Participant\u2019s Member Property Account or Customer Account, as applicable, the Clearinghouse shall have control pursuant to Section 9-106(a) and 8-106(e) of the UCC and a perfected security interest pursuant to Section 9-314(a) of the UCC. (d) Commodity Stream, LLC may assign, pledge, repledge or otherwise create a lien on or security interest in, and enter into repurchase agreements involving, Margin, Contracts, positions and other funds, property and any other Collateral deposited with the Clearinghouse by the Clearing Participant, as permitted by CFTC Regulations, held in or for such Clearing Participant\u2019s Member Property Accounts or the Customer Accounts of such Clearing Participant\u2019s Customers to secure the repayment of funds that may be borrowed by Commodity Stream, LLC. (e) Clearing Participant must transfer the funds and Collateral to the Clearinghouse which will hold funds and Collateral on behalf of the Clearing Participant. Commodity Stream, LLC will credit to the Clearing Participant the funds and Collateral that such Clearing Participant deposits. Funds and Collateral shall be held by the Clearinghouse until a Clearing Participant submits a withdrawal notification, unless otherwise stipulated by these Rules. Commodity Stream, LLC will not be responsible for any diminution in value of funds or Collateral that a Clearing Participant deposits with the Clearinghouse, except, in the case of cash, the diminution of value is as a direct result of investment activity of the Clearinghouse, such activity having been conducted in full compliance with CFTC Regulations. Any fluctuation in markets is the risk of each Clearing Participant. Any interest earned on Clearing Participant funds or Collateral may be retained by the Clearinghouse. (f) If a Clearing Participant is in Default, Commodity Stream, LLC may foreclose on and sell any of the Margin deposited by such Clearing Participant without notice. (g) Commodity Stream, LLC shall be empowered to invest and reinvest all or part of the funds constituting Margin. Such investments shall be for the account and risk of Commodity Stream, LLC, and any income and gains on such investments and interest on such deposits shall belong to Commodity Stream, LLC and may be withdrawn from the account holding the Margin and deposited with the general funds of Commodity Stream, LLC.","title":"403. Margin"},{"location":"trade-settlement/#404-offset-and-settlement","text":"(a) Where, as the result of novation under Rule 402, a Clearing Participant has bought and sold a Contract on or subject to the Rules of the Exchange with the same expiration, or otherwise deemed equivalent by the Clearinghouse, the purchase and sale will be offset by Commodity Stream, LLC through the timely submission of instructions by the Clearing Participant containing such information as Commodity Stream, LLC may require in accordance with its procedures. A Clearing Participant shall be required to pay the loss or entitled to collect the profit, as the case may be, upon such offsetting transactions, and shall have no further rights or be under any further obligation with respect thereto. For purposes of this Rule 404, the first Contracts made shall be deemed the first Contracts offset. (b) Contracts made and designated by the Network or Clearing Participant as for the Network and/or Clearing Participant\u2019s Customer Account shall not be offset under this Rule 405 against Contracts designated by the Clearing Participant as for the Clearing Participant\u2019s own Member Property Account.","title":"404. Offset and Settlement"},{"location":"trade-settlement/#405-approved-depository-institutions","text":"A bank, trust company or other depository that meets such financial and other requirements of Commodity Stream, LLC may be designated by Commodity Stream, LLC as an Approved Depository Institution.","title":"405. Approved Depository Institutions"},{"location":"trade-settlement/#406-statement-of-trades-and-contracts","text":"Commodity Stream, LLC shall in the manner and at the time that it determines from time to time make available to a Clearing Participant an accounting of trades and Contracts for each Business Day on which such Clearing Participant has trades to be cleared or Contracts open with Commodity Stream, LLC. Any amounts the Clearing Participant has posted to Commodity Stream, LLC under Rule 403 shall be indicated on this statement","title":"406. Statement of Trades and Contracts"},{"location":"trade-settlement/#409-settlement-prices","text":"As used in the Rules, the term \u201cSettlement Price\u201d means the settlement price for a Contract for which positions remain open, as determined, intra-day and at the close of regular trading hours, by the Exchange in accordance with its rules, except in the case of manifest error or where Commodity Stream, LLC believes that such settlement price does not reasonably reflect the value or price of the Contract, in which case Commodity Stream, LLC, using its best efforts to consult with the Exchange, shall determine the official Settlement Price; provided, that Commodity Stream, LLC shall in such circumstances promptly notify the Exchange and Clearing Participants, and the reasons for that determination and the basis for the Settlement Price determined by Commodity Stream, LLC shall be published in a notice to the Exchange and Clearing Participants.","title":"409. Settlement Prices"},{"location":"trade-settlement/#410-delivery","text":"After trading ceases for a Smart Contract and/or Normal Contract that is physically settled, the Clearinghouse shall transfer the underlying to the Account of the Clearing Participant that is required to accept delivery, from the Account of the Clearing Participant obligated to make delivery, such full collateralization having been transferred to the Clearinghouse\u2019s custody at the inception of the trade. Deliveries will occur on the Clearinghouse\u2019s books and records unless otherwise specified in the Exchange contract specifications.","title":"410. Delivery"},{"location":"trade-settlement/#411-reporting","text":"Network and Clearing Participants shall make such reports in respect of trades, Smart Contracts, Normal Contracts settlements and deliveries as may be as prescribed by Commodity Stream, LLC. copyright \u00a9 2021 Commodity Stream, LLC - All Rights Reserved CC-BY-NC-ND-2.5","title":"411. Reporting"},{"location":"txprice/","text":"TXPrice.com \u00b6 [toc] Overview \u00b6 api.txprice.com An overview of the new typed transaction envelope system Implementation Info \u00b6 Note: transactions seed a maxPriorityFee & maxFee > 0. Miners may not sort the txn pool directly by maxPriorityFee because in cases when maxFee - maxPriorityFee < baseFee , the maxPriorityFee will be reduced for the transaction to remain valid. If maxFee < baseFee , the transaction is invalid. 1559 Variables and their functions \u00b6 Variable Definition baseFeePerGas Generated by the protocol, recorded in each block header. Represents the minimum gasUsed multiplier required for a tx to be included in a block. This is the part of the tx fee that is burnt: baseFeePerGas * gasUsed . maxPriorityFeePerGas Users set this. Added to transactions, represent the part of the tx fee that goes to the miner. see \u2b50 below maxFeePerGas Users set this. Represents the maximum amount that a user is willing to pay for their tx (inclusive of baseFeePerGas and maxPriorityFeePerGas ). The difference between maxFeePerGas and baseFeePerGas + maxPriorityFeePerGas is \"refunded\" to the user. Variable Mechanics \u00b6 Each block's baseFeePerGas can increase/decrease by up to 12.5% depending on how full the block is relative to the previous one: e.g. 100% full -> +12.5%, 50% full -> same, 0% full -> -12.5%. When 1559 is activated, the gasLimit of blocks will double (e.g. 15m to 30m), so \"50% full\" blocks post-1559 are equivalent to 100% full blocks pre-1559. Note: on the 1559 fork block, the baseFeePerGas will be set to 1 gwei. Due to integer math, it cannot go below 7 wei (0.000000007 gwei). \u2b50 maxPriorityFeePerGas in-depth \u00b6 maxPriorityFeePerGas serves three purposes: \ud83d\udd00 Compensates miners for the uncle/ommer risk + fixed costs of including transaction in a block; \ud83d\udcb0 Allows users with high opportunity costs to pay a premium to miners; \ud83d\udcc8 In times where demand exceeds the available block space (i.e. 100% full, 30mm gas), this component allows first price auctions (i.e. the pre-1559 fee model) to happen on the priority fee. Here's how to think about suggesting user defaults for maxPriorityFeePerGas . \ud83d\udd00 Compensates miners for the uncle/ommer risk + fixed costs of including transaction in a block; The rationale behind this is that if the priority fee was 0, miners would simply mine empty blocks. Therefore, in order for it to be in their economic interest to add transactions to blocks, they must be compensated beyond the marginal uncling risk that adding transactions to their block creates (and for the fixed costs of actually running the transactions, but those are negligible compared to uncle risk). Uncle risk has two main components: the difference in block reward between being a canonical vs. uncle block and the lost MEV in the block. This analysis calculates the right maxPriorityFeePerGas to set (assuming 15m gas) based on how much MEV there is on average in a block (note: p=0 , the last graph, uses the most accurate numbers). Flashbots has a dashboard showing the average MEV per block. API \u00b6 Type0 and Type2 Transactions Type0 transactions (Pre EIP-1559) should utilize the Price number under each confidence level. Type2 transactions (EIP-1559) should utilize the values for maxPriorityFeePerGas (also known as the \"tip\") and maxFeePerGas . Glossary \u00b6 maxPrice Highest priced transaction in the mempool currentBlockNumber Block number at the time of prediction msSinceLastBlock Milliseconds since the last block was mined relative to when data was computed blockNumber Block this prediction is for baseFeePerGas Base fee per gas for current block in gwei. (Only type2 transactions Post EIP-1559 have this value and it's burned by the network upon transaction success). estimatedTransactionCount Number of items we estimate will be included in next block based on mempool snapshot confidence 0-99 likelihood the next block will contain a transaction with a gas price >= to the listed price Price Price in Gwei (used for type0 transactions: Pre EIP-1559) maxPriorityFeePerGas Max priority fee per gas in gwei also known as the \"tip\" (used for type2 transactions: EIP-1559) maxFeePerGas Max fee per gas in gwei (used for type2 transactions: EIP-1559). Our current max fee heuristic is Base Fee * 2 + Priority Fee. This is to protect against a 'rapid' rise in the base fee while your transaction fee is pending. In most cases, the actual transaction fee will approximate Base Fee + Priority Fee. Client Implementation Details \u00b6 London Hardfork implementation details Go-Ethereum (Geth) \u00b6 Edit: Geth's gas price oracle retrieves the cheapest 3 transactions from the past X blocks, and uses the 60 th percentile as the suggestion for the price. The 60 th percentile ensures we're aiming for inclusion in 2-3 blocks, whereas looking at the minimums ensures we're trying to push prices downward instead of up. The Gas Price Oracle ('GPO') tracks the 60 th percentile of the minimum tip paid over the last 20 blocks, looking at the 3 transactions with the smallest tip for each block. eth_maxPriorityFeePerGas returns GPO while eth_gasPrice returns GPO + current basefee The gas price oracle internally calculates the priority fees actually paid by the transactions. For the eth_gasPrice call, we will return the estimated priority fee + 1 basefee (which will essentially be the \"current\" full gasPrice that we estimate pre-London). For eth_maxPriorityFeePerGas, we return the estimated priority fee. The user needs to set the maxFeePerGas either manually based on the tip, or Geth defaults to the priority fee + 2x baseFee. Gas price recommendations now modeled as Priority Fees optional field #1 : suggestBaseFee optional field #2 : gasUsedRatio suggestBaseFee may be added to the returned safe/proposed/fast priority fee recommendations to derive a suggested MaxFeePerGas. gasUsedRatio can be used to evaluate how busy the network is, allowing you to adjust your parameters accordingly. EIP-1559 JSON RPC Changes \u00b6 The eth1.0-apis repository is not versioned (yet!) and hence it can be hard to track the various changes introduced by EIP-1559. Here is a list to make this easier. 1559 Summary \u00b6 EIP-1559 introduces a new transaction type ( 0x02 ) and adds a field to the block header ( baseFeePerGas ). At a high level, anything which either returns a transaction or a block will be affected post-1559. API Changes \u00b6 The following APIs calls are changed with the introduction of EIP-1559: eth_call This API has the most substantial behavior modifications. They are described here . eth_getBlockBy* endpoints A new field baseFeePerGas is added on post-London blocks eth_getRawTransaction* endpoints RLP encoded EIP-1559 transactions may be returned post-London eth_getTransactionBy* endpoints gasPrice now interpreted as maxFeePerGas before the tx is mined and effectiveGasPrice after it's mined (for EIP-1559 txs). This field is deprecated (no EOL set yet) for EIP-1559 transactions. EIP-1559 transactions will have two new fields, maxPriorityFeePerGas and maxFeePerGas eth_getTransactionReceipt A new field effectiveGasPrice is added to the receipt. Pre-London, it is equal to the transaction's gasPrice . Post-London, it is equal to the actual gas price paid for inclusion. This calculation differs depending if the transaction is an EIP-1559 transaction or not. eth_getUncleBy* endpoints A new field baseFeePerGas is added on post-London blocks eth_sendTransaction EIP-1559 transaction fields maxPriorityFeePergas and maxFeePerGas are now supported. Clients will calculate reasonable values for these fields if they're omitted. Legacy transactions can still be sent by specifying a gasPrice eth_estimateGas Either gasPrice or maxFeePerGas and maxPriorityFeePerGas are now required. Before, it was okay to omit gasPrice because it could be filled with 0 . Now the baseFeePerGas must be taken into account, and the fee payment must be large enough to cover the base fee. eth_sendRawTransaction This method now supports RLP encoded EIP-1559 transactions Note: * at the end of a name refers to all variations of this API call. Additionally, the following JSON RPC endpoint was introduced: eth_feeHistory , which returns historical data about transaction fees. More information on it can be found here . Maybe mention that geth will have a breaking change for this endpoint to support hex-encoded values vs. integers? ( https://github.com/ethereum/go-ethereum/pull/23239 )","title":"TxPrice"},{"location":"txprice/#txpricecom","text":"[toc]","title":"TXPrice.com"},{"location":"txprice/#overview","text":"api.txprice.com An overview of the new typed transaction envelope system","title":"Overview"},{"location":"txprice/#implementation-info","text":"Note: transactions seed a maxPriorityFee & maxFee > 0. Miners may not sort the txn pool directly by maxPriorityFee because in cases when maxFee - maxPriorityFee < baseFee , the maxPriorityFee will be reduced for the transaction to remain valid. If maxFee < baseFee , the transaction is invalid.","title":"Implementation Info"},{"location":"txprice/#1559-variables-and-their-functions","text":"Variable Definition baseFeePerGas Generated by the protocol, recorded in each block header. Represents the minimum gasUsed multiplier required for a tx to be included in a block. This is the part of the tx fee that is burnt: baseFeePerGas * gasUsed . maxPriorityFeePerGas Users set this. Added to transactions, represent the part of the tx fee that goes to the miner. see \u2b50 below maxFeePerGas Users set this. Represents the maximum amount that a user is willing to pay for their tx (inclusive of baseFeePerGas and maxPriorityFeePerGas ). The difference between maxFeePerGas and baseFeePerGas + maxPriorityFeePerGas is \"refunded\" to the user.","title":"1559 Variables and their functions"},{"location":"txprice/#variable-mechanics","text":"Each block's baseFeePerGas can increase/decrease by up to 12.5% depending on how full the block is relative to the previous one: e.g. 100% full -> +12.5%, 50% full -> same, 0% full -> -12.5%. When 1559 is activated, the gasLimit of blocks will double (e.g. 15m to 30m), so \"50% full\" blocks post-1559 are equivalent to 100% full blocks pre-1559. Note: on the 1559 fork block, the baseFeePerGas will be set to 1 gwei. Due to integer math, it cannot go below 7 wei (0.000000007 gwei).","title":"Variable Mechanics"},{"location":"txprice/#maxpriorityfeepergas-in-depth","text":"maxPriorityFeePerGas serves three purposes: \ud83d\udd00 Compensates miners for the uncle/ommer risk + fixed costs of including transaction in a block; \ud83d\udcb0 Allows users with high opportunity costs to pay a premium to miners; \ud83d\udcc8 In times where demand exceeds the available block space (i.e. 100% full, 30mm gas), this component allows first price auctions (i.e. the pre-1559 fee model) to happen on the priority fee. Here's how to think about suggesting user defaults for maxPriorityFeePerGas . \ud83d\udd00 Compensates miners for the uncle/ommer risk + fixed costs of including transaction in a block; The rationale behind this is that if the priority fee was 0, miners would simply mine empty blocks. Therefore, in order for it to be in their economic interest to add transactions to blocks, they must be compensated beyond the marginal uncling risk that adding transactions to their block creates (and for the fixed costs of actually running the transactions, but those are negligible compared to uncle risk). Uncle risk has two main components: the difference in block reward between being a canonical vs. uncle block and the lost MEV in the block. This analysis calculates the right maxPriorityFeePerGas to set (assuming 15m gas) based on how much MEV there is on average in a block (note: p=0 , the last graph, uses the most accurate numbers). Flashbots has a dashboard showing the average MEV per block.","title":"\u2b50 maxPriorityFeePerGas in-depth"},{"location":"txprice/#api","text":"Type0 and Type2 Transactions Type0 transactions (Pre EIP-1559) should utilize the Price number under each confidence level. Type2 transactions (EIP-1559) should utilize the values for maxPriorityFeePerGas (also known as the \"tip\") and maxFeePerGas .","title":"API"},{"location":"txprice/#glossary","text":"maxPrice Highest priced transaction in the mempool currentBlockNumber Block number at the time of prediction msSinceLastBlock Milliseconds since the last block was mined relative to when data was computed blockNumber Block this prediction is for baseFeePerGas Base fee per gas for current block in gwei. (Only type2 transactions Post EIP-1559 have this value and it's burned by the network upon transaction success). estimatedTransactionCount Number of items we estimate will be included in next block based on mempool snapshot confidence 0-99 likelihood the next block will contain a transaction with a gas price >= to the listed price Price Price in Gwei (used for type0 transactions: Pre EIP-1559) maxPriorityFeePerGas Max priority fee per gas in gwei also known as the \"tip\" (used for type2 transactions: EIP-1559) maxFeePerGas Max fee per gas in gwei (used for type2 transactions: EIP-1559). Our current max fee heuristic is Base Fee * 2 + Priority Fee. This is to protect against a 'rapid' rise in the base fee while your transaction fee is pending. In most cases, the actual transaction fee will approximate Base Fee + Priority Fee.","title":"Glossary"},{"location":"txprice/#client-implementation-details","text":"London Hardfork implementation details","title":"Client Implementation Details"},{"location":"txprice/#go-ethereum-geth","text":"Edit: Geth's gas price oracle retrieves the cheapest 3 transactions from the past X blocks, and uses the 60 th percentile as the suggestion for the price. The 60 th percentile ensures we're aiming for inclusion in 2-3 blocks, whereas looking at the minimums ensures we're trying to push prices downward instead of up. The Gas Price Oracle ('GPO') tracks the 60 th percentile of the minimum tip paid over the last 20 blocks, looking at the 3 transactions with the smallest tip for each block. eth_maxPriorityFeePerGas returns GPO while eth_gasPrice returns GPO + current basefee The gas price oracle internally calculates the priority fees actually paid by the transactions. For the eth_gasPrice call, we will return the estimated priority fee + 1 basefee (which will essentially be the \"current\" full gasPrice that we estimate pre-London). For eth_maxPriorityFeePerGas, we return the estimated priority fee. The user needs to set the maxFeePerGas either manually based on the tip, or Geth defaults to the priority fee + 2x baseFee. Gas price recommendations now modeled as Priority Fees optional field #1 : suggestBaseFee optional field #2 : gasUsedRatio suggestBaseFee may be added to the returned safe/proposed/fast priority fee recommendations to derive a suggested MaxFeePerGas. gasUsedRatio can be used to evaluate how busy the network is, allowing you to adjust your parameters accordingly.","title":"Go-Ethereum (Geth)"},{"location":"txprice/#eip-1559-json-rpc-changes","text":"The eth1.0-apis repository is not versioned (yet!) and hence it can be hard to track the various changes introduced by EIP-1559. Here is a list to make this easier.","title":"EIP-1559 JSON RPC Changes"},{"location":"txprice/#1559-summary","text":"EIP-1559 introduces a new transaction type ( 0x02 ) and adds a field to the block header ( baseFeePerGas ). At a high level, anything which either returns a transaction or a block will be affected post-1559.","title":"1559 Summary"},{"location":"txprice/#api-changes","text":"The following APIs calls are changed with the introduction of EIP-1559: eth_call This API has the most substantial behavior modifications. They are described here . eth_getBlockBy* endpoints A new field baseFeePerGas is added on post-London blocks eth_getRawTransaction* endpoints RLP encoded EIP-1559 transactions may be returned post-London eth_getTransactionBy* endpoints gasPrice now interpreted as maxFeePerGas before the tx is mined and effectiveGasPrice after it's mined (for EIP-1559 txs). This field is deprecated (no EOL set yet) for EIP-1559 transactions. EIP-1559 transactions will have two new fields, maxPriorityFeePerGas and maxFeePerGas eth_getTransactionReceipt A new field effectiveGasPrice is added to the receipt. Pre-London, it is equal to the transaction's gasPrice . Post-London, it is equal to the actual gas price paid for inclusion. This calculation differs depending if the transaction is an EIP-1559 transaction or not. eth_getUncleBy* endpoints A new field baseFeePerGas is added on post-London blocks eth_sendTransaction EIP-1559 transaction fields maxPriorityFeePergas and maxFeePerGas are now supported. Clients will calculate reasonable values for these fields if they're omitted. Legacy transactions can still be sent by specifying a gasPrice eth_estimateGas Either gasPrice or maxFeePerGas and maxPriorityFeePerGas are now required. Before, it was okay to omit gasPrice because it could be filled with 0 . Now the baseFeePerGas must be taken into account, and the fee payment must be large enough to cover the base fee. eth_sendRawTransaction This method now supports RLP encoded EIP-1559 transactions Note: * at the end of a name refers to all variations of this API call. Additionally, the following JSON RPC endpoint was introduced: eth_feeHistory , which returns historical data about transaction fees. More information on it can be found here . Maybe mention that geth will have a breaking change for this endpoint to support hex-encoded values vs. integers? ( https://github.com/ethereum/go-ethereum/pull/23239 )","title":"API Changes"},{"location":"SushiSwap/","text":"SushiSwap User API \u00b6 Documentation for Order Book API Documentation for API Endpoints \u00b6 All URIs are relative to https://api.sushirelay.com Class Method HTTP request Description DefaultApi apiV1OrdersGet GET /api/v1/orders Get existing orders. DefaultApi apiV1OrdersPost POST /api/v1/orders Create a new order. DefaultApi apiV1OrdersUIDDelete DELETE /api/v1/orders/{UID} Cancels order by marking it invalid with a timestamp. DefaultApi apiV1OrdersUIDGet GET /api/v1/orders/{UID} Get existing order from UID. DefaultApi apiV1SolvableOrdersGet GET /api/v1/solvable_orders Get solvable orders. DefaultApi apiV1TokensSellTokenFeeGet GET /api/v1/tokens/{sellToken}/fee The fee that is charged for placing an order. The fee is described by a minimum fee - in order to cover the gas costs for onchain settling - and a feeRatio charged to the users for using the service. DefaultApi apiV1TradesGet GET /api/v1/trades Get existing Trades. Documentation for Models \u00b6 FeeInformation Order OrderCancellation OrderCancellationError OrderCreation OrderMetaData OrderPostError OrderType Trade Documentation for Authorization \u00b6 All endpoints do not require authorization.","title":"Overview"},{"location":"SushiSwap/#sushiswap-user-api","text":"Documentation for Order Book API","title":"SushiSwap User API"},{"location":"SushiSwap/#documentation-for-api-endpoints","text":"All URIs are relative to https://api.sushirelay.com Class Method HTTP request Description DefaultApi apiV1OrdersGet GET /api/v1/orders Get existing orders. DefaultApi apiV1OrdersPost POST /api/v1/orders Create a new order. DefaultApi apiV1OrdersUIDDelete DELETE /api/v1/orders/{UID} Cancels order by marking it invalid with a timestamp. DefaultApi apiV1OrdersUIDGet GET /api/v1/orders/{UID} Get existing order from UID. DefaultApi apiV1SolvableOrdersGet GET /api/v1/solvable_orders Get solvable orders. DefaultApi apiV1TokensSellTokenFeeGet GET /api/v1/tokens/{sellToken}/fee The fee that is charged for placing an order. The fee is described by a minimum fee - in order to cover the gas costs for onchain settling - and a feeRatio charged to the users for using the service. DefaultApi apiV1TradesGet GET /api/v1/trades Get existing Trades.","title":"Documentation for API Endpoints"},{"location":"SushiSwap/#documentation-for-models","text":"FeeInformation Order OrderCancellation OrderCancellationError OrderCreation OrderMetaData OrderPostError OrderType Trade","title":"Documentation for Models"},{"location":"SushiSwap/#documentation-for-authorization","text":"All endpoints do not require authorization.","title":"Documentation for Authorization"},{"location":"SushiSwap/FeeInformation/","text":"FeeInformation \u00b6 Properties \u00b6 Name Type Description Notes expirationDate String Expiration date of the offered fee. Order service might not accept the fee after this expiration date. Encoded as ISO 8601 UTC. [optional] [default to null] minimalFee String Amount of a token. uint256 encoded in decimal. [optional] [default to null] feeRatio BigDecimal The fee ratio charged on a sellAmount. Denoted in basis points [optional] [default to null]","title":"Fee Information"},{"location":"SushiSwap/FeeInformation/#feeinformation","text":"","title":"FeeInformation"},{"location":"SushiSwap/FeeInformation/#properties","text":"Name Type Description Notes expirationDate String Expiration date of the offered fee. Order service might not accept the fee after this expiration date. Encoded as ISO 8601 UTC. [optional] [default to null] minimalFee String Amount of a token. uint256 encoded in decimal. [optional] [default to null] feeRatio BigDecimal The fee ratio charged on a sellAmount. Denoted in basis points [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Order/","text":"Order \u00b6 Properties \u00b6 Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature oas_any_type_not_mapped 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null] creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 5256 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"Orders"},{"location":"SushiSwap/Order/#order","text":"","title":"Order"},{"location":"SushiSwap/Order/#properties","text":"Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature oas_any_type_not_mapped 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null] creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 5256 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/OrderCancellation/","text":"OrderCancellation \u00b6 Properties \u00b6 Name Type Description Notes signature oas_any_type_not_mapped 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"Order Cancellation"},{"location":"SushiSwap/OrderCancellation/#ordercancellation","text":"","title":"OrderCancellation"},{"location":"SushiSwap/OrderCancellation/#properties","text":"Name Type Description Notes signature oas_any_type_not_mapped 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/OrderCreation/","text":"OrderCreation \u00b6 Properties \u00b6 Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature oas_any_type_not_mapped 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"Order Creation"},{"location":"SushiSwap/OrderCreation/#ordercreation","text":"","title":"OrderCreation"},{"location":"SushiSwap/OrderCreation/#properties","text":"Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature oas_any_type_not_mapped 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/OrderMetaData/","text":"OrderMetaData \u00b6 Properties \u00b6 Name Type Description Notes creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"Order Data"},{"location":"SushiSwap/OrderMetaData/#ordermetadata","text":"","title":"OrderMetaData"},{"location":"SushiSwap/OrderMetaData/#properties","text":"Name Type Description Notes creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/OrderPostError/","text":"OrderPostError \u00b6 Properties \u00b6 Name Type Description Notes errorType String [optional] [default to null] description String [optional] [default to null]","title":"Order Errors"},{"location":"SushiSwap/OrderPostError/#orderposterror","text":"","title":"OrderPostError"},{"location":"SushiSwap/OrderPostError/#properties","text":"Name Type Description Notes errorType String [optional] [default to null] description String [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/OrderType/","text":"OrderType \u00b6 Properties \u00b6 Name Type Description Notes","title":"Order Types"},{"location":"SushiSwap/OrderType/#ordertype","text":"","title":"OrderType"},{"location":"SushiSwap/OrderType/#properties","text":"Name Type Description Notes","title":"Properties"},{"location":"SushiSwap/Trade/","text":"Trade \u00b6 Properties \u00b6 Name Type Description Notes blockNumber Integer Block in which trade occurred. [optional] [default to null] logIndex Integer Index in which transaction was included in block. [optional] [default to null] orderUid String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] sellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null]","title":"Trade"},{"location":"SushiSwap/Trade/#trade","text":"","title":"Trade"},{"location":"SushiSwap/Trade/#properties","text":"Name Type Description Notes blockNumber Integer Block in which trade occurred. [optional] [default to null] logIndex Integer Index in which transaction was included in block. [optional] [default to null] orderUid String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] sellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Apis/","text":"API Overview \u00b6 {% include list.liquid all=true %} All URIs are relative to https://api.sushirelay.com Method HTTP request Description apiV1OrdersGet GET /api/v1/orders Get existing orders. apiV1OrdersPost POST /api/v1/orders Create a new order. apiV1OrdersUIDDelete DELETE /api/v1/orders/{UID} Cancels order by marking it invalid with a timestamp. apiV1OrdersUIDGet GET /api/v1/orders/{UID} Get existing order from UID. apiV1SolvableOrdersGet GET /api/v1/solvable_orders Get solvable orders. apiV1TokensSellTokenFeeGet GET /api/v1/tokens/{sellToken}/fee apiV1TradesGet GET /api/v1/trades Get existing Trades. apiV1OrdersGet \u00b6 List apiV1OrdersGet(owner, sellToken, buyToken, includeFullyExecuted, includeInvalidated, includeInsufficientBalance, minValidTo) Get existing orders. By default all currently valid orders are returned. The set of returned orders can be reduced by setting owner, sell token, buy token filters. It can be increased by disabling different order validity exclusion criteria. Parameters \u00b6 Name Type Description Notes owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] includeFullyExecuted Boolean Should fully executed orders be returned? [optional] [default to false] includeInvalidated Boolean Should orders that have been invalidated in the smart contract be returned? [optional] [default to false] includeInsufficientBalance Boolean Should fill or kill orders that are not sufficiently funded be included? [optional] [default to false] minValidTo Integer Minimum valid_to timestamp for included orders. The default is the current time. [optional] [default to null] Return type \u00b6 List Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json apiV1OrdersPost \u00b6 String apiV1OrdersPost(body) Create a new order. Parameters \u00b6 Name Type Description Notes body OrderCreation The order to create. Return type \u00b6 String Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : application/json Accept : application/json apiV1OrdersUIDDelete \u00b6 apiV1OrdersUIDDelete(uID, body) Cancels order by marking it invalid with a timestamp. The successful deletion might not prevent solvers from settling the order Authentication must be provided by signing the following message: Parameters \u00b6 Name Type Description Notes uID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [default to null] body OrderCancellation Signed OrderCancellation Return type \u00b6 null (empty response body) Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : application/json Accept : Not defined apiV1OrdersUIDGet \u00b6 List apiV1OrdersUIDGet(uID) Get existing order from UID. Parameters \u00b6 Name Type Description Notes uID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [default to null] Return type \u00b6 List Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json apiV1SolvableOrdersGet \u00b6 List apiV1SolvableOrdersGet() Get solvable orders. The set of orders that solvers should be solving right now. These orders are determined to be valid at the time of the request. Parameters \u00b6 This endpoint does not need any parameter. Return type \u00b6 List Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json apiV1TokensSellTokenFeeGet \u00b6 FeeInformation apiV1TokensSellTokenFeeGet(sellToken) The fee that is charged for placing an order. The fee is described by a minimum fee - in order to cover the gas costs for onchain settling - and a feeRatio charged to the users for using the service. Parameters \u00b6 Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [default to null] Return type \u00b6 FeeInformation Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json apiV1TradesGet \u00b6 List apiV1TradesGet(owner, orderUid) Get existing Trades. By default all trades are returned. Queries can be refined by specifiying owner or order_uid. Parameters \u00b6 Name Type Description Notes owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] orderUid String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] Return type \u00b6 List Authorization \u00b6 No authorization required HTTP request headers \u00b6 Content-Type : Not defined Accept : application/json","title":"API"},{"location":"SushiSwap/Apis/#api-overview","text":"{% include list.liquid all=true %} All URIs are relative to https://api.sushirelay.com Method HTTP request Description apiV1OrdersGet GET /api/v1/orders Get existing orders. apiV1OrdersPost POST /api/v1/orders Create a new order. apiV1OrdersUIDDelete DELETE /api/v1/orders/{UID} Cancels order by marking it invalid with a timestamp. apiV1OrdersUIDGet GET /api/v1/orders/{UID} Get existing order from UID. apiV1SolvableOrdersGet GET /api/v1/solvable_orders Get solvable orders. apiV1TokensSellTokenFeeGet GET /api/v1/tokens/{sellToken}/fee apiV1TradesGet GET /api/v1/trades Get existing Trades.","title":"API Overview"},{"location":"SushiSwap/Apis/#apiv1ordersget","text":"List apiV1OrdersGet(owner, sellToken, buyToken, includeFullyExecuted, includeInvalidated, includeInsufficientBalance, minValidTo) Get existing orders. By default all currently valid orders are returned. The set of returned orders can be reduced by setting owner, sell token, buy token filters. It can be increased by disabling different order validity exclusion criteria.","title":"apiV1OrdersGet"},{"location":"SushiSwap/Apis/#parameters","text":"Name Type Description Notes owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] includeFullyExecuted Boolean Should fully executed orders be returned? [optional] [default to false] includeInvalidated Boolean Should orders that have been invalidated in the smart contract be returned? [optional] [default to false] includeInsufficientBalance Boolean Should fill or kill orders that are not sufficiently funded be included? [optional] [default to false] minValidTo Integer Minimum valid_to timestamp for included orders. The default is the current time. [optional] [default to null]","title":"Parameters"},{"location":"SushiSwap/Apis/#return-type","text":"List","title":"Return type"},{"location":"SushiSwap/Apis/#authorization","text":"No authorization required","title":"Authorization"},{"location":"SushiSwap/Apis/#http-request-headers","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"SushiSwap/Apis/#apiv1orderspost","text":"String apiV1OrdersPost(body) Create a new order.","title":"apiV1OrdersPost"},{"location":"SushiSwap/Apis/#parameters_1","text":"Name Type Description Notes body OrderCreation The order to create.","title":"Parameters"},{"location":"SushiSwap/Apis/#return-type_1","text":"String","title":"Return type"},{"location":"SushiSwap/Apis/#authorization_1","text":"No authorization required","title":"Authorization"},{"location":"SushiSwap/Apis/#http-request-headers_1","text":"Content-Type : application/json Accept : application/json","title":"HTTP request headers"},{"location":"SushiSwap/Apis/#apiv1ordersuiddelete","text":"apiV1OrdersUIDDelete(uID, body) Cancels order by marking it invalid with a timestamp. The successful deletion might not prevent solvers from settling the order Authentication must be provided by signing the following message:","title":"apiV1OrdersUIDDelete"},{"location":"SushiSwap/Apis/#parameters_2","text":"Name Type Description Notes uID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [default to null] body OrderCancellation Signed OrderCancellation","title":"Parameters"},{"location":"SushiSwap/Apis/#return-type_2","text":"null (empty response body)","title":"Return type"},{"location":"SushiSwap/Apis/#authorization_2","text":"No authorization required","title":"Authorization"},{"location":"SushiSwap/Apis/#http-request-headers_2","text":"Content-Type : application/json Accept : Not defined","title":"HTTP request headers"},{"location":"SushiSwap/Apis/#apiv1ordersuidget","text":"List apiV1OrdersUIDGet(uID) Get existing order from UID.","title":"apiV1OrdersUIDGet"},{"location":"SushiSwap/Apis/#parameters_3","text":"Name Type Description Notes uID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [default to null]","title":"Parameters"},{"location":"SushiSwap/Apis/#return-type_3","text":"List","title":"Return type"},{"location":"SushiSwap/Apis/#authorization_3","text":"No authorization required","title":"Authorization"},{"location":"SushiSwap/Apis/#http-request-headers_3","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"SushiSwap/Apis/#apiv1solvableordersget","text":"List apiV1SolvableOrdersGet() Get solvable orders. The set of orders that solvers should be solving right now. These orders are determined to be valid at the time of the request.","title":"apiV1SolvableOrdersGet"},{"location":"SushiSwap/Apis/#parameters_4","text":"This endpoint does not need any parameter.","title":"Parameters"},{"location":"SushiSwap/Apis/#return-type_4","text":"List","title":"Return type"},{"location":"SushiSwap/Apis/#authorization_4","text":"No authorization required","title":"Authorization"},{"location":"SushiSwap/Apis/#http-request-headers_4","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"SushiSwap/Apis/#apiv1tokensselltokenfeeget","text":"FeeInformation apiV1TokensSellTokenFeeGet(sellToken) The fee that is charged for placing an order. The fee is described by a minimum fee - in order to cover the gas costs for onchain settling - and a feeRatio charged to the users for using the service.","title":"apiV1TokensSellTokenFeeGet"},{"location":"SushiSwap/Apis/#parameters_5","text":"Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [default to null]","title":"Parameters"},{"location":"SushiSwap/Apis/#return-type_5","text":"FeeInformation","title":"Return type"},{"location":"SushiSwap/Apis/#authorization_5","text":"No authorization required","title":"Authorization"},{"location":"SushiSwap/Apis/#http-request-headers_5","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"SushiSwap/Apis/#apiv1tradesget","text":"List apiV1TradesGet(owner, orderUid) Get existing Trades. By default all trades are returned. Queries can be refined by specifiying owner or order_uid.","title":"apiV1TradesGet"},{"location":"SushiSwap/Apis/#parameters_6","text":"Name Type Description Notes owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] orderUid String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null]","title":"Parameters"},{"location":"SushiSwap/Apis/#return-type_6","text":"List","title":"Return type"},{"location":"SushiSwap/Apis/#authorization_6","text":"No authorization required","title":"Authorization"},{"location":"SushiSwap/Apis/#http-request-headers_6","text":"Content-Type : Not defined Accept : application/json","title":"HTTP request headers"},{"location":"SushiSwap/Models/FeeInformation/","text":"FeeInformation \u00b6 Properties \u00b6 Name Type Description Notes expirationDate String Expiration date of the offered fee. Order service might not accept the fee after this expiration date. Encoded as ISO 8601 UTC. [optional] [default to null] minimalFee String Amount of a token. uint256 encoded in decimal. [optional] [default to null] feeRatio BigDecimal The fee ratio charged on a sellAmount. Denoted in basis points [optional] [default to null]","title":"Fee Information"},{"location":"SushiSwap/Models/FeeInformation/#feeinformation","text":"","title":"FeeInformation"},{"location":"SushiSwap/Models/FeeInformation/#properties","text":"Name Type Description Notes expirationDate String Expiration date of the offered fee. Order service might not accept the fee after this expiration date. Encoded as ISO 8601 UTC. [optional] [default to null] minimalFee String Amount of a token. uint256 encoded in decimal. [optional] [default to null] feeRatio BigDecimal The fee ratio charged on a sellAmount. Denoted in basis points [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Models/Order/","text":"Order \u00b6 Properties \u00b6 Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature Object 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null] creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"Order"},{"location":"SushiSwap/Models/Order/#order","text":"","title":"Order"},{"location":"SushiSwap/Models/Order/#properties","text":"Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature Object 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null] creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Models/OrderCancellation/","text":"OrderCancellation \u00b6 Properties \u00b6 Name Type Description Notes signature Object 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"OrderCancellation"},{"location":"SushiSwap/Models/OrderCancellation/#ordercancellation","text":"","title":"OrderCancellation"},{"location":"SushiSwap/Models/OrderCancellation/#properties","text":"Name Type Description Notes signature Object 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Models/OrderCreation/","text":"OrderCreation \u00b6 Properties \u00b6 Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature Object 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"OrderCreation"},{"location":"SushiSwap/Models/OrderCreation/#ordercreation","text":"","title":"OrderCreation"},{"location":"SushiSwap/Models/OrderCreation/#properties","text":"Name Type Description Notes sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] validTo Integer Unix timestamp until the order is valid. uint32. [optional] [default to null] appData Integer Arbitrary identifier sent along with the order. Could be used to track the interface or other meta-aspects of the order. uint32 encoded [optional] [default to null] feeAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] kind OrderType [optional] [default to null] partiallyFillable Boolean Is this a fill-or-kill order or a partially fillable order? [optional] [default to null] Signature Object 65 bytes encoded as hex with `0x` prefix. r + s + v from the spec. [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Models/OrderMetaData/","text":"OrderMetaData \u00b6 Properties \u00b6 Name Type Description Notes creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"OrderMetaData"},{"location":"SushiSwap/Models/OrderMetaData/#ordermetadata","text":"","title":"OrderMetaData"},{"location":"SushiSwap/Models/OrderMetaData/#properties","text":"Name Type Description Notes creationTime String Creation time of the order. Encoded as ISO 8601 UTC. [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] UID String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] availableBalance String Amount of a token. uint256 encoded in decimal. [optional] [default to null] executedSellAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedSellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] executedBuyAmount String A big unsigned integer encoded in decimal. [optional] [default to null] executedFeeAmount String A big unsigned integer encoded in decimal. [optional] [default to null] invalidated Boolean Has this order been invalidated? [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Models/OrderPostError/","text":"OrderPostError \u00b6 Properties \u00b6 Name Type Description Notes errorType String [optional] [default to null] description String [optional] [default to null]","title":"OrderPostError"},{"location":"SushiSwap/Models/OrderPostError/#orderposterror","text":"","title":"OrderPostError"},{"location":"SushiSwap/Models/OrderPostError/#properties","text":"Name Type Description Notes errorType String [optional] [default to null] description String [optional] [default to null]","title":"Properties"},{"location":"SushiSwap/Models/OrderType/","text":"OrderType \u00b6 Properties \u00b6 Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"OrderType"},{"location":"SushiSwap/Models/OrderType/#ordertype","text":"","title":"OrderType"},{"location":"SushiSwap/Models/OrderType/#properties","text":"Name Type Description Notes [Back to Model list] [Back to API list] [Back to README]","title":"Properties"},{"location":"SushiSwap/Models/Trade/","text":"Trade \u00b6 Properties \u00b6 Name Type Description Notes blockNumber Integer Block in which trade occurred. [optional] [default to null] logIndex Integer Index in which transaction was included in block. [optional] [default to null] orderUid String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] sellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null]","title":"Trade"},{"location":"SushiSwap/Models/Trade/#trade","text":"","title":"Trade"},{"location":"SushiSwap/Models/Trade/#properties","text":"Name Type Description Notes blockNumber Integer Block in which trade occurred. [optional] [default to null] logIndex Integer Index in which transaction was included in block. [optional] [default to null] orderUid String Unique identifier for the order: 56 bytes encoded as hex with `0x` prefix. Bytes 0 to 32 are the order digest, bytes 30 to 52 the owner address and bytes 52..56 valid to, [optional] [default to null] owner String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] buyToken String Ethereum 40 byte address encoded as a hex with `0x` prefix. [optional] [default to null] sellAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null] sellAmountBeforeFees String A big unsigned integer encoded in decimal. [optional] [default to null] buyAmount String Amount of a token. uint256 encoded in decimal. [optional] [default to null]","title":"Properties"},{"location":"chain-state/","text":"","title":"Chain State"},{"location":"spec/","text":"Platform Specification and Diagrams \u00b6 Note","title":"Platform"},{"location":"spec/#platform-specification-and-diagrams","text":"Note","title":"Platform Specification and Diagrams"},{"location":"txprice/fast-sorting/","text":"EIP-1559 Transaction Pool for Fast Sorting \u00b6 TL;DL \u00b6 The idea of an EIP-1559 transaction pool for fast sorting. Computational complexity Add a transaction in \\(O(\\log n)\\) Sort transactions when basefee changes in \\(O(k \\log n)\\) Pop the most profitable transaction in \\(O(\\log n)\\) Produce a block in \\(O(m \\log n)\\) \\(n\\) : The number of transactions in a txpool \\(k\\) : The number of transactions where the miner bribe varies with basefee \\(m\\) : The number of transactions in a block Implementation: https://github.com/minaminao/eip1559txpool Background \u00b6 Transaction Pool in First-price Auction \u00b6 In the current fee market, which is a first-price auction mechanism, one strategy to optimize the miner 's fee revenue is to put transactions into a block in a gas_price order. NOTE: Strictly speaking, although nonce also needs to be considered, it is not be considered in the following sections because it does not affect the computational complexity. Vector Implementation \u00b6 If a txpool is implemented as a vector, it must be sorted in gas_price order before creating a block. The computational complexity of sorting is \\(O(n \\log n)\\) , that of adding a transaction is \\(O(1)\\) , and that of deleting a transaction is \\(O(n)\\) . However, transaction deletion can be done to \\(O(1)\\) by lazy evaluation. Heap Implementation \u00b6 If a txpool is implemented as a heap, there will be no need to sort. Adding a transaction takes \\(O(\\log n)\\) , and deleting a transaction takes \\(O(n \\log n)\\) . However, transaction deletion can be done to \\(O(\\log n)\\) by lazy evaluation. Self-balancing Binary Search Tree (SBST) Implementation \u00b6 If a txpool is implemented as an SBST , there will be no need to sort as well as a heap implementation. Adding a transaction takes \\(O(\\log n)\\) , and deleting a transaction takes \\(O(\\log n)\\) . Summary of Computational Complexity in First-price Auction \u00b6 Operation Vector Heap SBST Add a transaction \\(O(1)\\) \\(O(\\log n)\\) \\(O(\\log n)\\) Delete a transaction \\(O(1)\\) by lazy evalutaion \\(O(\\log n)\\) by lazy evalutaion \\(O(\\log n)\\) Pop the most profitable transaction \\(O(1)\\) after sorting \\(O(\\log n)\\) \\(O(\\log n)\\) Sort transactions \\(O(n \\log n)\\) - - The space complexity is \\(O(n)\\) . Transaction Pool in EIP-1559 \u00b6 An EIP-1559 transaction has the parameters base_fee and fee_cap . The miner_bribe is min(fee_cap - base_fee, max_miner_bribe) , and it is optimal to put transactions into a block in the order of miner_bribe . However, miner_bribe depends on base_fee . A fast transaction pool is non-trivial. According to https://hackmd.io/@adietrichs/1559-transaction-sorting , when base_fee changes, there are two transaction sets: one in which miner_bribe changes and one in which miner_bribe does not change. Let us denote these sets as \\(D\\) and \\(S\\) , respectively. It is known that the order of transactions belonging to \\(D\\) and that to \\(S\\) does not change before and after the base_fee change. By using this property well, an efficient transaction pool can be constructed. Proposed Txpool \u00b6 Architecture \u00b6 The txpool is consists of three SBSTs. Static state transactions SBST ( sbst_static ) Include all \\(S\\) transactions. Include condition: fee_cap - max_miner_bribe &gt;= base_fee Key: (max_miner_bribe, transaction_hash) Value: transaction Dynamic state transactions SBST ( sbst_dynamic ) Include all \\(D\\) transactions. Include condition: fee_cap - max_miner_bribe &lt;base_fee Key: (fee_cap, transaction_hash) Value: transaction State decision SBST ( sbst_decision ) Include all transactions. Key: fee_cap - max_miner_bribe Value: transaction NOTE: I have included the implementations below, but they are implemented in C++ because Python does not have SBST in the standard library. Other language implementations such as Python and Rust are WIP. Computational Complexity of Proposed Txpool \u00b6 |Operation|Vector|SBST (Proposed)| |-|-|-|-| |Add a transaction| \\(O(1)\\) | \\(O(\\log n)\\) | |Delete a transaction| \\(O(1)\\) by lazy evalutaion| \\(O(\\log n)\\) | |Pop the most profitable transaction| \\(O(1)\\) after sorting| \\(O(\\log n)\\) | |Sort transactions when basefee changes | \\(O(n \\log n)\\) | \\(O(k \\log n)\\) | The space complexity is \\(O(n)\\) . Pop The Most Profitable Transaction: \\(O(\\log n)\\) \u00b6 The most profitable transaction is either of the following two. 1. \\(tx_{S,\\max}\\) : The most profitable transaction in \\(S\\) 2. \\(tx_{D,\\max}\\) : The most profitable transaction in \\(D\\) \\(tx_{S,\\max}\\) is the one with the highest max_miner_bribe in \\(S\\) . sbst_static is sorted in order of max_miner_bribe because its key is (max_miner_bribe, transaction_hash) . Hence, finding and deleting \\(tx_{S,\\max}\\) is possible with \\(O(\\log n)\\) due to the property of SBST. \\(tx_{D,\\max}\\) is the one with the highest fee_cap in \\(D\\) . sbst_dynamic is sorted in order of fee_cap because its key is (fee_cap, transaction_hash) . Hence, finding and deleting \\(tx_{D,\\max}\\) is possible with \\(O(\\log n)\\) due to the property of SBST. By comparing the revenue of \\(tx_{S,\\max}\\) and \\(tx_{D,\\max}\\) , we can select the most profitable transaction out of the entire transaction set. Also, we have to delete the transaction from sbst_decision (explained later) in \\(O(\\log n)\\) . Therefore, the overall computational complexity is \\(O(\\log n)\\) . Implementation I left it out of the explanation, but I inserted a -fee_cap between the first and second elements of the key. The reason is that when there are transactions with the same max_miner_bribe , it is better to take the one with the smaller fee_cap . When the next base_fee is high, transactions with a small fee_cap may have a smaller revenue. Tx pop_most_profitable_tx () { Tx tx ; assert ( sbst_decision . size () & gt ; 0 ); if ( sbst_static . size () == 0 ) { tx = sbst_dynamic . rbegin () -& gt ; second ; sbst_dynamic . erase ( prev ( sbst_dynamic . end ())); } else if ( sbst_dynamic . size () == 0 ) { tx = sbst_static . rbegin () -& gt ; second ; sbst_static . erase ( prev ( sbst_static . end ())); } else { Tx tx_static = sbst_static . rbegin () -& gt ; second ; Tx tx_dynamic = sbst_dynamic . rbegin () -& gt ; second ; if ( tx_static . miner_bribe ( base_fee ) & gt ; tx_dynamic . miner_bribe ( base_fee )) { tx = tx_static ; sbst_static . erase ( prev ( sbst_static . end ())); } else { tx = tx_dynamic ; sbst_dynamic . erase ( prev ( sbst_dynamic . end ())); } } sbst_decision . erase ( sbst_decision . find ( Key ( tx . fee_cap - tx . max_miner_bribe , - tx . fee_cap , tx . hash ))); return tx ; } Produce Block: \\(O(m \\log n)\\) \u00b6 Suppose we select the \\(m\\) most profitable transactions to create a block. Since selecting the most profitable transaction runs in \\(O(\\log n)\\) , the block production runs in \\(O(m \\log n)\\) . Add Transaction: \\(O(\\log n)\\) \u00b6 If fee_cap - base_fee &gt;= max_miner_bribe , we add the transaction to sbst_static in \\(O(\\log n)\\) . If fee_cap - base_fee &lt;max_miner_bribe , we add the transaction to sbst_dynamic in \\(O(\\log n)\\) . It is also added to sbst_decision (explained later) in \\(O(\\log n)\\) . Therefore, the overall computational complexity is \\(O(\\log n)\\) . Implementation void add_tx ( Tx tx ) { if ( tx . fee_cap - base_fee & gt ; = tx . max_miner_bribe ) { sbst_static . emplace ( Key ( tx . max_miner_bribe , - tx . fee_cap , tx . hash ), tx ); } else { sbst_dynamic . emplace ( Key ( tx . fee_cap , - tx . fee_cap , tx . hash ), tx ); } sbst_decision . emplace ( Key ( tx . fee_cap - tx . max_miner_bribe , - tx . fee_cap , tx . hash ), tx ); } Sort Transactions When Basefee Changes: \\(O(k \\log n)\\) \u00b6 When the base_fee changes, do the following. Let us denote the previous basefee by prev_base_fee . If prev_base_fee < base_fee \u00b6 We need to move the transaction that moves from \\(S\\) to \\(D\\) from sbst_static to sbst_dynamic . The conditions of the transactions are as follows. - fee_cap - max_miner_bribe &gt;= prev_base_fee - fee_cap - max_miner_bribe &lt;base_fee To check the conditions, sbst_decision is used. The key of sbst_decision is fee_cap - max_miner_bribe . Thus, by performing a binary search by prev_base_fee and then by base_fee , the transaction set to be moved can be determined in \\(O(\\log n)\\) . The move takes \\(O(\\log n)\\) to delete a transaction from sbst_static and add the transaction to sbst_dynamic . If the number of its moving transactions is \\(k\\) , then the total complexity is \\(O(k \\log n)\\) . k is small if the change of basefee is small. Implementation auto left_tx = sbst_decision . lower_bound ( Key ( prev_base_fee , - INT32_MAX , 0 )); auto right_tx = sbst_decision . lower_bound ( Key ( base_fee , - INT32_MAX , 0 )); for ( auto pointer = left_tx ; pointer != right_tx ; pointer ++ ) { Tx tx = pointer -& gt ; second ; if ( tx . fee_cap - tx . max_miner_bribe & gt ; = prev_base_fee ) { sbst_static . erase ( sbst_static . find ( Key ( tx . max_miner_bribe , - tx . fee_cap , tx . hash ))); add_tx ( tx ); } } If base_fee < prev_base_fee \u00b6 We need to move the transaction that moves from \\(D\\) to \\(S\\) from sbst_dynamic to sbst_static . The computational complexity is \\(O(k \\log n)\\) as above. Implementation auto left_tx = sbst_decision . lower_bound ( Key ( base_fee , - INT32_MAX , 0 )); auto right_tx = sbst_decision . lower_bound ( Key ( prev_base_fee , - INT32_MAX , 0 )); for ( auto pointer = left_tx ; pointer != right_tx ; pointer ++ ) { Tx tx = pointer -& gt ; second ; if ( tx . fee_cap - tx . max_miner_bribe & lt ; prev_base_fee ) { sbst_dynamic . erase ( sbst_dynamic . find ( Key ( tx . fee_cap , - tx . fee_cap , tx . hash ))); add_tx ( tx ); } } References \u00b6 https://hackmd.io/@timbeiko/1559-tx-pool-mgmt","title":"EIP-1559 Transaction Pool for Fast Sorting"},{"location":"txprice/fast-sorting/#eip-1559-transaction-pool-for-fast-sorting","text":"","title":"EIP-1559 Transaction Pool for Fast Sorting"},{"location":"txprice/fast-sorting/#tldl","text":"The idea of an EIP-1559 transaction pool for fast sorting. Computational complexity Add a transaction in \\(O(\\log n)\\) Sort transactions when basefee changes in \\(O(k \\log n)\\) Pop the most profitable transaction in \\(O(\\log n)\\) Produce a block in \\(O(m \\log n)\\) \\(n\\) : The number of transactions in a txpool \\(k\\) : The number of transactions where the miner bribe varies with basefee \\(m\\) : The number of transactions in a block Implementation: https://github.com/minaminao/eip1559txpool","title":"TL;DL"},{"location":"txprice/fast-sorting/#background","text":"","title":"Background"},{"location":"txprice/fast-sorting/#transaction-pool-in-first-price-auction","text":"In the current fee market, which is a first-price auction mechanism, one strategy to optimize the miner 's fee revenue is to put transactions into a block in a gas_price order. NOTE: Strictly speaking, although nonce also needs to be considered, it is not be considered in the following sections because it does not affect the computational complexity.","title":"Transaction Pool in First-price Auction"},{"location":"txprice/fast-sorting/#vector-implementation","text":"If a txpool is implemented as a vector, it must be sorted in gas_price order before creating a block. The computational complexity of sorting is \\(O(n \\log n)\\) , that of adding a transaction is \\(O(1)\\) , and that of deleting a transaction is \\(O(n)\\) . However, transaction deletion can be done to \\(O(1)\\) by lazy evaluation.","title":"Vector Implementation"},{"location":"txprice/fast-sorting/#heap-implementation","text":"If a txpool is implemented as a heap, there will be no need to sort. Adding a transaction takes \\(O(\\log n)\\) , and deleting a transaction takes \\(O(n \\log n)\\) . However, transaction deletion can be done to \\(O(\\log n)\\) by lazy evaluation.","title":"Heap Implementation"},{"location":"txprice/fast-sorting/#self-balancing-binary-search-tree-sbst-implementation","text":"If a txpool is implemented as an SBST , there will be no need to sort as well as a heap implementation. Adding a transaction takes \\(O(\\log n)\\) , and deleting a transaction takes \\(O(\\log n)\\) .","title":"Self-balancing Binary Search Tree (SBST) Implementation"},{"location":"txprice/fast-sorting/#summary-of-computational-complexity-in-first-price-auction","text":"Operation Vector Heap SBST Add a transaction \\(O(1)\\) \\(O(\\log n)\\) \\(O(\\log n)\\) Delete a transaction \\(O(1)\\) by lazy evalutaion \\(O(\\log n)\\) by lazy evalutaion \\(O(\\log n)\\) Pop the most profitable transaction \\(O(1)\\) after sorting \\(O(\\log n)\\) \\(O(\\log n)\\) Sort transactions \\(O(n \\log n)\\) - - The space complexity is \\(O(n)\\) .","title":"Summary of Computational Complexity in First-price Auction"},{"location":"txprice/fast-sorting/#transaction-pool-in-eip-1559","text":"An EIP-1559 transaction has the parameters base_fee and fee_cap . The miner_bribe is min(fee_cap - base_fee, max_miner_bribe) , and it is optimal to put transactions into a block in the order of miner_bribe . However, miner_bribe depends on base_fee . A fast transaction pool is non-trivial. According to https://hackmd.io/@adietrichs/1559-transaction-sorting , when base_fee changes, there are two transaction sets: one in which miner_bribe changes and one in which miner_bribe does not change. Let us denote these sets as \\(D\\) and \\(S\\) , respectively. It is known that the order of transactions belonging to \\(D\\) and that to \\(S\\) does not change before and after the base_fee change. By using this property well, an efficient transaction pool can be constructed.","title":"Transaction Pool in EIP-1559"},{"location":"txprice/fast-sorting/#proposed-txpool","text":"","title":"Proposed Txpool"},{"location":"txprice/fast-sorting/#architecture","text":"The txpool is consists of three SBSTs. Static state transactions SBST ( sbst_static ) Include all \\(S\\) transactions. Include condition: fee_cap - max_miner_bribe &gt;= base_fee Key: (max_miner_bribe, transaction_hash) Value: transaction Dynamic state transactions SBST ( sbst_dynamic ) Include all \\(D\\) transactions. Include condition: fee_cap - max_miner_bribe &lt;base_fee Key: (fee_cap, transaction_hash) Value: transaction State decision SBST ( sbst_decision ) Include all transactions. Key: fee_cap - max_miner_bribe Value: transaction NOTE: I have included the implementations below, but they are implemented in C++ because Python does not have SBST in the standard library. Other language implementations such as Python and Rust are WIP.","title":"Architecture"},{"location":"txprice/fast-sorting/#computational-complexity-of-proposed-txpool","text":"|Operation|Vector|SBST (Proposed)| |-|-|-|-| |Add a transaction| \\(O(1)\\) | \\(O(\\log n)\\) | |Delete a transaction| \\(O(1)\\) by lazy evalutaion| \\(O(\\log n)\\) | |Pop the most profitable transaction| \\(O(1)\\) after sorting| \\(O(\\log n)\\) | |Sort transactions when basefee changes | \\(O(n \\log n)\\) | \\(O(k \\log n)\\) | The space complexity is \\(O(n)\\) .","title":"Computational Complexity of Proposed Txpool"},{"location":"txprice/fast-sorting/#pop-the-most-profitable-transaction-olog-n","text":"The most profitable transaction is either of the following two. 1. \\(tx_{S,\\max}\\) : The most profitable transaction in \\(S\\) 2. \\(tx_{D,\\max}\\) : The most profitable transaction in \\(D\\) \\(tx_{S,\\max}\\) is the one with the highest max_miner_bribe in \\(S\\) . sbst_static is sorted in order of max_miner_bribe because its key is (max_miner_bribe, transaction_hash) . Hence, finding and deleting \\(tx_{S,\\max}\\) is possible with \\(O(\\log n)\\) due to the property of SBST. \\(tx_{D,\\max}\\) is the one with the highest fee_cap in \\(D\\) . sbst_dynamic is sorted in order of fee_cap because its key is (fee_cap, transaction_hash) . Hence, finding and deleting \\(tx_{D,\\max}\\) is possible with \\(O(\\log n)\\) due to the property of SBST. By comparing the revenue of \\(tx_{S,\\max}\\) and \\(tx_{D,\\max}\\) , we can select the most profitable transaction out of the entire transaction set. Also, we have to delete the transaction from sbst_decision (explained later) in \\(O(\\log n)\\) . Therefore, the overall computational complexity is \\(O(\\log n)\\) . Implementation I left it out of the explanation, but I inserted a -fee_cap between the first and second elements of the key. The reason is that when there are transactions with the same max_miner_bribe , it is better to take the one with the smaller fee_cap . When the next base_fee is high, transactions with a small fee_cap may have a smaller revenue. Tx pop_most_profitable_tx () { Tx tx ; assert ( sbst_decision . size () & gt ; 0 ); if ( sbst_static . size () == 0 ) { tx = sbst_dynamic . rbegin () -& gt ; second ; sbst_dynamic . erase ( prev ( sbst_dynamic . end ())); } else if ( sbst_dynamic . size () == 0 ) { tx = sbst_static . rbegin () -& gt ; second ; sbst_static . erase ( prev ( sbst_static . end ())); } else { Tx tx_static = sbst_static . rbegin () -& gt ; second ; Tx tx_dynamic = sbst_dynamic . rbegin () -& gt ; second ; if ( tx_static . miner_bribe ( base_fee ) & gt ; tx_dynamic . miner_bribe ( base_fee )) { tx = tx_static ; sbst_static . erase ( prev ( sbst_static . end ())); } else { tx = tx_dynamic ; sbst_dynamic . erase ( prev ( sbst_dynamic . end ())); } } sbst_decision . erase ( sbst_decision . find ( Key ( tx . fee_cap - tx . max_miner_bribe , - tx . fee_cap , tx . hash ))); return tx ; }","title":"Pop The Most Profitable Transaction: \\(O(\\log n)\\)"},{"location":"txprice/fast-sorting/#produce-block-om-log-n","text":"Suppose we select the \\(m\\) most profitable transactions to create a block. Since selecting the most profitable transaction runs in \\(O(\\log n)\\) , the block production runs in \\(O(m \\log n)\\) .","title":"Produce Block: \\(O(m \\log n)\\)"},{"location":"txprice/fast-sorting/#add-transaction-olog-n","text":"If fee_cap - base_fee &gt;= max_miner_bribe , we add the transaction to sbst_static in \\(O(\\log n)\\) . If fee_cap - base_fee &lt;max_miner_bribe , we add the transaction to sbst_dynamic in \\(O(\\log n)\\) . It is also added to sbst_decision (explained later) in \\(O(\\log n)\\) . Therefore, the overall computational complexity is \\(O(\\log n)\\) . Implementation void add_tx ( Tx tx ) { if ( tx . fee_cap - base_fee & gt ; = tx . max_miner_bribe ) { sbst_static . emplace ( Key ( tx . max_miner_bribe , - tx . fee_cap , tx . hash ), tx ); } else { sbst_dynamic . emplace ( Key ( tx . fee_cap , - tx . fee_cap , tx . hash ), tx ); } sbst_decision . emplace ( Key ( tx . fee_cap - tx . max_miner_bribe , - tx . fee_cap , tx . hash ), tx ); }","title":"Add Transaction: \\(O(\\log n)\\)"},{"location":"txprice/fast-sorting/#sort-transactions-when-basefee-changes-ok-log-n","text":"When the base_fee changes, do the following. Let us denote the previous basefee by prev_base_fee .","title":"Sort Transactions When Basefee Changes: \\(O(k \\log n)\\)"},{"location":"txprice/fast-sorting/#if-prev_base_fee-base_fee","text":"We need to move the transaction that moves from \\(S\\) to \\(D\\) from sbst_static to sbst_dynamic . The conditions of the transactions are as follows. - fee_cap - max_miner_bribe &gt;= prev_base_fee - fee_cap - max_miner_bribe &lt;base_fee To check the conditions, sbst_decision is used. The key of sbst_decision is fee_cap - max_miner_bribe . Thus, by performing a binary search by prev_base_fee and then by base_fee , the transaction set to be moved can be determined in \\(O(\\log n)\\) . The move takes \\(O(\\log n)\\) to delete a transaction from sbst_static and add the transaction to sbst_dynamic . If the number of its moving transactions is \\(k\\) , then the total complexity is \\(O(k \\log n)\\) . k is small if the change of basefee is small. Implementation auto left_tx = sbst_decision . lower_bound ( Key ( prev_base_fee , - INT32_MAX , 0 )); auto right_tx = sbst_decision . lower_bound ( Key ( base_fee , - INT32_MAX , 0 )); for ( auto pointer = left_tx ; pointer != right_tx ; pointer ++ ) { Tx tx = pointer -& gt ; second ; if ( tx . fee_cap - tx . max_miner_bribe & gt ; = prev_base_fee ) { sbst_static . erase ( sbst_static . find ( Key ( tx . max_miner_bribe , - tx . fee_cap , tx . hash ))); add_tx ( tx ); } }","title":"If prev_base_fee &lt;base_fee"},{"location":"txprice/fast-sorting/#if-base_fee-prev_base_fee","text":"We need to move the transaction that moves from \\(D\\) to \\(S\\) from sbst_dynamic to sbst_static . The computational complexity is \\(O(k \\log n)\\) as above. Implementation auto left_tx = sbst_decision . lower_bound ( Key ( base_fee , - INT32_MAX , 0 )); auto right_tx = sbst_decision . lower_bound ( Key ( prev_base_fee , - INT32_MAX , 0 )); for ( auto pointer = left_tx ; pointer != right_tx ; pointer ++ ) { Tx tx = pointer -& gt ; second ; if ( tx . fee_cap - tx . max_miner_bribe & lt ; prev_base_fee ) { sbst_dynamic . erase ( sbst_dynamic . find ( Key ( tx . fee_cap , - tx . fee_cap , tx . hash ))); add_tx ( tx ); } }","title":"If base_fee &lt;prev_base_fee"},{"location":"txprice/fast-sorting/#references","text":"https://hackmd.io/@timbeiko/1559-tx-pool-mgmt","title":"References"},{"location":"txprice/informative-1559/","text":"How I Think About EIP-1559 \u00b6 adietrichs, author & source, hackmd With all the activity this week around the Ethereum London hard fork, I have noticed people having a wide range of ways to think about EIP-1559, the hard fork 's main protocol change. So I thought I would try to outline my own perspective on the EIP here, to ideally help integrate these different lines of thinking. If you strongly disagree with any point made here, come find me over on twitter at @adietrichs - I would love to hear from you! How I Think About EIP-1559 The Status Quo Distinction between Markets for Inclusion and Ordering Fixed-Supply Iterated First-Price Auction Fixed-Supply First-Price Iterated Types of Miner Revenue \"Base MEV \"(purple) \"First-Price MEV \"(cyan) EIP-1559 History Motivation Design Fee Market Model Base Fee Block Size Limit Effective Gas Price Effect on MEV \"Base MEV \"As observed for the original model, the purple \"base MEV \"rectangle was not removable or reducible, as it is a fundamental property of the limited-supply market. However, as it turns out, one thing that we can do (and in fact have to do for the EIP to work) is have the protocol capture this MEV and thus effectively turn it into \"PEV \"(protocol extractable value). While this does not reduce transaction prices for users, it completely gets rid of one form of MEV, redistributing it directly to the protocol itself instead. \"First-Price MEV \"The motivation behind EIP-1559 was to remove or at least reduce the \"first-price MEV \"that came from miners effectively over-charging most users. Under the EIP, this form of MEV is indeed greatly reduced and now limited to first-price priority fee extraction. The biggest part of the previous MEV is turned into user surplus, i.e. money that stays in the users 'wallets. Base Fee as Protocol Revenue Conclusion See Conclusion for a tl;dr. The Status Quo \u00b6 In order to understand the motivation and implications of EIP-1559, we first have to look at the current-day situation in Ethereum. The parts of the overall blockchain mechanism relevant to us are those of transaction pricing and inclusion, as these are where the main changes of the EIP take place. In the first section we will formalize this as the market for transaction inclusion, and distinguish it from the recently emerged separate market of transaction ordering (\u00e0 la flashbots). We will then have a look at this market, developing a simple model for it as a fixed-supply iterated first-price auction. Finally, we will have a closer look at the kinds of miner revenue identified in that model, and examine in what way those can be considered forms of miner extractable value (MEV). Distinction between Markets for Inclusion and Ordering \u00b6 Like most blockchains Ethereum has a fee payment system directly built into the protocol. First, every transaction specifies a price per gas it is willing to pay. Then, when added into a block, the sending account is charged for the total cost of transaction execution, i.e. total_fee = gas_price * gas_consumed . Users send a fee with their transactions to incentivize miners to include those transactions into a block, which thus creates a market for transaction inclusion. Starting a few years ago, specialized use case patterns emerged that necessitated control not only over general inclusion of transactions, but over their precise position within a block. The most prominent example of this is front-running, where a user targets another user 's in-flight transaction, aiming to have their transaction included right before the target one. By setting up the chain state in a precise and use case specific way (e.g. move an exchange market in a desired direction), the user can then profit off their knowledge of the subsequent transaction 's effect. Initially, these ordering-specific use cases relied solely on the same built-in transaction fee mechanism, as miner sorting algorithms are generally predictable and thus can be influenced with some success. However, with the space getting progressively more competitive, this soon led to considerable amounts of wasted fees for transactions in the incorrect block position. Flashbots was started as an intermediary service between users and miners to address this problem and create a proper market for transaction ordering. This market is mostly independent of the one for transaction inclusion and is barely touched by the changes introduced in EIP-1559. We will thus in the following limit our focus on the market for transaction inclusion. We will also for simplicity ignore any residual ordering-related activity still being facilitated via the native transaction fee mechanism. Note also that the term \"miner extractable value \"(MEV) was coined to refer to value accruing to miners based on their control over secondary aspects of block creation such as transaction ordering. In the following we will explore how the more traditional miner revenue for transaction inclusion can also be considered to be a form of MEV. However, this is not a common use of the terminology and is thus best understood as a thought experiment limited to the context of this writeup. Fixed-Supply Iterated First-Price Auction \u00b6 To understand the nature of the market for transaction inclusion, it is useful to look at a diagram of the relevant supply and demand curves: Diagram of the pre-1559 short-term supply and demand curves of the transaction inclusion market, in the case of full blocks. Note that this diagram includes multiple simplifications as a tradeoff between accuracy and legibility. Note also that if you aren 't used to the concept of supply &demand curves and how to interpret such diagrams, it might be useful to stop for a bit and try to really understand what you are looking at (including the following sections for context), as most of the remaining writeup is directly based on it. The somewhat unusual shape of this diagram is my attempt of illustrating the particularities of the blockchain context. The best way to think about the market is as a fixed-supply iterated first-price auction. The following sections will go through these three attributes individually and relate them to the diagram above: Fixed-Supply \u00b6 Like most blockchains, Ethereum has a hard limit for the size of new blocks, set in the form of a block gas limit. Consequently, the \"supply for block space \"(i.e. the amount of transactions miners are willing to include into a block) is fixed at that limit. This is illustrated by the vertical part of the supply curve in the diagram. As a nuance, transaction inclusion is not entirely free for miners. In particular, adding transactions makes the overall block bigger and thus slower to propagate through the network, in turn slightly increasing the uncle risk for the miner. For that reasons, miners usually set a minimum gas price (geth defaults to 1 Gwei) and reject transactions below that threshold, even if this leads to non-full blocks. Consequently, the supply curve has a horizontal part at the bottom, slightly above 0. First-Price \u00b6 The demand side of the market consist of the payment willingness of users as revealed by the gas prices of their transactions and follows a typical demand curve (labeled \"revealed demand \"in the diagram - for \"true demand \"see next section). Its intersection with the supply curve indicates the market clearing gas price for transaction inclusion (indicated as the dashed horizontal line). Under the current system, transactions have to pay the full gas price they specify, even if it is above that market clearing value. This property is comparable to that of a first-price auction (or more generally any situation with perfect price discrimination). Consequently, most users end up over-paying for inclusion of their transactions. Iterated \u00b6 The last relevant aspect of the market is its iterated nature. Because blocks are created every 15(-ish) seconds, transactions have multiple chances of inclusion. Users also have the chance to bump the gas price if the initial price turns out to have been insufficient. Furthermore, market clearing prices of prior blocks give a rough indication of the required gas price for inclusion. For these reasons, many users don 't initially set the gas price to their maximum payment willingness. This leads to a gap between the observed (revealed) demand and the theoretical true demand. To illustrate this point, the diagram also includes a \"true demand \"curve above the revealed one. Types of Miner Revenue \u00b6 One neat aspect of supply / demand diagrams is that the area between the curves naturally represents consumer and producer surplus, with the split dependent on the extent of price discrimination. ( To illustrate that point: The height under the revealed demand curve indicates the gas prices (eth/gas) paid by included transactions, and the width of the supply curve indicates the block gas limit (gas). So the \"product \"of the two indicates the total eth paid in tx fees to the miner. ) In our case we have perfect price discrimination, so both areas under the curve (cyan and purple) represent miner surplus. As this is pure miner profit and fits the general definition of \"value accruing to miners based on their control over block creation \", it can make sense to call that surplus MEV. The nature of these two areas however turns out to be quite distinct, as outlined in the following sections. Note that the (orange) bottom area also represents miner revenue. However, as it reflects the \"production cost \"of filling the block with transactions, it is not part of their profit. Note also that the topmost (green) area does not represent any money actually paid, but rather the theoretical user surplus resulting from their lower revealed gas price preferences. This area is included only for illustration purposes and not further considered in the following. \"Base MEV \"(purple) \u00b6 This portion of the MEV represents the miner profit in a uniform-price auction setting. If every transaction were to only pay the market clearing gas price, this is the profit the miner would still be left with. This is what people refer to when they point out that EIP-1559 will not make Ethereum transactions cheaper: There is no way of reducing the size of the purple area in the diagram, as it is a natural consequence of any market equilibrium with fixed supply and high demand. \"First-Price MEV \"(cyan) \u00b6 This portion of the MEV represents the additional miner profit stemming from their ability to do perfect price discrimination. This is what people refer to when they point out that the current fee market over-charges many users. EIP-1559 \u00b6 Having looked at the current transaction inclusion market in some detail, we are now ready to turn to the changes introduced by EIP-1559. We will first look at the history of the EIP (including both the motivation for it and its design), before then constructing a fee market model for it analogous to the one above. We will contrast the two models and see how EIP-1559 effects the forms of MEV identified above. Finally, we will also look at base fee payments as the first ever form of protocol revenue, one of the EIP 's side effects. History \u00b6 Motivation \u00b6 Equipped with the model of the current fee market, it is now worthwhile to revisit the original proposal by Vitalik of what would later become EIP-1559. As laid out by Vitalik, the motivation was to turn the first-price auction system into a uniform-price one (or at least make as much headway as possible to that end). In other words, the goal was to remove or minimize the \"first-price MEV \"(the cyan area) in our first diagram. Design \u00b6 To facilitate this goal, some sort of in-protocol oracle for the market clearing inclusion price was necessary. The proposed mechanism was to enshrine a minimum gas price (called base fee) into the protocol. Simultaneously, the maximum block size would be doubled, using a simple proportional controller for the base fee to target 50% filled blocks. Simply put: Because most blocks would now no longer be completely full (with not enough transactions willing to pay the base fee), the size of a block can be used as an indication for whether (and how much) the current base fee level is too high or too low, relative to the \"ideal fee level \"that would lead to exactly 50% filled blocks. The base fee could then be adjusted appropriately, and its current level used as the desired price oracle. Note that this mechanism is only possible due to the fact that the primary bottleneck for the Ethereum block size is the long-term cost imposed by transactions (i.e. mostly state growth). While there are also short-term limiting factors for block size (such as propagation and verification time), those are more forgiving and thus allow for this 2x increase of the maximum block size. This is also the reason for the higher throughput of chains like the Binance Smart Chain that only optimize for short-term throughput, without concern about long-term effects. With this price oracle, we can now turn the first-price auction system into a uniform-price one, by only charging transactions the base fee. As this makes the base fee a possible target for miner manipulation, it turns out that it is important to no longer have the base fee payment go directly to them, as they could otherwise add extra transactions to their blocks for free, distorting the base fee adjustment signal (see Vitalik 's post for details). As the base fee is legible by the protocol, this can easily be avoided by collecting the base fee from users directly, but not forwarding it to the miner. This effectively turns these payments into direct protocol revenue (the first of its kind for Ethereum!). See the section below for further discussion. While the mechanism as described almost works, it lacks one important piece: An incentive for miners to include transactions at all. As they don 't receive the base fee payment, they lack the cost offset from our earlier model. So for the final version of EIP-1559, a new fee type (the priority fee) is added to transactions, with a first-price auction reinstated for that fee part only. Given that the minimum priority fee is fairly small and well understood, this small regression back to a first-price system is however of limited significance. Fee Market Model \u00b6 With all the elements of the EIP in place, we can now construct an updated fee market model: Diagram of the post-1559 short-term supply and demand curves of the transaction inclusion market, for the case of a non-full (but slightly over the \u00bd target) block. The main changes in comparison to the original diagram come from the introduction of the base fee, the doubling of the block size limit, and the new effective gas price payment method. Base Fee \u00b6 The base fee now acts as a price floor, with miner revenue only applied on top. Consequently, the supply curve is raised by that amount. Block Size Limit \u00b6 With a doubled block size limit, the supply curve is now also drawn out twice as wide. For most blocks, this leads to a demand level insufficient to fill the whole block, as indicated by the new intersection between supply and revealed demand in the horizontal part of the supply curve. In the situation displayed in the diagram, the miner would be able to fill \u2154 of the block, which would in turn lead to a slight base fee increase for the next block. Effective Gas Price \u00b6 The last change is the introduction of the effective gas price payment method. Instead of a gas price, transactions specify a max fee and a max priority fee (both per gas). Instead of paying the full max fee, the transaction only pays the base fee and the full max priority fee (though capped by the overall max fee). This leads to a mostly flat effective price curve in the diagram, only slightly curved to reflect the first-price priority fee auction. Effect on MEV \u00b6 As the original intention of the EIP was to reduce one of the two types of MEV, it is useful to now revisit these types and see how they are impacted by the changes: \"Base MEV \"As observed for the original model, the purple \"base MEV \"rectangle was not removable or reducible, as it is a fundamental property of the limited-supply market. However, as it turns out, one thing that we can do (and in fact have to do for the EIP to work) is have the protocol capture this MEV and thus effectively turn it into \"PEV \"(protocol extractable value). While this does not reduce transaction prices for users, it completely gets rid of one form of MEV, redistributing it directly to the protocol itself instead. \u00b6 \"First-Price MEV \"The motivation behind EIP-1559 was to remove or at least reduce the \"first-price MEV \"that came from miners effectively over-charging most users. Under the EIP, this form of MEV is indeed greatly reduced and now limited to first-price priority fee extraction. The biggest part of the previous MEV is turned into user surplus, i.e. money that stays in the users 'wallets. \u00b6 Note that for all of our considerations we focused on the \"normal \"case of non-full blocks. In rare situations of sudden demand spikes, consecutive blocks can be full for a small but sustained period of time. During that time, the priority fee would effectively assume the role of the previous gas price, and the \"first-price MEV \"would absorb all the extra user surplus that is normally freed by the EIP. It is however expected that these times of extreme demand spikes will only make up an insignificant portion of the overall blockchain activity. Base Fee as Protocol Revenue \u00b6 The last aspect worth discussing on the topic of EIP-1559 is the first-of-its-kind protocol revenue source it creates. For the first time ever will Ethereum the protocol not only have expenses (block / staking rewards via issuance of new ETH) but also actively generate revenue. It is important to note that this is somewhat unusual behaviour, and that thus no strict social consensus around what to do with that revenue is yet in place. The decision for now is to burn the ETH collected, to counteract the issuance for security payments. This is generally in line with the principle of \"minimal issuance \", a principle with high levels of community support. While I personally strongly agree with this choice for the use of funds (for reasons I will expand on in my next writeup), I think it is incorrect to simply subsume it under \"minimal issuance \". It is yet to be seen whether it will over time be added to the social consensus as a principle of its own (\"burn all protocol revenue \") and reach a similarly strong level of universal community buy-in. A possible alternative use of the revenue would be R &D spending, although I agree with Vitalik 's assessment that for reasons of legitimacy the Ethereum base layer should abstain from discretionary spending like that. A third alternative worth exploring is that of additional security spending. It would require some sort of fee smoothing mechanism to avoid the problems around miner manipulation outlined above. Crucially, a mechanism like that would mitigate the incentive instability of pure fee-based security funding. In my opinion it would not be a good fit for chains like Ethereum that already target (and pay for) a specific level of security. It could however be interesting for chains like Bitcoin that target zero inflation and are fine with a variable security level as a resulting tradeoff. In that context, an EIP-1559-like mechanism could both fix the incentive instability issues, as well as bring all of the benefits of first-price MEV removal and an in-protocol price oracle. I would not be surprised to see such a mechanism emerge for Bitcoin relatively soon, once Ethereum has conclusively demonstrated the general viability of the EIP. Conclusion \u00b6 The markets for transaction inclusion and ordering are by now two mostly separate and independent markets. While MEV is a term coined in the context of transaction ordering, it can also be applied to the analysis of simple transaction inclusion. Before EIP-1559, transaction inclusion contained two forms of MEV: \"base MEV \"(fees extractable due to limited block size supply) and \"first-price MEV \"(fees extractable due to price discrimination). EIP-1559 achieves its goal of greatly reducing \"first-price MEV \", by introducing the base fee and using it to charge only the effective gas price. The residual MEV is a result of the need for a separate priority fee. As a side effect of the EIP, the \"base MEV \"is captured by the protocol and turned into protocol revenue. This is the first time the Ethereum protocol ever generates revenue. While burning these extracted fees is a sensible choice for Etheruem, other blockchains may choose alternative uses. In particular, Bitcoin could implement an EIP-1559-like mechanism with revenues paid to miners via fee smoothing. As a secondary side effect, the protocol now also exposes a price oracle for the minimum inclusion fee level (to be precise, up to the priority fee). This oracle can be accessed both on-chain via the new BASEFEE opcode and off-chain via any client. This will enable new use cases and could improve the UX of existing Ethereum-related applications.","title":"How I Think About EIP-1559"},{"location":"txprice/informative-1559/#how-i-think-about-eip-1559","text":"adietrichs, author & source, hackmd With all the activity this week around the Ethereum London hard fork, I have noticed people having a wide range of ways to think about EIP-1559, the hard fork 's main protocol change. So I thought I would try to outline my own perspective on the EIP here, to ideally help integrate these different lines of thinking. If you strongly disagree with any point made here, come find me over on twitter at @adietrichs - I would love to hear from you! How I Think About EIP-1559 The Status Quo Distinction between Markets for Inclusion and Ordering Fixed-Supply Iterated First-Price Auction Fixed-Supply First-Price Iterated Types of Miner Revenue \"Base MEV \"(purple) \"First-Price MEV \"(cyan) EIP-1559 History Motivation Design Fee Market Model Base Fee Block Size Limit Effective Gas Price Effect on MEV \"Base MEV \"As observed for the original model, the purple \"base MEV \"rectangle was not removable or reducible, as it is a fundamental property of the limited-supply market. However, as it turns out, one thing that we can do (and in fact have to do for the EIP to work) is have the protocol capture this MEV and thus effectively turn it into \"PEV \"(protocol extractable value). While this does not reduce transaction prices for users, it completely gets rid of one form of MEV, redistributing it directly to the protocol itself instead. \"First-Price MEV \"The motivation behind EIP-1559 was to remove or at least reduce the \"first-price MEV \"that came from miners effectively over-charging most users. Under the EIP, this form of MEV is indeed greatly reduced and now limited to first-price priority fee extraction. The biggest part of the previous MEV is turned into user surplus, i.e. money that stays in the users 'wallets. Base Fee as Protocol Revenue Conclusion See Conclusion for a tl;dr.","title":"How I Think About EIP-1559"},{"location":"txprice/informative-1559/#the-status-quo","text":"In order to understand the motivation and implications of EIP-1559, we first have to look at the current-day situation in Ethereum. The parts of the overall blockchain mechanism relevant to us are those of transaction pricing and inclusion, as these are where the main changes of the EIP take place. In the first section we will formalize this as the market for transaction inclusion, and distinguish it from the recently emerged separate market of transaction ordering (\u00e0 la flashbots). We will then have a look at this market, developing a simple model for it as a fixed-supply iterated first-price auction. Finally, we will have a closer look at the kinds of miner revenue identified in that model, and examine in what way those can be considered forms of miner extractable value (MEV).","title":"The Status Quo"},{"location":"txprice/informative-1559/#distinction-between-markets-for-inclusion-and-ordering","text":"Like most blockchains Ethereum has a fee payment system directly built into the protocol. First, every transaction specifies a price per gas it is willing to pay. Then, when added into a block, the sending account is charged for the total cost of transaction execution, i.e. total_fee = gas_price * gas_consumed . Users send a fee with their transactions to incentivize miners to include those transactions into a block, which thus creates a market for transaction inclusion. Starting a few years ago, specialized use case patterns emerged that necessitated control not only over general inclusion of transactions, but over their precise position within a block. The most prominent example of this is front-running, where a user targets another user 's in-flight transaction, aiming to have their transaction included right before the target one. By setting up the chain state in a precise and use case specific way (e.g. move an exchange market in a desired direction), the user can then profit off their knowledge of the subsequent transaction 's effect. Initially, these ordering-specific use cases relied solely on the same built-in transaction fee mechanism, as miner sorting algorithms are generally predictable and thus can be influenced with some success. However, with the space getting progressively more competitive, this soon led to considerable amounts of wasted fees for transactions in the incorrect block position. Flashbots was started as an intermediary service between users and miners to address this problem and create a proper market for transaction ordering. This market is mostly independent of the one for transaction inclusion and is barely touched by the changes introduced in EIP-1559. We will thus in the following limit our focus on the market for transaction inclusion. We will also for simplicity ignore any residual ordering-related activity still being facilitated via the native transaction fee mechanism. Note also that the term \"miner extractable value \"(MEV) was coined to refer to value accruing to miners based on their control over secondary aspects of block creation such as transaction ordering. In the following we will explore how the more traditional miner revenue for transaction inclusion can also be considered to be a form of MEV. However, this is not a common use of the terminology and is thus best understood as a thought experiment limited to the context of this writeup.","title":"Distinction between Markets for Inclusion and Ordering"},{"location":"txprice/informative-1559/#fixed-supply-iterated-first-price-auction","text":"To understand the nature of the market for transaction inclusion, it is useful to look at a diagram of the relevant supply and demand curves: Diagram of the pre-1559 short-term supply and demand curves of the transaction inclusion market, in the case of full blocks. Note that this diagram includes multiple simplifications as a tradeoff between accuracy and legibility. Note also that if you aren 't used to the concept of supply &demand curves and how to interpret such diagrams, it might be useful to stop for a bit and try to really understand what you are looking at (including the following sections for context), as most of the remaining writeup is directly based on it. The somewhat unusual shape of this diagram is my attempt of illustrating the particularities of the blockchain context. The best way to think about the market is as a fixed-supply iterated first-price auction. The following sections will go through these three attributes individually and relate them to the diagram above:","title":"Fixed-Supply Iterated First-Price Auction"},{"location":"txprice/informative-1559/#fixed-supply","text":"Like most blockchains, Ethereum has a hard limit for the size of new blocks, set in the form of a block gas limit. Consequently, the \"supply for block space \"(i.e. the amount of transactions miners are willing to include into a block) is fixed at that limit. This is illustrated by the vertical part of the supply curve in the diagram. As a nuance, transaction inclusion is not entirely free for miners. In particular, adding transactions makes the overall block bigger and thus slower to propagate through the network, in turn slightly increasing the uncle risk for the miner. For that reasons, miners usually set a minimum gas price (geth defaults to 1 Gwei) and reject transactions below that threshold, even if this leads to non-full blocks. Consequently, the supply curve has a horizontal part at the bottom, slightly above 0.","title":"Fixed-Supply"},{"location":"txprice/informative-1559/#first-price","text":"The demand side of the market consist of the payment willingness of users as revealed by the gas prices of their transactions and follows a typical demand curve (labeled \"revealed demand \"in the diagram - for \"true demand \"see next section). Its intersection with the supply curve indicates the market clearing gas price for transaction inclusion (indicated as the dashed horizontal line). Under the current system, transactions have to pay the full gas price they specify, even if it is above that market clearing value. This property is comparable to that of a first-price auction (or more generally any situation with perfect price discrimination). Consequently, most users end up over-paying for inclusion of their transactions.","title":"First-Price"},{"location":"txprice/informative-1559/#iterated","text":"The last relevant aspect of the market is its iterated nature. Because blocks are created every 15(-ish) seconds, transactions have multiple chances of inclusion. Users also have the chance to bump the gas price if the initial price turns out to have been insufficient. Furthermore, market clearing prices of prior blocks give a rough indication of the required gas price for inclusion. For these reasons, many users don 't initially set the gas price to their maximum payment willingness. This leads to a gap between the observed (revealed) demand and the theoretical true demand. To illustrate this point, the diagram also includes a \"true demand \"curve above the revealed one.","title":"Iterated"},{"location":"txprice/informative-1559/#types-of-miner-revenue","text":"One neat aspect of supply / demand diagrams is that the area between the curves naturally represents consumer and producer surplus, with the split dependent on the extent of price discrimination. ( To illustrate that point: The height under the revealed demand curve indicates the gas prices (eth/gas) paid by included transactions, and the width of the supply curve indicates the block gas limit (gas). So the \"product \"of the two indicates the total eth paid in tx fees to the miner. ) In our case we have perfect price discrimination, so both areas under the curve (cyan and purple) represent miner surplus. As this is pure miner profit and fits the general definition of \"value accruing to miners based on their control over block creation \", it can make sense to call that surplus MEV. The nature of these two areas however turns out to be quite distinct, as outlined in the following sections. Note that the (orange) bottom area also represents miner revenue. However, as it reflects the \"production cost \"of filling the block with transactions, it is not part of their profit. Note also that the topmost (green) area does not represent any money actually paid, but rather the theoretical user surplus resulting from their lower revealed gas price preferences. This area is included only for illustration purposes and not further considered in the following.","title":"Types of Miner Revenue"},{"location":"txprice/informative-1559/#base-mev-purple","text":"This portion of the MEV represents the miner profit in a uniform-price auction setting. If every transaction were to only pay the market clearing gas price, this is the profit the miner would still be left with. This is what people refer to when they point out that EIP-1559 will not make Ethereum transactions cheaper: There is no way of reducing the size of the purple area in the diagram, as it is a natural consequence of any market equilibrium with fixed supply and high demand.","title":"&#34;Base MEV &#34;(purple)"},{"location":"txprice/informative-1559/#first-price-mev-cyan","text":"This portion of the MEV represents the additional miner profit stemming from their ability to do perfect price discrimination. This is what people refer to when they point out that the current fee market over-charges many users.","title":"&#34;First-Price MEV &#34;(cyan)"},{"location":"txprice/informative-1559/#eip-1559","text":"Having looked at the current transaction inclusion market in some detail, we are now ready to turn to the changes introduced by EIP-1559. We will first look at the history of the EIP (including both the motivation for it and its design), before then constructing a fee market model for it analogous to the one above. We will contrast the two models and see how EIP-1559 effects the forms of MEV identified above. Finally, we will also look at base fee payments as the first ever form of protocol revenue, one of the EIP 's side effects.","title":"EIP-1559"},{"location":"txprice/informative-1559/#history","text":"","title":"History"},{"location":"txprice/informative-1559/#motivation","text":"Equipped with the model of the current fee market, it is now worthwhile to revisit the original proposal by Vitalik of what would later become EIP-1559. As laid out by Vitalik, the motivation was to turn the first-price auction system into a uniform-price one (or at least make as much headway as possible to that end). In other words, the goal was to remove or minimize the \"first-price MEV \"(the cyan area) in our first diagram.","title":"Motivation"},{"location":"txprice/informative-1559/#design","text":"To facilitate this goal, some sort of in-protocol oracle for the market clearing inclusion price was necessary. The proposed mechanism was to enshrine a minimum gas price (called base fee) into the protocol. Simultaneously, the maximum block size would be doubled, using a simple proportional controller for the base fee to target 50% filled blocks. Simply put: Because most blocks would now no longer be completely full (with not enough transactions willing to pay the base fee), the size of a block can be used as an indication for whether (and how much) the current base fee level is too high or too low, relative to the \"ideal fee level \"that would lead to exactly 50% filled blocks. The base fee could then be adjusted appropriately, and its current level used as the desired price oracle. Note that this mechanism is only possible due to the fact that the primary bottleneck for the Ethereum block size is the long-term cost imposed by transactions (i.e. mostly state growth). While there are also short-term limiting factors for block size (such as propagation and verification time), those are more forgiving and thus allow for this 2x increase of the maximum block size. This is also the reason for the higher throughput of chains like the Binance Smart Chain that only optimize for short-term throughput, without concern about long-term effects. With this price oracle, we can now turn the first-price auction system into a uniform-price one, by only charging transactions the base fee. As this makes the base fee a possible target for miner manipulation, it turns out that it is important to no longer have the base fee payment go directly to them, as they could otherwise add extra transactions to their blocks for free, distorting the base fee adjustment signal (see Vitalik 's post for details). As the base fee is legible by the protocol, this can easily be avoided by collecting the base fee from users directly, but not forwarding it to the miner. This effectively turns these payments into direct protocol revenue (the first of its kind for Ethereum!). See the section below for further discussion. While the mechanism as described almost works, it lacks one important piece: An incentive for miners to include transactions at all. As they don 't receive the base fee payment, they lack the cost offset from our earlier model. So for the final version of EIP-1559, a new fee type (the priority fee) is added to transactions, with a first-price auction reinstated for that fee part only. Given that the minimum priority fee is fairly small and well understood, this small regression back to a first-price system is however of limited significance.","title":"Design"},{"location":"txprice/informative-1559/#fee-market-model","text":"With all the elements of the EIP in place, we can now construct an updated fee market model: Diagram of the post-1559 short-term supply and demand curves of the transaction inclusion market, for the case of a non-full (but slightly over the \u00bd target) block. The main changes in comparison to the original diagram come from the introduction of the base fee, the doubling of the block size limit, and the new effective gas price payment method.","title":"Fee Market Model"},{"location":"txprice/informative-1559/#base-fee","text":"The base fee now acts as a price floor, with miner revenue only applied on top. Consequently, the supply curve is raised by that amount.","title":"Base Fee"},{"location":"txprice/informative-1559/#block-size-limit","text":"With a doubled block size limit, the supply curve is now also drawn out twice as wide. For most blocks, this leads to a demand level insufficient to fill the whole block, as indicated by the new intersection between supply and revealed demand in the horizontal part of the supply curve. In the situation displayed in the diagram, the miner would be able to fill \u2154 of the block, which would in turn lead to a slight base fee increase for the next block.","title":"Block Size Limit"},{"location":"txprice/informative-1559/#effective-gas-price","text":"The last change is the introduction of the effective gas price payment method. Instead of a gas price, transactions specify a max fee and a max priority fee (both per gas). Instead of paying the full max fee, the transaction only pays the base fee and the full max priority fee (though capped by the overall max fee). This leads to a mostly flat effective price curve in the diagram, only slightly curved to reflect the first-price priority fee auction.","title":"Effective Gas Price"},{"location":"txprice/informative-1559/#effect-on-mev","text":"As the original intention of the EIP was to reduce one of the two types of MEV, it is useful to now revisit these types and see how they are impacted by the changes:","title":"Effect on MEV"},{"location":"txprice/informative-1559/#base-mev-as-observed-for-the-original-model-the-purple-base-mev-rectangle-was-not-removable-or-reducible-as-it-is-a-fundamental-property-of-the-limited-supply-market-however-as-it-turns-out-one-thing-that-we-can-do-and-in-fact-have-to-do-for-the-eip-to-work-is-have-the-protocol-capture-this-mev-and-thus-effectively-turn-it-into-pev-protocol-extractable-value-while-this-does-not-reduce-transaction-prices-for-users-it-completely-gets-rid-of-one-form-of-mev-redistributing-it-directly-to-the-protocol-itself-instead","text":"","title":"&#34;Base MEV &#34;As observed for the original model, the purple &#34;base MEV &#34;rectangle was not removable or reducible, as it is a fundamental property of the limited-supply market. However, as it turns out, one thing that we can do (and in fact have to do for the EIP to work) is have the protocol capture this MEV and thus effectively turn it into &#34;PEV &#34;(protocol extractable value). While this does not reduce transaction prices for users, it completely gets rid of one form of MEV, redistributing it directly to the protocol itself instead."},{"location":"txprice/informative-1559/#first-price-mev-the-motivation-behind-eip-1559-was-to-remove-or-at-least-reduce-the-first-price-mev-that-came-from-miners-effectively-over-charging-most-users-under-the-eip-this-form-of-mev-is-indeed-greatly-reduced-and-now-limited-to-first-price-priority-fee-extraction-the-biggest-part-of-the-previous-mev-is-turned-into-user-surplus-ie-money-that-stays-in-the-users-wallets","text":"Note that for all of our considerations we focused on the \"normal \"case of non-full blocks. In rare situations of sudden demand spikes, consecutive blocks can be full for a small but sustained period of time. During that time, the priority fee would effectively assume the role of the previous gas price, and the \"first-price MEV \"would absorb all the extra user surplus that is normally freed by the EIP. It is however expected that these times of extreme demand spikes will only make up an insignificant portion of the overall blockchain activity.","title":"&#34;First-Price MEV &#34;The motivation behind EIP-1559 was to remove or at least reduce the &#34;first-price MEV &#34;that came from miners effectively over-charging most users. Under the EIP, this form of MEV is indeed greatly reduced and now limited to first-price priority fee extraction. The biggest part of the previous MEV is turned into user surplus, i.e. money that stays in the users &#39;wallets."},{"location":"txprice/informative-1559/#base-fee-as-protocol-revenue","text":"The last aspect worth discussing on the topic of EIP-1559 is the first-of-its-kind protocol revenue source it creates. For the first time ever will Ethereum the protocol not only have expenses (block / staking rewards via issuance of new ETH) but also actively generate revenue. It is important to note that this is somewhat unusual behaviour, and that thus no strict social consensus around what to do with that revenue is yet in place. The decision for now is to burn the ETH collected, to counteract the issuance for security payments. This is generally in line with the principle of \"minimal issuance \", a principle with high levels of community support. While I personally strongly agree with this choice for the use of funds (for reasons I will expand on in my next writeup), I think it is incorrect to simply subsume it under \"minimal issuance \". It is yet to be seen whether it will over time be added to the social consensus as a principle of its own (\"burn all protocol revenue \") and reach a similarly strong level of universal community buy-in. A possible alternative use of the revenue would be R &D spending, although I agree with Vitalik 's assessment that for reasons of legitimacy the Ethereum base layer should abstain from discretionary spending like that. A third alternative worth exploring is that of additional security spending. It would require some sort of fee smoothing mechanism to avoid the problems around miner manipulation outlined above. Crucially, a mechanism like that would mitigate the incentive instability of pure fee-based security funding. In my opinion it would not be a good fit for chains like Ethereum that already target (and pay for) a specific level of security. It could however be interesting for chains like Bitcoin that target zero inflation and are fine with a variable security level as a resulting tradeoff. In that context, an EIP-1559-like mechanism could both fix the incentive instability issues, as well as bring all of the benefits of first-price MEV removal and an in-protocol price oracle. I would not be surprised to see such a mechanism emerge for Bitcoin relatively soon, once Ethereum has conclusively demonstrated the general viability of the EIP.","title":"Base Fee as Protocol Revenue"},{"location":"txprice/informative-1559/#conclusion","text":"The markets for transaction inclusion and ordering are by now two mostly separate and independent markets. While MEV is a term coined in the context of transaction ordering, it can also be applied to the analysis of simple transaction inclusion. Before EIP-1559, transaction inclusion contained two forms of MEV: \"base MEV \"(fees extractable due to limited block size supply) and \"first-price MEV \"(fees extractable due to price discrimination). EIP-1559 achieves its goal of greatly reducing \"first-price MEV \", by introducing the base fee and using it to charge only the effective gas price. The residual MEV is a result of the need for a separate priority fee. As a side effect of the EIP, the \"base MEV \"is captured by the protocol and turned into protocol revenue. This is the first time the Ethereum protocol ever generates revenue. While burning these extracted fees is a sensible choice for Etheruem, other blockchains may choose alternative uses. In particular, Bitcoin could implement an EIP-1559-like mechanism with revenues paid to miners via fee smoothing. As a secondary side effect, the protocol now also exposes a price oracle for the minimum inclusion fee level (to be precise, up to the priority fee). This oracle can be accessed both on-chain via the new BASEFEE opcode and off-chain via any client. This will enable new use cases and could improve the UX of existing Ethereum-related applications.","title":"Conclusion"},{"location":"txprice/sorting-overview/","text":"EIP-1559 Transaction Sorting: Overview \u00b6 tl;dr Transaction comparison and sorting in the mempool is used for two main problems: On the upper end, finding the most attractive transactions during mining; and on the lower end, identifying the least promising transactions for eviction. For legacy transactions, both problems use the gas_price as the relevant decision metric and max-/min-heaps as efficient partially sorted data structures. For EIP-1559, these problems require different metrics. For mining, a (somewhat more complex) explicit solution seems feasible. For eviction, heuristics are needed that are both efficiently implementable and robust under many different base fee paradigms. As a proposal for a new transaction pricing model, EIP-1559 will change many aspects of Ethereum clients 'behavior. One of the areas most impacted is the mempool, i.e. the part of a client responsible for handling in-flight transactions on their way from users to miners. Tim Beiko recently listed 4 open questions around mempool handling of EIP-1559 transactions, with three of them closely tied to the problem of transaction sorting. Here we aim to give a brief overview of different aspects of mempool transaction sorting and how they are impacted by EIP-1559. This document is mainly intended to serve as a basis of discussion for the upcoming implementers 'call . It will be followed up by a more comprehensive writeup. As the Quilt team has only recently joined the EIP-1559 effort, it is very possible that we made incorrect assumption or overlooked relevant existing work. Feedback in these cases and in general is much appreciated! Mempool Sorting \u00b6 There are two main distinct sorting problems: Miners, when picking transactions for a new block, want to get the currently most profitable transactions. And all nodes, when reaching the maximum mempool capacity, want to get the transactions with the lowest inclusion chance, that they can evict to make room for more promising transactions. Both of these problems consist of two sub-problems: The choice of a comparison metric and the choice of an efficient data structure for transactions, based on that metric. For current (legacy) transactions, both the high-end sorting for mining and the low-end sorting for eviction rely on the gas_price transaction field as their comparison metric. This in turn also leads to the same choice of data structure, namely a (partially-sorted) max-heap for mining and a (partially-sorted) min-heap for eviction. For EIP-1559 transactions, the situation is more complex. For mining, the relevant metric is the current effective transaction tip, i.e. the amount per gas the transaction is willing to pay to the miner for inclusion. For eviction however, this is not the correct metric to use. As the effective transaction tip depends on the current protocol base_fee , the relative order of transaction changes over time and is not an accurate heuristic for inclusion chance. Thus, a more elaborate metric, ideally close to \"estimated average future effective transaction tip \", is necessary. The change in metrics also requires different data structures for EIP-1559 transaction sorting. For mining, a solution based on a slightly more complex heap-approach is in the process of being prototyped . For eviction, the choice of data structure depends on the choice of metric. In particular, this imposes an additional constraint on the choice of metric: Find a metric that is accurate enough under a vast variety of base_fee regimes, while also being efficiently implementable. The third sorting-related problem mentioned by Tim is that of transaction replacement (for transactions with the same sender and nonce). It is similar to that of eviction, with an added focus on DOS protection and predicatability. For EIP-1559 transactions, a decision rule similar to the min_price_bump for legacy transactions can be devised. Current Situation \u00b6 Transaction Format \u00b6 Name Description gas_price The fee the transaction is willing to pay (per gas used) While there are additional transaction fields relevant for mempool handling, this is the one relevant for sorting and also the one that sets legacy transactions apart from their EIP-1559 counterparts. It is important to note that the payment willingness as indicated by gas_price for any given transaction is a static value, i.e. cannot depend on the overall current gas price level. Thus, the relative order of transaction always remains the same, as illustrated in this plot: A mempool holding all of these transactions can be certain that C >E >A >B >D will always correctly describe the relative payment willingness of the transactions. It is thus possible to create and maintain efficient (partially) sorted views of the transactions in mempool. Mining \u00b6 When assembling a new block, miners need a way to find the most profitable transactions to include. They can do so by querying the mempool for the upper end of (currently executable) pending transactions. For this purpose, the mempool maintains a (partially sorted) max-heap of its transactions, allowing efficient queries for the highest paying transactions. Note: As these heaps are only needed for mining (see below for those used by all nodes), they are usually created and maintained by the mining module directly and not technically part of the mempool. For simplicity we subsume these parts under \"mempool \". All Nodes \u00b6 As nodes only have a limited amount of memory to work with, they cannot keep an unlimited amount of transactions in their mempools. That means that once that limit is reached, they need a way to decide whether to keep additional incoming transactions and if so, which transactions to drop in their favor. Nodes ideally want to prioritize transactions by chance of future on-chain inclusion, dropping those with the least chances of ever being included by a miner. As the relative attractiveness of transactions for miners only depends on their gas_price , it remains constant over time. Thus, the transactions currently least attractive will also have the lowest chances of eventual inclusion. When choosing which transactions to drop, the mempool thus need to be able to find the transactions with the lowest gas_price . It does so by maintaining a (partially sorted) min-heap of its transactions. Decisions on transaction replacement (i.e. when the mempool already holds a transaction from the same sender with the same nonce) are done with the same gas_price metric. An additional minimum price bump is enforecd to ensure DOS protection. Changes Under EIP-1559 \u00b6 Transaction Format \u00b6 Name Description fee_cap The total fee the transaction is willing to pay (per gas used) tip The maximum share of the total fee the transaction is willing to pay to the miner (per gas used) Under EIP-1559, transaction fees are no longer fully paid to the miner. Instead, there is a protocol-wide and dynamically adjusted base_fee (per gas used) that each transaction is required to burn. In addition, transactions can tip the miner to increase their chance of timely inclusion. Instead of specifying a gas_price , transactions now set a tip amount and a fee_cap . If base_fee + tip exceeds fee_cap , the tip is reduced to fee_cap - base_fee . As the effective payment to the miner can thus be lower than the tip specified in the transaction, miner expectations for any given transation is no longer static. As an important consequence, the relative order of transaction is also no longer static, as illustrated by this plot: This example mirrors the total payment willingness of the legacy example above, but sets varying values for tip . The plot shows the effective tip for each transaction as a function of the current base_fee . As one can see, the lines now intersect, indicating base_fee levels at which the relative order of the specific two transactions flips. This behavior has been noted in the past when analysing the properties of EIP-1559 transactions. Each transaction can be in one of two states for any given base_fee : While base_fee &lt;= fee_cap - tip , the transaction is willing to pay a constant tip to the miner ( static state ). Transactions that set tip == fee_cap (Tx D in the plot) are never in this state. Once base_fee &gt;fee_cap - tip , the miner payment ability of a transaction is in a dynamic range , decreasing further with increasing base_fee . Mining \u00b6 As before, miners need a way to find the most profitable transactions to include into a new block and thus want to be able to query the mempool for the current upper end of pending transactions. Given the current base_fee , a transaction 's profitability for the miner is given by its effective tip. Thus, the sorting in this context is not a problem of the right metric, but only of efficient implementation. As the relative order of transactions can change over time, the simple single-heap approach for legacy transactions is no longer sufficient. However, the order does stay constant for transactions within both the static and dynamic state respectively, changing only for those that leave either of these states due to a change in the base_fee (that crosses fee_cap - tip ). Thus, it seems plausible that a fairly simple new sorting mechanism can be devised relying on this observation and adjusting the sorting on base_fee changes. Work on the prototyping of such an mechanism has been started and can be found here . All Nodes \u00b6 For eviction, nodes still want to prioritize transactions by chance of future on-chain inclusion. Under EIP-1559 however, the relative attraciveness of transactions as given by their effective tip depends on the base_fee . As the base_fee is adjusted over time, its future behavior is unknown. Thus, a precise ordering by chance of future inclusion is impossible. Instead, the goal has to be to find a heuristic for estimation of this chance that is both efficiently computable and robust (i.e. reasonably precise) under many different base fee paradigms. In addition to the current base_fee , the heuristic could also take into account empirical data from recent history, e.g. base_fee volatility over the last 24h. However, this area still needs further work. Importantly, it is unclear what the practical limits for per-block (i.e. every time the base_fee changes) are and how severely those restrict the choice of heuristic. For transaction replacement, in principle the same heuristic could be used. However, to make replacement predictable for users (as a replacement is usually a conscious effort by a user), a simple rule that enforces improved mining attractiveness and incorporates DOS protection is preferable. A simple example would be new_tx.fee_cap &gt;= old_tx.fee_cap + min_bump &amp;&amp;new_tx.tip &gt;= old_tx.tip + min_bump where min_bump = 0.1 * old_tx.tip but alternative approaches are possible.","title":"EIP-1559 Transaction Sorting: Overview"},{"location":"txprice/sorting-overview/#eip-1559-transaction-sorting-overview","text":"tl;dr Transaction comparison and sorting in the mempool is used for two main problems: On the upper end, finding the most attractive transactions during mining; and on the lower end, identifying the least promising transactions for eviction. For legacy transactions, both problems use the gas_price as the relevant decision metric and max-/min-heaps as efficient partially sorted data structures. For EIP-1559, these problems require different metrics. For mining, a (somewhat more complex) explicit solution seems feasible. For eviction, heuristics are needed that are both efficiently implementable and robust under many different base fee paradigms. As a proposal for a new transaction pricing model, EIP-1559 will change many aspects of Ethereum clients 'behavior. One of the areas most impacted is the mempool, i.e. the part of a client responsible for handling in-flight transactions on their way from users to miners. Tim Beiko recently listed 4 open questions around mempool handling of EIP-1559 transactions, with three of them closely tied to the problem of transaction sorting. Here we aim to give a brief overview of different aspects of mempool transaction sorting and how they are impacted by EIP-1559. This document is mainly intended to serve as a basis of discussion for the upcoming implementers 'call . It will be followed up by a more comprehensive writeup. As the Quilt team has only recently joined the EIP-1559 effort, it is very possible that we made incorrect assumption or overlooked relevant existing work. Feedback in these cases and in general is much appreciated!","title":"EIP-1559 Transaction Sorting: Overview"},{"location":"txprice/sorting-overview/#mempool-sorting","text":"There are two main distinct sorting problems: Miners, when picking transactions for a new block, want to get the currently most profitable transactions. And all nodes, when reaching the maximum mempool capacity, want to get the transactions with the lowest inclusion chance, that they can evict to make room for more promising transactions. Both of these problems consist of two sub-problems: The choice of a comparison metric and the choice of an efficient data structure for transactions, based on that metric. For current (legacy) transactions, both the high-end sorting for mining and the low-end sorting for eviction rely on the gas_price transaction field as their comparison metric. This in turn also leads to the same choice of data structure, namely a (partially-sorted) max-heap for mining and a (partially-sorted) min-heap for eviction. For EIP-1559 transactions, the situation is more complex. For mining, the relevant metric is the current effective transaction tip, i.e. the amount per gas the transaction is willing to pay to the miner for inclusion. For eviction however, this is not the correct metric to use. As the effective transaction tip depends on the current protocol base_fee , the relative order of transaction changes over time and is not an accurate heuristic for inclusion chance. Thus, a more elaborate metric, ideally close to \"estimated average future effective transaction tip \", is necessary. The change in metrics also requires different data structures for EIP-1559 transaction sorting. For mining, a solution based on a slightly more complex heap-approach is in the process of being prototyped . For eviction, the choice of data structure depends on the choice of metric. In particular, this imposes an additional constraint on the choice of metric: Find a metric that is accurate enough under a vast variety of base_fee regimes, while also being efficiently implementable. The third sorting-related problem mentioned by Tim is that of transaction replacement (for transactions with the same sender and nonce). It is similar to that of eviction, with an added focus on DOS protection and predicatability. For EIP-1559 transactions, a decision rule similar to the min_price_bump for legacy transactions can be devised.","title":"Mempool Sorting"},{"location":"txprice/sorting-overview/#current-situation","text":"","title":"Current Situation"},{"location":"txprice/sorting-overview/#transaction-format","text":"Name Description gas_price The fee the transaction is willing to pay (per gas used) While there are additional transaction fields relevant for mempool handling, this is the one relevant for sorting and also the one that sets legacy transactions apart from their EIP-1559 counterparts. It is important to note that the payment willingness as indicated by gas_price for any given transaction is a static value, i.e. cannot depend on the overall current gas price level. Thus, the relative order of transaction always remains the same, as illustrated in this plot: A mempool holding all of these transactions can be certain that C >E >A >B >D will always correctly describe the relative payment willingness of the transactions. It is thus possible to create and maintain efficient (partially) sorted views of the transactions in mempool.","title":"Transaction Format"},{"location":"txprice/sorting-overview/#mining","text":"When assembling a new block, miners need a way to find the most profitable transactions to include. They can do so by querying the mempool for the upper end of (currently executable) pending transactions. For this purpose, the mempool maintains a (partially sorted) max-heap of its transactions, allowing efficient queries for the highest paying transactions. Note: As these heaps are only needed for mining (see below for those used by all nodes), they are usually created and maintained by the mining module directly and not technically part of the mempool. For simplicity we subsume these parts under \"mempool \".","title":"Mining"},{"location":"txprice/sorting-overview/#all-nodes","text":"As nodes only have a limited amount of memory to work with, they cannot keep an unlimited amount of transactions in their mempools. That means that once that limit is reached, they need a way to decide whether to keep additional incoming transactions and if so, which transactions to drop in their favor. Nodes ideally want to prioritize transactions by chance of future on-chain inclusion, dropping those with the least chances of ever being included by a miner. As the relative attractiveness of transactions for miners only depends on their gas_price , it remains constant over time. Thus, the transactions currently least attractive will also have the lowest chances of eventual inclusion. When choosing which transactions to drop, the mempool thus need to be able to find the transactions with the lowest gas_price . It does so by maintaining a (partially sorted) min-heap of its transactions. Decisions on transaction replacement (i.e. when the mempool already holds a transaction from the same sender with the same nonce) are done with the same gas_price metric. An additional minimum price bump is enforecd to ensure DOS protection.","title":"All Nodes"},{"location":"txprice/sorting-overview/#changes-under-eip-1559","text":"","title":"Changes Under EIP-1559"},{"location":"txprice/sorting-overview/#transaction-format_1","text":"Name Description fee_cap The total fee the transaction is willing to pay (per gas used) tip The maximum share of the total fee the transaction is willing to pay to the miner (per gas used) Under EIP-1559, transaction fees are no longer fully paid to the miner. Instead, there is a protocol-wide and dynamically adjusted base_fee (per gas used) that each transaction is required to burn. In addition, transactions can tip the miner to increase their chance of timely inclusion. Instead of specifying a gas_price , transactions now set a tip amount and a fee_cap . If base_fee + tip exceeds fee_cap , the tip is reduced to fee_cap - base_fee . As the effective payment to the miner can thus be lower than the tip specified in the transaction, miner expectations for any given transation is no longer static. As an important consequence, the relative order of transaction is also no longer static, as illustrated by this plot: This example mirrors the total payment willingness of the legacy example above, but sets varying values for tip . The plot shows the effective tip for each transaction as a function of the current base_fee . As one can see, the lines now intersect, indicating base_fee levels at which the relative order of the specific two transactions flips. This behavior has been noted in the past when analysing the properties of EIP-1559 transactions. Each transaction can be in one of two states for any given base_fee : While base_fee &lt;= fee_cap - tip , the transaction is willing to pay a constant tip to the miner ( static state ). Transactions that set tip == fee_cap (Tx D in the plot) are never in this state. Once base_fee &gt;fee_cap - tip , the miner payment ability of a transaction is in a dynamic range , decreasing further with increasing base_fee .","title":"Transaction Format"},{"location":"txprice/sorting-overview/#mining_1","text":"As before, miners need a way to find the most profitable transactions to include into a new block and thus want to be able to query the mempool for the current upper end of pending transactions. Given the current base_fee , a transaction 's profitability for the miner is given by its effective tip. Thus, the sorting in this context is not a problem of the right metric, but only of efficient implementation. As the relative order of transactions can change over time, the simple single-heap approach for legacy transactions is no longer sufficient. However, the order does stay constant for transactions within both the static and dynamic state respectively, changing only for those that leave either of these states due to a change in the base_fee (that crosses fee_cap - tip ). Thus, it seems plausible that a fairly simple new sorting mechanism can be devised relying on this observation and adjusting the sorting on base_fee changes. Work on the prototyping of such an mechanism has been started and can be found here .","title":"Mining"},{"location":"txprice/sorting-overview/#all-nodes_1","text":"For eviction, nodes still want to prioritize transactions by chance of future on-chain inclusion. Under EIP-1559 however, the relative attraciveness of transactions as given by their effective tip depends on the base_fee . As the base_fee is adjusted over time, its future behavior is unknown. Thus, a precise ordering by chance of future inclusion is impossible. Instead, the goal has to be to find a heuristic for estimation of this chance that is both efficiently computable and robust (i.e. reasonably precise) under many different base fee paradigms. In addition to the current base_fee , the heuristic could also take into account empirical data from recent history, e.g. base_fee volatility over the last 24h. However, this area still needs further work. Importantly, it is unclear what the practical limits for per-block (i.e. every time the base_fee changes) are and how severely those restrict the choice of heuristic. For transaction replacement, in principle the same heuristic could be used. However, to make replacement predictable for users (as a replacement is usually a conscious effort by a user), a simple rule that enforces improved mining attractiveness and incorporates DOS protection is preferable. A simple example would be new_tx.fee_cap &gt;= old_tx.fee_cap + min_bump &amp;&amp;new_tx.tip &gt;= old_tx.tip + min_bump where min_bump = 0.1 * old_tx.tip but alternative approaches are possible.","title":"All Nodes"},{"location":"workflow/","text":"Generalized Workflows and Strategies \u00b6 Sandwiching transactions is one of our preferred methods to extract MEV value. Sandwiching transactions provides some of the simplest logic necessary to extract value from a flow of transactions, and therefore, our initial implementation will rely on this strategy. We intend to expand to other strategies in the future . The general flow for our model will be accepting new transactions through a front end on supported pairs. Users query their specific transaction and we estimate a quote on how much it will cost them to perform their transaction, along with a wait time. If the user chooses to commit their transaction, they agree to a transaction to be performed no worse than the quote by the timeout given; We then add the new transaction request into our backend to be bundled. Ideal Workflow \u00b6 If we can find a bundle that is worth being minted before the transactions timeout period, we will submit the bundle to the miners, and then wait for the next block minted to acknowledge our bundle. If our bundle is in the next block, we send an acknowledgement back to the front end. Ideal Success \u00b6 If we cannot find a bundle that includes transaction T before their timeout, we will report back to the front end, acknowledging that their transaction has timed out. Ideal Failure \u00b6 'BLT' Sandwiching \u00b6 Before flashbots, sandwich attacking involved finding a sequence of transaction to be able to back run, meaning to put a desired transaction behind a large transaction experiencing high slippage, to experience positive slippage caused by the large transaction before hand. In our case, we're working with a private transaction flow where we can sequence them however we choose, meaning we can produce and capture MEV opportunities that would typically be exploited by a third party. the key to sandwiching with a reliable benefit to our users is to sequence transaction flow such that the cost that each transaction would experience is less than if they had all placed their orders individually. Ideally we should look to sequence the opposite transaction behind significant transactions in one direction to capture this MEV potential. Miner bidding \u00b6 A factor to be considered by our system for producing possible bundles is to ask if the bundle is profitable enough to cover the bid require to be minted, while still having left over value to redistribute to the front end users, and the community as a whole. What a miner will accept can be approximated by viewing the previous minted blocks transactions, and looking at the bottom N transactions within that block. Those bottom N transactions are the transactions with the cheapest gas prices that were still minted into the block; in order to have our bundle minted into a block, we must be able to beat or match the last N transactions within a block's gas prices. If we assume that we will always sandwich 3 transactions together into 1 bundle, we can approximate that we must beat whatever the last 3 transactions in the last minted blocks' gas prices were. Given minted transactions $ \\(T={t_1,\u2026,t_k}\\) in previous block, we know we must provide a higher payout than \\(T_{min}=[t_{k-n},t_k]\\) , where \\(N\\) is the number of transactions within bundle \\(B\\) , and payouts are determined by the gas price \\(t^g_n\\) and gas limit \\(t^l_n\\) , we know our bid \\(B_{bid}\\) must be: \\(B_{b i d}>=\\sum_{n=0}^{B_{n}-1} t_{k-n}^{g} * t_{k-n}^{l}\\) Quote pricing \u00b6 Giving a reasonable quote to the front end user will depend on that inherent value of the transaction being posted in relation to what transactions we currently have pending to be minted, namely its volume of tokens being swapped. Fee estimation algorithm \u00b6 Estimate gas based on historical data and set it as Gas_Limit Take a margin of L>1 and set Limit_used = Gas_Limit * L For each executed transaction(With Limit_Used), read the actual gas used: Gas_used If Gas_used > Gas_Limit, set Gas_Limit = Gas_used, Limit_used = Gas_used * L If a transaction fails for insufficient gas: Run estimateGas() on the failed transaction and obtain Failed_Limit <br> Create and sign a new transaction <br> Retransmit transaction with new estimation <br> Update Gas_Limit = Failed_Limit <br> Raise error for investigation <br>","title":"Workflow"},{"location":"workflow/#generalized-workflows-and-strategies","text":"Sandwiching transactions is one of our preferred methods to extract MEV value. Sandwiching transactions provides some of the simplest logic necessary to extract value from a flow of transactions, and therefore, our initial implementation will rely on this strategy. We intend to expand to other strategies in the future . The general flow for our model will be accepting new transactions through a front end on supported pairs. Users query their specific transaction and we estimate a quote on how much it will cost them to perform their transaction, along with a wait time. If the user chooses to commit their transaction, they agree to a transaction to be performed no worse than the quote by the timeout given; We then add the new transaction request into our backend to be bundled.","title":"Generalized Workflows and Strategies"},{"location":"workflow/#ideal-workflow","text":"If we can find a bundle that is worth being minted before the transactions timeout period, we will submit the bundle to the miners, and then wait for the next block minted to acknowledge our bundle. If our bundle is in the next block, we send an acknowledgement back to the front end.","title":"Ideal Workflow"},{"location":"workflow/#ideal-success","text":"If we cannot find a bundle that includes transaction T before their timeout, we will report back to the front end, acknowledging that their transaction has timed out.","title":"Ideal Success"},{"location":"workflow/#ideal-failure","text":"","title":"Ideal Failure"},{"location":"workflow/#blt-sandwiching","text":"Before flashbots, sandwich attacking involved finding a sequence of transaction to be able to back run, meaning to put a desired transaction behind a large transaction experiencing high slippage, to experience positive slippage caused by the large transaction before hand. In our case, we're working with a private transaction flow where we can sequence them however we choose, meaning we can produce and capture MEV opportunities that would typically be exploited by a third party. the key to sandwiching with a reliable benefit to our users is to sequence transaction flow such that the cost that each transaction would experience is less than if they had all placed their orders individually. Ideally we should look to sequence the opposite transaction behind significant transactions in one direction to capture this MEV potential.","title":"'BLT' Sandwiching"},{"location":"workflow/#miner-bidding","text":"A factor to be considered by our system for producing possible bundles is to ask if the bundle is profitable enough to cover the bid require to be minted, while still having left over value to redistribute to the front end users, and the community as a whole. What a miner will accept can be approximated by viewing the previous minted blocks transactions, and looking at the bottom N transactions within that block. Those bottom N transactions are the transactions with the cheapest gas prices that were still minted into the block; in order to have our bundle minted into a block, we must be able to beat or match the last N transactions within a block's gas prices. If we assume that we will always sandwich 3 transactions together into 1 bundle, we can approximate that we must beat whatever the last 3 transactions in the last minted blocks' gas prices were. Given minted transactions $ \\(T={t_1,\u2026,t_k}\\) in previous block, we know we must provide a higher payout than \\(T_{min}=[t_{k-n},t_k]\\) , where \\(N\\) is the number of transactions within bundle \\(B\\) , and payouts are determined by the gas price \\(t^g_n\\) and gas limit \\(t^l_n\\) , we know our bid \\(B_{bid}\\) must be: \\(B_{b i d}>=\\sum_{n=0}^{B_{n}-1} t_{k-n}^{g} * t_{k-n}^{l}\\)","title":"Miner bidding"},{"location":"workflow/#quote-pricing","text":"Giving a reasonable quote to the front end user will depend on that inherent value of the transaction being posted in relation to what transactions we currently have pending to be minted, namely its volume of tokens being swapped.","title":"Quote pricing"},{"location":"workflow/#fee-estimation-algorithm","text":"Estimate gas based on historical data and set it as Gas_Limit Take a margin of L>1 and set Limit_used = Gas_Limit * L For each executed transaction(With Limit_Used), read the actual gas used: Gas_used If Gas_used > Gas_Limit, set Gas_Limit = Gas_used, Limit_used = Gas_used * L If a transaction fails for insufficient gas: Run estimateGas() on the failed transaction and obtain Failed_Limit <br> Create and sign a new transaction <br> Retransmit transaction with new estimation <br> Update Gas_Limit = Failed_Limit <br> Raise error for investigation <br>","title":"Fee estimation algorithm"},{"location":"workflow/EVENT_TRACING/","text":"Event Tracing \u00b6 Waffle \u00b6 https://ethereum-waffle.readthedocs.io/en/latest/matchers.html#emitting-events","title":"EVENT TRACING"},{"location":"workflow/EVENT_TRACING/#event-tracing","text":"","title":"Event Tracing"},{"location":"workflow/EVENT_TRACING/#waffle","text":"https://ethereum-waffle.readthedocs.io/en/latest/matchers.html#emitting-events","title":"Waffle"}]}